"""
	author: Suhas Vittal
	date:	5 October 2021 @ 2:35 p.m. EST
"""

from qiskit.circuit import QuantumCircuit, Qubit
from qiskit.transpiler import CouplingMap, PassManager
from qiskit.transpiler.passes import *
from qiskit.compiler import transpile
from qiskit.visualization import plot_histogram
from qiskit import Aer

from mpathswap import MultipathSwap, MPSWAP_ERRNO
from qcirc import _bench_and_cmp, _build_pass_manager, _pad_circuit_to_fit

import pandas as pd

from sys import argv

qasmbench_medium = [
	'adder_n10',		# single adder
	'cc_n12',			# counterfeit coin
	'multiplier_n15', 	# binary multiplier
	'qf21_n15', 		# quantum phase estimation, factor 21			
	'sat_n11',		
	'qft_n15',
	'dnn_n8',			# quantum deep neural net
	'seca_n11',			# shor's error correction
	'bv_n14',			# bernstein-vazirani algorithm 
	'ising_n10',		# ising gate sim
	'qaoa_n6',			
	'qpe_n9',			# quantum phase estimation
	'simon_n6'			# simon's algorithm	
]

qasmbench_large = [
	'bigadder_n18',		# ripple carry adder	
	'qft_n20',
	'ising_n26',		# ising gate sim
	'bv_n19',			# bernstein-vazirani algorithm	
	'dnn_n16',			# quantum deep neural net
	'multiplier_n25',	# binary multiplier
	'wstate_n27',		
	'ghz_state_n23',
	'cat_state_n22',	
	'square_root_n18',  # square root	
	'cc_n18'			# counterfeit coin
]

class BenchmarkPass(AnalysisPass):
	def __init__(self, sabre_routing_pass, mpath_routing_pass, output_file='qasmbench.csv', dataset='medium', runs=5):
		self.output_file = output_file
		self.dataset = dataset
		self.sabre_routing_pass = sabre_routing_pass
		self.mpath_routing_pass = mpath_routing_pass
	
	def run(self, dag):
		original_circuit_size = dag.size()
		original_circuit_depth = dag.depth()

		sabre_swaps, mpath_swaps, sabre_depth, mpath_depth, sabre_time, mpath_time = 0, 0, 0, 0, 0, 0
		for _ in range(runs):
			# Run dag on both passes. 
			sabre_dag = sabre_routing_pass.run(dag)
			mpath_dag = mpath_routing_pass.run(dag)


def b_qasmbench(coupling_map, dataset='medium', out_file='qasmbench.csv', max_swaps=10, max_lookahead=5, max_front_layer_size=3, runs=5):
	sabre_routing_pass = SabreSwap(coupling_map)
	mpath_routing_pass = MultipathSwap(coupling_map, max_swaps=max_swaps, max_lookahead=max_lookahead, max_front_layer_size=max_front_layer_size)

	vanilla_pm = _build_pass_manager(None, coupling_map)
	sabre_pm = _build_pass_manager(sabre_routing_pass, coupling_map)
	mpath_pm = _build_pass_manager(mpath_routing_pass, coupling_map)
		
	data = {
		'SABRE Swaps': [],
		'MPATH Swaps': [],
		'SABRE Depth': [],
		'MPATH Depth': [],
		'SABRE Time': [],
		'MPATH Time': []
	}

	benchmark_suite = qasmbench_medium if dataset=='medium' else qasmbench_large

	for qb_file in benchmark_suite:
		circ = QuantumCircuit.from_qasm_file('benchmarks/qasmbench/%s/%s/%s.qasm' % (dataset, qb_file, qb_file))	
		_pad_circuit_to_fit(circ, coupling_map)

		sabre_swaps, mpath_swaps, sabre_depth, mpath_depth, sabre_time, mpath_time = _bench_and_cmp(circ, coupling_map, vanilla_pm, sabre_pm, mpath_pm, runs=runs)	
		if sabre_swaps == -1:
			mpath_swaps = 'N/A'
			mpath_depth = 'N/A'
			mpath_time = 'N/A'
			print('[%s]\n\tN/A', qb_file)
		else:
			print('[%s]\n\tSABRE Swaps: %.3f\n\tMultipath Swaps: %.3f\n\tSABRE Depth: %.3f\n\tMultipath Depth: %.3f\n\tSABRE Time: %.3f\n\tMultipath Time: %.3f'
					% (qb_file, sabre_swaps, mpath_swaps, sabre_depth, mpath_depth, sabre_time, mpath_time))
		data['SABRE Swaps'].append(sabre_swaps)
		data['MPATH Swaps'].append(mpath_swaps)
		data['SABRE Depth'].append(sabre_depth)
		data['MPATH Depth'].append(mpath_depth)
		data['SABRE Time'].append(sabre_time)
		data['MPATH Time'].append(mpath_time)
	
	df = pd.DataFrame(data=data, index=benchmark_suite)
	df.to_csv(out_file)
	
if __name__ == '__main__':
	mode = argv[1]
	
	coupling_style = argv[2]
	max_swaps = int(argv[3])
	max_look = int(argv[4])
	max_fls = int(argv[5])
	runs = int(argv[6])
	file_out = argv[7]

	print('Config:\n\tmode: %s\n\tcoupling style: %s\n\tmax swaps: %d\n\tmax lookahead: %d\n\tmax front layer size: %d\n\truns: %d'
			% (mode, coupling_style, max_swaps, max_look, max_fls, runs))

	if mode == 'medium':
		if coupling_style == 'grid':
			coupling_map = CouplingMap.from_grid(3, 5)
		elif coupling_style == 'linear':
			coupling_map = CouplingMap.from_line(15)
		else:
			coupling_map = CouplingMap.from_ring(15)
	else:
		if coupling_style == 'grid':
			coupling_map = CouplingMap.from_grid(4, 7)
		elif coupling_style == 'linear':
			coupling_map = CouplingMap.from_line(28)
		else:
			coupling_map = CouplingMap.from_ring(28)
	b_qasmbench(coupling_map, dataset=mode, max_swaps=max_swaps, max_lookahead=max_look, max_front_layer_size=max_fls, runs=runs, out_file=file_out)
