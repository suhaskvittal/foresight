<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/Allocators/BMT/DefaultBMTQAllocatorImpl.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li><li class="navelem"><a class="el" href="../../dir_06974191db7fbe66527a95ceac77ccfb.xhtml">Allocators</a></li><li class="navelem"><a class="el" href="../../dir_4e1c057fba7592260fc9a25a8dee270f.xhtml">BMT</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">DefaultBMTQAllocatorImpl.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/d1c/DefaultBMTQAllocatorImpl_8h.xhtml">enfield/Transform/Allocators/BMT/DefaultBMTQAllocatorImpl.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">using namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="keyword">using namespace </span>bmt;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">static</span> <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;uint32_t&gt;</a> MaxMapSeqCandidates</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;(<span class="stringliteral">&quot;-bmt-max-mapseq&quot;</span>, <span class="stringliteral">&quot;Select the best N mapping sequences from phase 2.&quot;</span>, 1, <span class="keyword">false</span>);</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// --------------------- SeqNCandidatesGenerator ------------------------</span></div><div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#a28c5f57b44796442007c18035fb2f92d">   12</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#a28c5f57b44796442007c18035fb2f92d">SeqNCandidatesGenerator::initializeImpl</a>() {</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    mIt = mMod-&gt;stmt_begin();</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;}</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#a0c83737ef8e22edc2b22f90facf831a4">   16</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#a0c83737ef8e22edc2b22f90facf831a4">SeqNCandidatesGenerator::finishedImpl</a>() {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="keywordflow">return</span> mIt == mMod-&gt;stmt_end();</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;}</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#a6677cb9e2695aec310041ea72ff761c7">   20</a></span>&#160;std::vector&lt;Node::Ref&gt; <a class="code" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#a6677cb9e2695aec310041ea72ff761c7">SeqNCandidatesGenerator::generateImpl</a>() {</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordflow">return</span> { mIt-&gt;get() };</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;}</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#acb64742057c72f8c00df2efd910bbb3d">   24</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#acb64742057c72f8c00df2efd910bbb3d">SeqNCandidatesGenerator::signalProcessed</a>(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> node) {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">if</span> (node != mIt-&gt;get()) {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Node `&quot;</span> &lt;&lt; node-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">toString</a>(<span class="keyword">false</span>) &lt;&lt; <span class="stringliteral">&quot;` not the one processed. &quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;Actual: `&quot;</span> &lt;&lt; (*mIt)-&gt;toString(<span class="keyword">false</span>) &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    }</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    ++mIt;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#afc759b280fc1aa48a0472dc6164128dd">   34</a></span>&#160;<a class="code" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#aa9a248ac63bd971bc30108cb2f1537ac">SeqNCandidatesGenerator::uRef</a> <a class="code" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#afc759b280fc1aa48a0472dc6164128dd">SeqNCandidatesGenerator::Create</a>() {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#aa9a248ac63bd971bc30108cb2f1537ac">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml">SeqNCandidatesGenerator</a>());</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">// --------------------- FirstCandidateSelector ------------------------</span></div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="../../d9/ddc/classefd_1_1FirstCandidateSelector.xhtml#ab91e12daa28ad42244d357470f462417">   39</a></span>&#160;<a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a> <a class="code" href="../../d9/ddc/classefd_1_1FirstCandidateSelector.xhtml#ab91e12daa28ad42244d357470f462417">FirstCandidateSelector::select</a>(uint32_t maxCandidates,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a>&amp; candidates) {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    uint32_t selectedSize = std::min((uint32_t) candidates.size(), maxCandidates);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a> selected(candidates.begin(), candidates.begin() + selectedSize);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> selected;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../d9/ddc/classefd_1_1FirstCandidateSelector.xhtml#a7a72f5edc7a77715de5867417fd802c2">   46</a></span>&#160;<a class="code" href="../../d9/ddc/classefd_1_1FirstCandidateSelector.xhtml#ad7b114030053fd8dbee99f89f7a706c1">FirstCandidateSelector::uRef</a> <a class="code" href="../../d9/ddc/classefd_1_1FirstCandidateSelector.xhtml#a7a72f5edc7a77715de5867417fd802c2">FirstCandidateSelector::Create</a>() {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d9/ddc/classefd_1_1FirstCandidateSelector.xhtml#ad7b114030053fd8dbee99f89f7a706c1">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d9/ddc/classefd_1_1FirstCandidateSelector.xhtml">FirstCandidateSelector</a>());</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">// --------------------- GeoDistanceSwapCEstimator ------------------------</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#af6fec08387d2e2051bc5f33a23bf9b1f">Vector</a> GeoDistanceSwapCEstimator::distanceFrom(<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">Graph::Ref</a> g, uint32_t u) {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    uint32_t size = g-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">size</a>();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#af6fec08387d2e2051bc5f33a23bf9b1f">Vector</a> distance(size, _undef);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    std::queue&lt;uint32_t&gt; q;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::vector&lt;bool&gt; visited(size, <span class="keyword">false</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    q.push(u);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    visited[u] = <span class="keyword">true</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    distance[u] = 0;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">while</span> (!q.empty()) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        uint32_t u = q.front();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        q.pop();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">for</span> (uint32_t v : g-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">adj</a>(u)) {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">if</span> (!visited[v]) {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                visited[v] = <span class="keyword">true</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                distance[v] = distance[u] + 1;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                q.push(v);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> distance;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#ae8488d82a10b2d723bab800b3d0bbd73">   78</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#ae8488d82a10b2d723bab800b3d0bbd73">GeoDistanceSwapCEstimator::preprocess</a>() {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    uint32_t size = mG-&gt;size();</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    mDist.assign(size, <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#af6fec08387d2e2051bc5f33a23bf9b1f">Vector</a>());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; size; ++i) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        mDist[i] = distanceFrom(mG, i);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#aa19267c677e0d4b4e8c14b1dee4b5674">   86</a></span>&#160;uint32_t <a class="code" href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#aa19267c677e0d4b4e8c14b1dee4b5674">GeoDistanceSwapCEstimator::estimateImpl</a>(<span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; fromM,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; toM) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    uint32_t totalDistance = 0;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = fromM.size(); i &lt; e; ++i) {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">if</span> (fromM[i] != _undef) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            totalDistance += mDist[fromM[i]][toM[i]];</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> totalDistance;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#adb7b735fac3a87c1c77027ba742c6e81">   99</a></span>&#160;<a class="code" href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#aaf34f019095b84c0d635cf7c47490574">GeoDistanceSwapCEstimator::uRef</a> <a class="code" href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#adb7b735fac3a87c1c77027ba742c6e81">GeoDistanceSwapCEstimator::Create</a>() {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#aaf34f019095b84c0d635cf7c47490574">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d1/d9a/Allocators_8def.xhtml#af41ff534c704cd896bc9331d06140c5f">GeoDistanceSwapCEstimator</a>());</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">// --------------------- GeoNearestLQPProcessor ------------------------</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;uint32_t GeoNearestLQPProcessor::getNearest(<span class="keyword">const</span> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">Graph::Ref</a> g, uint32_t u, <span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a>&amp; inv) {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    std::vector&lt;bool&gt; visited(mPQubits, <span class="keyword">false</span>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    std::queue&lt;uint32_t&gt; q;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    q.push(u);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    visited[u] = <span class="keyword">true</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">while</span> (!q.empty()) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        uint32_t v = q.front();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        q.pop();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">if</span> (inv[v] == _undef) <span class="keywordflow">return</span> v;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">for</span> (uint32_t w : g-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">adj</a>(v))</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">if</span> (!visited[w]) {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                visited[w] = <span class="keyword">true</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                q.push(w);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">// There is no way we can not find anyone!!</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Can&#39;t find any vertice connected to v:&quot;</span> &lt;&lt; u &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="../../de/d30/classefd_1_1GeoNearestLQPProcessor.xhtml#a1f0ab0546333875c2fa08e13eb9961a4">  128</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../de/d30/classefd_1_1GeoNearestLQPProcessor.xhtml#a1f0ab0546333875c2fa08e13eb9961a4">GeoNearestLQPProcessor::process</a>(<span class="keyword">const</span> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">Graph::Ref</a> g, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; fromM, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; toM) {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    mPQubits = g-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">size</a>();</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    mVQubits = fromM.size();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">auto</span> fromInv = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(mPQubits, fromM, <span class="keyword">false</span>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">auto</span> toInv = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(mPQubits, toM, <span class="keyword">false</span>);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; mVQubits; ++i) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">if</span> (toM[i] == _undef &amp;&amp; fromM[i] != _undef) {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">if</span> (toInv[fromM[i]] == _undef) {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                toM[i] = fromM[i];</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                toM[i] = getNearest(g, fromM[i], toInv);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            toInv[toM[i]] = i;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="../../de/d30/classefd_1_1GeoNearestLQPProcessor.xhtml#a9258fa88b17fb80b3486f674fa21499d">  148</a></span>&#160;<a class="code" href="../../de/d30/classefd_1_1GeoNearestLQPProcessor.xhtml#a142ba3d7cf56d38a1b00b12f281f50f5">GeoNearestLQPProcessor::uRef</a> <a class="code" href="../../de/d30/classefd_1_1GeoNearestLQPProcessor.xhtml#a9258fa88b17fb80b3486f674fa21499d">GeoNearestLQPProcessor::Create</a>() {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../de/d30/classefd_1_1GeoNearestLQPProcessor.xhtml#a142ba3d7cf56d38a1b00b12f281f50f5">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d1/d9a/Allocators_8def.xhtml#a7b74d5f39efed96b49453306b0be062a">GeoNearestLQPProcessor</a>());</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">// --------------------- BestNMSSelector ------------------------</span></div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="../../d0/dd1/classefd_1_1BestNMSSelector.xhtml#a3cab6d2ba14ecf21272f9ca15a5d911a">  153</a></span>&#160;<a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#af6fec08387d2e2051bc5f33a23bf9b1f">Vector</a> <a class="code" href="../../d0/dd1/classefd_1_1BestNMSSelector.xhtml#a3cab6d2ba14ecf21272f9ca15a5d911a">BestNMSSelector::select</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a75ab4a9032ad7dc808fe170911a1198c">TIMatrix</a>&amp; mem) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">typedef</span> std::pair&lt;uint32_t, uint32_t&gt; UIntPair;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#af6fec08387d2e2051bc5f33a23bf9b1f">Vector</a> selected;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    uint32_t maxMapSeq = MaxMapSeqCandidates.getVal();</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    uint32_t lastLayer = mem.size() - 1;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    std::priority_queue&lt;UIntPair,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        std::vector&lt;UIntPair&gt;,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        std::less&lt;UIntPair&gt;&gt; pQueue;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = mem[lastLayer].size(); i &lt; e; ++i) {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> &amp;info = mem[lastLayer][i];</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        pQueue.push(std::make_pair(info.mappingCost + info.swapEstimatedCost, i));</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">while</span> (!pQueue.empty() || selected.size() &lt; maxMapSeq) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        selected.push_back(pQueue.top().second);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        pQueue.pop();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">return</span> selected;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="../../d0/dd1/classefd_1_1BestNMSSelector.xhtml#a99e462daa217dfa1b56e1066c1a944d8">  176</a></span>&#160;<a class="code" href="../../d0/dd1/classefd_1_1BestNMSSelector.xhtml#a1961d26f9719b4356e43e94bcd846997">BestNMSSelector::uRef</a> <a class="code" href="../../d0/dd1/classefd_1_1BestNMSSelector.xhtml#a99e462daa217dfa1b56e1066c1a944d8">BestNMSSelector::Create</a>() {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d0/dd1/classefd_1_1BestNMSSelector.xhtml#a1961d26f9719b4356e43e94bcd846997">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d1/d9a/Allocators_8def.xhtml#aec14e2111f7061c248c34b4b4d9e3357">BestNMSSelector</a>());</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div><div class="ttc" id="namespaceefd_1_1bmt_xhtml_a75ab4a9032ad7dc808fe170911a1198c"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a75ab4a9032ad7dc808fe170911a1198c">efd::bmt::TIMatrix</a></div><div class="ttdeci">std::vector&lt; TIVector &gt; TIMatrix</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00046">BoundedMappingTreeQAllocator.h:46</a></div></div>
<div class="ttc" id="classefd_1_1GeoDistanceSwapCEstimator_xhtml_aa19267c677e0d4b4e8c14b1dee4b5674"><div class="ttname"><a href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#aa19267c677e0d4b4e8c14b1dee4b5674">efd::GeoDistanceSwapCEstimator::estimateImpl</a></div><div class="ttdeci">uint32_t estimateImpl(const Mapping &amp;fromM, const Mapping &amp;toM) override</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00086">DefaultBMTQAllocatorImpl.cpp:86</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="Allocators_8def_xhtml_a7b74d5f39efed96b49453306b0be062a"><div class="ttname"><a href="../../d1/d9a/Allocators_8def.xhtml#a7b74d5f39efed96b49453306b0be062a">GeoNearestLQPProcessor</a></div><div class="ttdeci">GeoNearestLQPProcessor</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d9a/Allocators_8def_source.xhtml#l00011">Allocators.def:11</a></div></div>
<div class="ttc" id="Allocators_8def_xhtml_aec14e2111f7061c248c34b4b4d9e3357"><div class="ttname"><a href="../../d1/d9a/Allocators_8def.xhtml#aec14e2111f7061c248c34b4b4d9e3357">BestNMSSelector</a></div><div class="ttdeci">BestNMSSelector</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d9a/Allocators_8def_source.xhtml#l00011">Allocators.def:11</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="classefd_1_1SeqNCandidatesGenerator_xhtml_a6677cb9e2695aec310041ea72ff761c7"><div class="ttname"><a href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#a6677cb9e2695aec310041ea72ff761c7">efd::SeqNCandidatesGenerator::generateImpl</a></div><div class="ttdeci">std::vector&lt; Node::Ref &gt; generateImpl() override</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00020">DefaultBMTQAllocatorImpl.cpp:20</a></div></div>
<div class="ttc" id="classefd_1_1GeoDistanceSwapCEstimator_xhtml_ae8488d82a10b2d723bab800b3d0bbd73"><div class="ttname"><a href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#ae8488d82a10b2d723bab800b3d0bbd73">efd::GeoDistanceSwapCEstimator::preprocess</a></div><div class="ttdeci">void preprocess() override</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00078">DefaultBMTQAllocatorImpl.cpp:78</a></div></div>
<div class="ttc" id="classefd_1_1BestNMSSelector_xhtml_a99e462daa217dfa1b56e1066c1a944d8"><div class="ttname"><a href="../../d0/dd1/classefd_1_1BestNMSSelector.xhtml#a99e462daa217dfa1b56e1066c1a944d8">efd::BestNMSSelector::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00176">DefaultBMTQAllocatorImpl.cpp:176</a></div></div>
<div class="ttc" id="classefd_1_1BestNMSSelector_xhtml_a1961d26f9719b4356e43e94bcd846997"><div class="ttname"><a href="../../d0/dd1/classefd_1_1BestNMSSelector.xhtml#a1961d26f9719b4356e43e94bcd846997">efd::BestNMSSelector::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; BestNMSSelector &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../db/d1c/DefaultBMTQAllocatorImpl_8h_source.xhtml#l00082">DefaultBMTQAllocatorImpl.h:82</a></div></div>
<div class="ttc" id="classefd_1_1FirstCandidateSelector_xhtml_ad7b114030053fd8dbee99f89f7a706c1"><div class="ttname"><a href="../../d9/ddc/classefd_1_1FirstCandidateSelector.xhtml#ad7b114030053fd8dbee99f89f7a706c1">efd::FirstCandidateSelector::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; FirstCandidateSelector &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../db/d1c/DefaultBMTQAllocatorImpl_8h_source.xhtml#l00033">DefaultBMTQAllocatorImpl.h:33</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_aa85ea20ad74d6a7df7a52c13a9fabe2d"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">efd::Graph::size</a></div><div class="ttdeci">uint32_t size() const</div><div class="ttdoc">Return the number of vertices. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00034">Graph.cpp:34</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a3531989ad03fb1b38b43c7554d0d378e"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">efd::Graph::adj</a></div><div class="ttdeci">std::set&lt; uint32_t &gt; adj(uint32_t i) const</div><div class="ttdoc">Return the set of adjacent vertices of some vertex i. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00046">Graph.cpp:46</a></div></div>
<div class="ttc" id="classefd_1_1GeoNearestLQPProcessor_xhtml_a1f0ab0546333875c2fa08e13eb9961a4"><div class="ttname"><a href="../../de/d30/classefd_1_1GeoNearestLQPProcessor.xhtml#a1f0ab0546333875c2fa08e13eb9961a4">efd::GeoNearestLQPProcessor::process</a></div><div class="ttdeci">void process(const Graph::Ref g, Mapping &amp;fromM, Mapping &amp;toM) override</div><div class="ttdoc">Processes Mapping toM, based on the graph g and on the last Mapping fromM. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00128">DefaultBMTQAllocatorImpl.cpp:128</a></div></div>
<div class="ttc" id="Allocators_8def_xhtml_af41ff534c704cd896bc9331d06140c5f"><div class="ttname"><a href="../../d1/d9a/Allocators_8def.xhtml#af41ff534c704cd896bc9331d06140c5f">GeoDistanceSwapCEstimator</a></div><div class="ttdeci">GeoDistanceSwapCEstimator</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d9a/Allocators_8def_source.xhtml#l00011">Allocators.def:11</a></div></div>
<div class="ttc" id="classefd_1_1SeqNCandidatesGenerator_xhtml_afc759b280fc1aa48a0472dc6164128dd"><div class="ttname"><a href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#afc759b280fc1aa48a0472dc6164128dd">efd::SeqNCandidatesGenerator::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00034">DefaultBMTQAllocatorImpl.cpp:34</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml">efd::Opt</a></div><div class="ttdoc">Class used to declare the command line options available. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00012">CommandLine.h:12</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a96ca13a5c2b971b68619ce4a34be0f66"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">efd::Node::toString</a></div><div class="ttdeci">virtual std::string toString(bool pretty=false) const =0</div><div class="ttdoc">Returns a std::string representation of this Node and its childrem. </div></div>
<div class="ttc" id="classefd_1_1SeqNCandidatesGenerator_xhtml_acb64742057c72f8c00df2efd910bbb3d"><div class="ttname"><a href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#acb64742057c72f8c00df2efd910bbb3d">efd::SeqNCandidatesGenerator::signalProcessed</a></div><div class="ttdeci">void signalProcessed(Node::Ref node) override</div><div class="ttdoc">Signals the generator which node has been selected. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00024">DefaultBMTQAllocatorImpl.cpp:24</a></div></div>
<div class="ttc" id="classefd_1_1GeoDistanceSwapCEstimator_xhtml_aaf34f019095b84c0d635cf7c47490574"><div class="ttname"><a href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#aaf34f019095b84c0d635cf7c47490574">efd::GeoDistanceSwapCEstimator::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; GeoDistanceSwapCEstimator &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../db/d1c/DefaultBMTQAllocatorImpl_8h_source.xhtml#l00056">DefaultBMTQAllocatorImpl.h:56</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml">efd::Node</a></div><div class="ttdoc">Base class for AST nodes. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00039">Nodes.h:39</a></div></div>
<div class="ttc" id="classefd_1_1GeoDistanceSwapCEstimator_xhtml_adb7b735fac3a87c1c77027ba742c6e81"><div class="ttname"><a href="../../d1/d6b/classefd_1_1GeoDistanceSwapCEstimator.xhtml#adb7b735fac3a87c1c77027ba742c6e81">efd::GeoDistanceSwapCEstimator::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00099">DefaultBMTQAllocatorImpl.cpp:99</a></div></div>
<div class="ttc" id="classefd_1_1GeoNearestLQPProcessor_xhtml_a9258fa88b17fb80b3486f674fa21499d"><div class="ttname"><a href="../../de/d30/classefd_1_1GeoNearestLQPProcessor.xhtml#a9258fa88b17fb80b3486f674fa21499d">efd::GeoNearestLQPProcessor::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00148">DefaultBMTQAllocatorImpl.cpp:148</a></div></div>
<div class="ttc" id="classefd_1_1FirstCandidateSelector_xhtml_a7a72f5edc7a77715de5867417fd802c2"><div class="ttname"><a href="../../d9/ddc/classefd_1_1FirstCandidateSelector.xhtml#a7a72f5edc7a77715de5867417fd802c2">efd::FirstCandidateSelector::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00046">DefaultBMTQAllocatorImpl.cpp:46</a></div></div>
<div class="ttc" id="classefd_1_1SeqNCandidatesGenerator_xhtml_aa9a248ac63bd971bc30108cb2f1537ac"><div class="ttname"><a href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#aa9a248ac63bd971bc30108cb2f1537ac">efd::SeqNCandidatesGenerator::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; SeqNCandidatesGenerator &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../db/d1c/DefaultBMTQAllocatorImpl_8h_source.xhtml#l00022">DefaultBMTQAllocatorImpl.h:22</a></div></div>
<div class="ttc" id="namespaceefd_1_1bmt_xhtml_a5b3384851faf32cfe58e9eaf0c44a2e7"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">efd::bmt::MCandidateVector</a></div><div class="ttdeci">std::vector&lt; MappingCandidate &gt; MCandidateVector</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00042">BoundedMappingTreeQAllocator.h:42</a></div></div>
<div class="ttc" id="classefd_1_1FirstCandidateSelector_xhtml_ab91e12daa28ad42244d357470f462417"><div class="ttname"><a href="../../d9/ddc/classefd_1_1FirstCandidateSelector.xhtml#ab91e12daa28ad42244d357470f462417">efd::FirstCandidateSelector::select</a></div><div class="ttdeci">bmt::MCandidateVector select(uint32_t maxCandidates, const bmt::MCandidateVector &amp;candidates) override</div><div class="ttdoc">Selects maxCandidates from candidates. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00039">DefaultBMTQAllocatorImpl.cpp:39</a></div></div>
<div class="ttc" id="classefd_1_1SeqNCandidatesGenerator_xhtml_a0c83737ef8e22edc2b22f90facf831a4"><div class="ttname"><a href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#a0c83737ef8e22edc2b22f90facf831a4">efd::SeqNCandidatesGenerator::finishedImpl</a></div><div class="ttdeci">bool finishedImpl() override</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00016">DefaultBMTQAllocatorImpl.cpp:16</a></div></div>
<div class="ttc" id="namespaceefd_1_1bmt_xhtml_af6fec08387d2e2051bc5f33a23bf9b1f"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#af6fec08387d2e2051bc5f33a23bf9b1f">efd::bmt::Vector</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Vector</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00039">BoundedMappingTreeQAllocator.h:39</a></div></div>
<div class="ttc" id="classefd_1_1SeqNCandidatesGenerator_xhtml_a28c5f57b44796442007c18035fb2f92d"><div class="ttname"><a href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml#a28c5f57b44796442007c18035fb2f92d">efd::SeqNCandidatesGenerator::initializeImpl</a></div><div class="ttdeci">void initializeImpl() override</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00012">DefaultBMTQAllocatorImpl.cpp:12</a></div></div>
<div class="ttc" id="classefd_1_1SeqNCandidatesGenerator_xhtml"><div class="ttname"><a href="../../d0/dfc/classefd_1_1SeqNCandidatesGenerator.xhtml">efd::SeqNCandidatesGenerator</a></div><div class="ttdoc">Sequential generator. </div><div class="ttdef"><b>Definition:</b> <a href="../../db/d1c/DefaultBMTQAllocatorImpl_8h_source.xhtml#l00011">DefaultBMTQAllocatorImpl.h:11</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml">efd::Graph</a></div><div class="ttdoc">Graph representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d16/Graph_8h_source.xhtml#l00011">Graph.h:11</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a1f91f26f141eb5b2dd549121451a786c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">efd::InverseMap</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; InverseMap</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00012">Defs.h:12</a></div></div>
<div class="ttc" id="classefd_1_1BestNMSSelector_xhtml_a3cab6d2ba14ecf21272f9ca15a5d911a"><div class="ttname"><a href="../../d0/dd1/classefd_1_1BestNMSSelector.xhtml#a3cab6d2ba14ecf21272f9ca15a5d911a">efd::BestNMSSelector::select</a></div><div class="ttdeci">bmt::Vector select(const bmt::TIMatrix &amp;mem) override</div><div class="ttdoc">Returns a vector with the line indexes chosen to be tracebacked. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d95/DefaultBMTQAllocatorImpl_8cpp_source.xhtml#l00153">DefaultBMTQAllocatorImpl.cpp:153</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">efd::ExitCode::EXIT_unreachable</a></div></div>
<div class="ttc" id="DefaultBMTQAllocatorImpl_8h_xhtml"><div class="ttname"><a href="../../db/d1c/DefaultBMTQAllocatorImpl_8h.xhtml">DefaultBMTQAllocatorImpl.h</a></div></div>
<div class="ttc" id="classefd_1_1FirstCandidateSelector_xhtml"><div class="ttname"><a href="../../d9/ddc/classefd_1_1FirstCandidateSelector.xhtml">efd::FirstCandidateSelector</a></div><div class="ttdoc">Gets the first maxCandidates from candidates. </div><div class="ttdef"><b>Definition:</b> <a href="../../db/d1c/DefaultBMTQAllocatorImpl_8h_source.xhtml#l00030">DefaultBMTQAllocatorImpl.h:30</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a12a4775008cb8b6242cedc3621d98f9c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">efd::Mapping</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Mapping</div><div class="ttdoc">Defines the type used for mapping the qubits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00011">Defs.h:11</a></div></div>
<div class="ttc" id="classefd_1_1GeoNearestLQPProcessor_xhtml_a142ba3d7cf56d38a1b00b12f281f50f5"><div class="ttname"><a href="../../de/d30/classefd_1_1GeoNearestLQPProcessor.xhtml#a142ba3d7cf56d38a1b00b12f281f50f5">efd::GeoNearestLQPProcessor::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; GeoNearestLQPProcessor &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../db/d1c/DefaultBMTQAllocatorImpl_8h_source.xhtml#l00071">DefaultBMTQAllocatorImpl.h:71</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_adb4ffc373d7273aefb15d2f9dcd4aeb4"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">efd::InvertMapping</a></div><div class="ttdeci">InverseMap InvertMapping(uint32_t archQ, Mapping mapping, bool fill=true)</div><div class="ttdoc">Generates an assignment mapping (maps the architecture&amp;#39;s qubits to the logical ones) of size archQ...</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00025">QbitAllocator.cpp:25</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
