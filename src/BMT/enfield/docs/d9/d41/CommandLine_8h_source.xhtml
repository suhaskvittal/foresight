<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: include/enfield/Support/CommandLine.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_ca9ae9fc199b7939600155691e280c84.xhtml">enfield</a></li><li class="navelem"><a class="el" href="../../dir_71e3284cbba00b0db547557b8d5e42ce.xhtml">Support</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">CommandLine.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d9/d41/CommandLine_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifndef __EFD_COMMAND_LINE_H__</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#define __EFD_COMMAND_LINE_H__</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/d5e/PossibleValuesListTrait_8h.xhtml">enfield/Support/PossibleValuesListTrait.h</a>&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a> {</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    <span class="keyword">class </span>ArgsParser;</div><div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml">   12</a></span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class </span><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt</a>;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="../../d6/d25/classefd_1_1OptBase.xhtml">   15</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a> {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;            <span class="keywordtype">bool</span> mIsRequired;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;            <span class="keywordtype">bool</span> mIsParsed;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;            std::shared_ptr&lt;ArgsParser&gt; mParser;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keyword">protected</span>:</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a78c038f9edc737659541e5cf4f2249ea">parseImpl</a>(std::vector&lt;std::string&gt; args) = 0;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="../../d6/d25/classefd_1_1OptBase.xhtml#a6218f4c7e970dff321d844b542e45189">   28</a></span>&#160;            std::string <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a6218f4c7e970dff321d844b542e45189">mName</a>;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="../../d6/d25/classefd_1_1OptBase.xhtml#a76929386279b8c53893a9ba2881d782e">   30</a></span>&#160;            std::string <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a76929386279b8c53893a9ba2881d782e">mDescription</a>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a750fc8118aa58f03a0b95922e2178e58">OptBase</a>(std::string name, std::string description, <span class="keywordtype">bool</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#ae271836d2366f5dc5ee502430df99c8a">isRequired</a>);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keyword">virtual</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#ada7f795827eeb855da6d55839bd09f59">~OptBase</a>();</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a0ab870ed13c778499c0b53b3b617f34d">isParsed</a>();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#ae271836d2366f5dc5ee502430df99c8a">isRequired</a>();</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keyword">virtual</span> std::vector&lt;std::string&gt; <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#af201e114d28cec5eb4588ee4ef287828">getPossibleValuesList</a>() = 0;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keyword">virtual</span> uint32_t <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a36fb712beadd9a5429bc2d7121eb71af">argsConsumed</a>() = 0;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keyword">virtual</span> std::string <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a3cafab5049227ffbd3089d004e689ffb">getStringVal</a>() = 0;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a62615588393d0a86d38c5d1d3b4c8f97">parse</a>(std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    };</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">   58</a></span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a> {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;T&gt;</a>* opt, std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    };</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="../../d8/db7/structefd_1_1ParseOptTrait_3_01bool_01_4.xhtml">   62</a></span>&#160;    <span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a>&lt;bool&gt; {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;bool&gt;</a>* opt, std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    };</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="../../d6/df3/structefd_1_1ParseOptTrait_3_01int_01_4.xhtml">   66</a></span>&#160;    <span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a>&lt;int&gt; {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;int&gt;</a>* opt, std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    };</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="../../d6/d4a/structefd_1_1ParseOptTrait_3_01unsigned_01_4.xhtml">   70</a></span>&#160;    <span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a>&lt;unsigned&gt; {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;unsigned&gt;</a>* opt, std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    };</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="../../da/d77/structefd_1_1ParseOptTrait_3_01long_01long_01_4.xhtml">   74</a></span>&#160;    <span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a>&lt;long long&gt; {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;long long&gt;</a>* opt, std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    };</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="../../db/da0/structefd_1_1ParseOptTrait_3_01unsigned_01long_01long_01_4.xhtml">   78</a></span>&#160;    <span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a>&lt;unsigned long long&gt; {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;unsigned long long&gt;</a>* opt, std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    };</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="../../db/da9/structefd_1_1ParseOptTrait_3_01float_01_4.xhtml">   82</a></span>&#160;    <span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a>&lt;float&gt; {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;float&gt;</a>* opt, std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    };</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="../../d7/dda/structefd_1_1ParseOptTrait_3_01double_01_4.xhtml">   86</a></span>&#160;    <span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a>&lt;double&gt; {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;double&gt;</a>* opt, std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    };</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="../../d9/d9d/structefd_1_1ParseOptTrait_3_01std_1_1string_01_4.xhtml">   90</a></span>&#160;    <span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a>&lt;<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::string&gt; {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;std::string&gt;</a>* opt, std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    };</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="../../d4/dbd/structefd_1_1ParseOptTrait_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.xhtml">   94</a></span>&#160;    <span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a>&lt;<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;std::string&gt;&gt; {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt</a>&lt;std::vector&lt;std::string&gt;&gt;* opt, std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    };</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="../../db/df0/structefd_1_1ParseOptTrait_3_01EnumString_3_01T_00_01first_00_01last_01_4_01_4.xhtml">   98</a></span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, T first, T last&gt; <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a>&lt;<a class="code" href="../../dc/d5d/classefd_1_1EnumString.xhtml">EnumString</a>&lt;T, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a3ab6f82f2df49bbde5c943bbe60c3cf3a8b04d5e3775d298e78455efc5ca404d5">first</a>, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a3ab6f82f2df49bbde5c943bbe60c3cf3a98bd1c45684cf587ac2347a92dd7bb51">last</a>&gt;&gt; {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt</a>&lt;<a class="code" href="../../dc/d5d/classefd_1_1EnumString.xhtml">EnumString&lt;T, first, last&gt;</a>&gt;* opt, std::vector&lt;std::string&gt; args);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    };</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">class </span><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt</a> : <span class="keyword">public</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a> {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            T mVal;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">protected</span>:</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#aa6e1798e38cf3df5d51a9cb03e2de507">parseImpl</a>(std::vector&lt;std::string&gt; args) <span class="keyword">override</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a0234842f6c0ee4fdcc086670c72d1da3">Opt</a>(std::string name, std::string description, <span class="keywordtype">bool</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#ae271836d2366f5dc5ee502430df99c8a">isRequired</a> = <span class="keyword">false</span>);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a0234842f6c0ee4fdcc086670c72d1da3">Opt</a>(std::string name, std::string description, T def, <span class="keywordtype">bool</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#ae271836d2366f5dc5ee502430df99c8a">isRequired</a> = <span class="keyword">false</span>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> T&amp; <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">getVal</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            std::vector&lt;std::string&gt; <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a756268a27710f30050f30b3b1fcf4d88">getPossibleValuesList</a>() <span class="keyword">override</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            uint32_t <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a46275ed355d77e765883f6f1e9d5c0ca">argsConsumed</a>() <span class="keyword">override</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            std::string <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a5bcbb400700c773f4bba2af9f7478bf6">getStringVal</a>() <span class="keyword">override</span>;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#a54f0d1a2785df120b4d36fc83861da59">  122</a></span>&#160;            <span class="keyword">friend</span> <span class="keyword">struct </span><a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">ParseOptTrait</a>&lt;T&gt;;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    };</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a6bbed132b341f48d4aad4f970e3822bc">ParseArguments</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> argc, <span class="keyword">const</span> <span class="keywordtype">char</span> **argv);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a6bbed132b341f48d4aad4f970e3822bc">ParseArguments</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">template</span> &lt;&gt; uint32_t <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a46275ed355d77e765883f6f1e9d5c0ca">Opt&lt;bool&gt;::argsConsumed</a>();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">template</span> &lt;&gt; std::string <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a5bcbb400700c773f4bba2af9f7478bf6">Opt&lt;bool&gt;::getStringVal</a>();</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">template</span> &lt;&gt; std::string <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a5bcbb400700c773f4bba2af9f7478bf6">Opt&lt;std::string&gt;::getStringVal</a>();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keyword">template</span> &lt;&gt; std::string <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;std::vector&lt;std::string&gt;</a>&gt;::getStringVal();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;};</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">efd::ParseOptTrait&lt;T&gt;::Run</a>(Opt&lt;T&gt;* opt, std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Parse method not implemented for &#39;&quot;</span> &lt;&lt; <span class="keyword">typeid</span>(T).name() &lt;&lt; <span class="stringliteral">&quot;&#39;.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(ExitCode::EXIT_unreachable);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, T first, T last&gt;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">efd::ParseOptTrait&lt;efd::EnumString&lt;T, first, last&gt;</a>&gt;::</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;Run(Opt&lt;<a class="code" href="../../dc/d5d/classefd_1_1EnumString.xhtml">efd::EnumString&lt;T, first, last&gt;</a>&gt;* opt, std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    opt-&gt;mVal = args[0];</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#a0234842f6c0ee4fdcc086670c72d1da3">  149</a></span>&#160;<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a0234842f6c0ee4fdcc086670c72d1da3">efd::Opt&lt;T&gt;::Opt</a>(std::string name, std::string description, <span class="keywordtype">bool</span> isRequired) :</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a>(name, description, isRequired) {}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">  153</a></span>&#160;<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a0234842f6c0ee4fdcc086670c72d1da3">efd::Opt&lt;T&gt;::Opt</a>(std::string name, std::string description, T def, <span class="keywordtype">bool</span> isRequired) :</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a>(name, description, isRequired), mVal(def) {}</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">  157</a></span>&#160;<span class="keyword">const</span> T&amp; <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">efd::Opt&lt;T&gt;::getVal</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> mVal; }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#aa6e1798e38cf3df5d51a9cb03e2de507">  160</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#aa6e1798e38cf3df5d51a9cb03e2de507">efd::Opt&lt;T&gt;::parseImpl</a>(std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">ParseOptTrait&lt;T&gt;::Run</a>(<span class="keyword">this</span>, args);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#a756268a27710f30050f30b3b1fcf4d88">  165</a></span>&#160;std::vector&lt;std::string&gt; <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a756268a27710f30050f30b3b1fcf4d88">efd::Opt&lt;T&gt;::getPossibleValuesList</a>() {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d3/dac/structefd_1_1PossibleValuesListTrait.xhtml#a8726f2d5fb51b0ad88b097827a69c59c">PossibleValuesListTrait&lt;T&gt;::Get</a>();</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#a46275ed355d77e765883f6f1e9d5c0ca">  170</a></span>&#160;uint32_t <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a46275ed355d77e765883f6f1e9d5c0ca">efd::Opt&lt;T&gt;::argsConsumed</a>() { <span class="keywordflow">return</span> 1; }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#a5bcbb400700c773f4bba2af9f7478bf6">  173</a></span>&#160;std::string <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a5bcbb400700c773f4bba2af9f7478bf6">efd::Opt&lt;T&gt;::getStringVal</a>() { <span class="keywordflow">return</span> <a class="code" href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a>(mVal); }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="PossibleValuesListTrait_8h_xhtml"><div class="ttname"><a href="../../d1/d5e/PossibleValuesListTrait_8h.xhtml">PossibleValuesListTrait.h</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml_a756268a27710f30050f30b3b1fcf4d88"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml#a756268a27710f30050f30b3b1fcf4d88">efd::Opt::getPossibleValuesList</a></div><div class="ttdeci">std::vector&lt; std::string &gt; getPossibleValuesList() override</div><div class="ttdoc">Return list of possible values for this option. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00165">CommandLine.h:165</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml">efd::OptBase</a></div><div class="ttdoc">Base class for implementing command line options. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00015">CommandLine.h:15</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml_aa6e1798e38cf3df5d51a9cb03e2de507"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml#aa6e1798e38cf3df5d51a9cb03e2de507">efd::Opt::parseImpl</a></div><div class="ttdeci">void parseImpl(std::vector&lt; std::string &gt; args) override</div><div class="ttdoc">Type sensitive parsing of the arguments itself. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00160">CommandLine.h:160</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml_a0234842f6c0ee4fdcc086670c72d1da3"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml#a0234842f6c0ee4fdcc086670c72d1da3">efd::Opt::Opt</a></div><div class="ttdeci">Opt(std::string name, std::string description, bool isRequired=false)</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00149">CommandLine.h:149</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a750fc8118aa58f03a0b95922e2178e58"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a750fc8118aa58f03a0b95922e2178e58">efd::OptBase::OptBase</a></div><div class="ttdeci">OptBase(std::string name, std::string description, bool isRequired)</div><div class="ttdoc">Constructs and inserts itself in the command line options container. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00138">CommandLine.cpp:138</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml">efd::Opt</a></div><div class="ttdoc">Class used to declare the command line options available. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00012">CommandLine.h:12</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_af201e114d28cec5eb4588ee4ef287828"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#af201e114d28cec5eb4588ee4ef287828">efd::OptBase::getPossibleValuesList</a></div><div class="ttdeci">virtual std::vector&lt; std::string &gt; getPossibleValuesList()=0</div><div class="ttdoc">Return list of possible values for this option. </div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a62615588393d0a86d38c5d1d3b4c8f97"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a62615588393d0a86d38c5d1d3b4c8f97">efd::OptBase::parse</a></div><div class="ttdeci">void parse(std::vector&lt; std::string &gt; args)</div><div class="ttdoc">Calls the parseImpl function, which is type-dependent. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00157">CommandLine.cpp:157</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a36fb712beadd9a5429bc2d7121eb71af"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a36fb712beadd9a5429bc2d7121eb71af">efd::OptBase::argsConsumed</a></div><div class="ttdeci">virtual uint32_t argsConsumed()=0</div><div class="ttdoc">Type sensitive number of arguments consumed. </div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_ae271836d2366f5dc5ee502430df99c8a"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#ae271836d2366f5dc5ee502430df99c8a">efd::OptBase::isRequired</a></div><div class="ttdeci">bool isRequired()</div><div class="ttdoc">True if the option was constructed as &amp;#39;required&amp;#39;. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00153">CommandLine.cpp:153</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="../../d8/dcc/namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d62/EnumString_8h_source.xhtml#l00051">EnumString.h:51</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml_af670a67c3fd6e0c5cbea732b3749fb14"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">efd::Opt::getVal</a></div><div class="ttdeci">const T &amp; getVal() const</div><div class="ttdoc">Gets a const reference to the value of this command line option. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00157">CommandLine.h:157</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_ada7f795827eeb855da6d55839bd09f59"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#ada7f795827eeb855da6d55839bd09f59">efd::OptBase::~OptBase</a></div><div class="ttdeci">virtual ~OptBase()</div><div class="ttdoc">Destructs and removes itself from the command line options container. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00145">CommandLine.cpp:145</a></div></div>
<div class="ttc" id="structefd_1_1ParseOptTrait_xhtml_a8c34572b7a6479431d76a4ef9a595e48"><div class="ttname"><a href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">efd::ParseOptTrait::Run</a></div><div class="ttdeci">static void Run(Opt&lt; T &gt; *opt, std::vector&lt; std::string &gt; args)</div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00081">CommandLine.cpp:81</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a6bbed132b341f48d4aad4f970e3822bc"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a6bbed132b341f48d4aad4f970e3822bc">efd::ParseArguments</a></div><div class="ttdeci">void ParseArguments(const int argc, const char **argv)</div><div class="ttdoc">Parses the command line arguments (this function should be used in the main function). </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00233">CommandLine.cpp:233</a></div></div>
<div class="ttc" id="structefd_1_1PossibleValuesListTrait_xhtml_a8726f2d5fb51b0ad88b097827a69c59c"><div class="ttname"><a href="../../d3/dac/structefd_1_1PossibleValuesListTrait.xhtml#a8726f2d5fb51b0ad88b097827a69c59c">efd::PossibleValuesListTrait::Get</a></div><div class="ttdeci">static std::vector&lt; std::string &gt; Get()</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d5e/PossibleValuesListTrait_8h_source.xhtml#l00009">PossibleValuesListTrait.h:9</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml_a46275ed355d77e765883f6f1e9d5c0ca"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml#a46275ed355d77e765883f6f1e9d5c0ca">efd::Opt::argsConsumed</a></div><div class="ttdeci">uint32_t argsConsumed() override</div><div class="ttdoc">Type sensitive number of arguments consumed. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00170">CommandLine.h:170</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a3ab6f82f2df49bbde5c943bbe60c3cf3a98bd1c45684cf587ac2347a92dd7bb51"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a3ab6f82f2df49bbde5c943bbe60c3cf3a98bd1c45684cf587ac2347a92dd7bb51">efd::Allocator::last</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a78c038f9edc737659541e5cf4f2249ea"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a78c038f9edc737659541e5cf4f2249ea">efd::OptBase::parseImpl</a></div><div class="ttdeci">virtual void parseImpl(std::vector&lt; std::string &gt; args)=0</div><div class="ttdoc">Type sensitive parsing of the arguments itself. </div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a6218f4c7e970dff321d844b542e45189"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a6218f4c7e970dff321d844b542e45189">efd::OptBase::mName</a></div><div class="ttdeci">std::string mName</div><div class="ttdoc">Command line string that represents the option. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00028">CommandLine.h:28</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a0ab870ed13c778499c0b53b3b617f34d"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a0ab870ed13c778499c0b53b3b617f34d">efd::OptBase::isParsed</a></div><div class="ttdeci">bool isParsed()</div><div class="ttdoc">True if this option has already been parsed. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00149">CommandLine.cpp:149</a></div></div>
<div class="ttc" id="classefd_1_1EnumString_xhtml"><div class="ttname"><a href="../../dc/d5d/classefd_1_1EnumString.xhtml">efd::EnumString</a></div><div class="ttdoc">Enum wrapper class. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d62/EnumString_8h_source.xhtml#l00016">EnumString.h:16</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a3cafab5049227ffbd3089d004e689ffb"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a3cafab5049227ffbd3089d004e689ffb">efd::OptBase::getStringVal</a></div><div class="ttdeci">virtual std::string getStringVal()=0</div><div class="ttdoc">Return the value in a string representation. </div></div>
<div class="ttc" id="namespaceefd_xhtml_a3ab6f82f2df49bbde5c943bbe60c3cf3a8b04d5e3775d298e78455efc5ca404d5"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a3ab6f82f2df49bbde5c943bbe60c3cf3a8b04d5e3775d298e78455efc5ca404d5">efd::Allocator::first</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a76fb98cd4a35566d53c2f0513c5d12d1"><div class="ttname"><a href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a></div><div class="ttdeci">string to_string(efd::EnumString&lt; T, first, last &gt; &amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d62/EnumString_8h_source.xhtml#l00053">EnumString.h:53</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml_a5bcbb400700c773f4bba2af9f7478bf6"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml#a5bcbb400700c773f4bba2af9f7478bf6">efd::Opt::getStringVal</a></div><div class="ttdeci">std::string getStringVal() override</div><div class="ttdoc">Return the value in a string representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00173">CommandLine.h:173</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a76929386279b8c53893a9ba2881d782e"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a76929386279b8c53893a9ba2881d782e">efd::OptBase::mDescription</a></div><div class="ttdeci">std::string mDescription</div><div class="ttdoc">Description of the command line option. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00030">CommandLine.h:30</a></div></div>
<div class="ttc" id="structefd_1_1ParseOptTrait_xhtml"><div class="ttname"><a href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">efd::ParseOptTrait</a></div><div class="ttdoc">Parses the arguments in args to opt. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00058">CommandLine.h:58</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:34 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
