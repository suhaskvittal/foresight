<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Support/ExpTSFinder.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_f0dc79bace318df7ec0fa0bdb179ed95.xhtml">Support</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ExpTSFinder.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d9/d47/ExpTSFinder_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../de/d31/ExpTSFinder_8h.xhtml">enfield/Support/ExpTSFinder.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/d73/Defs_8h.xhtml">enfield/Support/Defs.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keywordtype">void</span> efd::ExpTSFinder::genAllAssigns(uint32_t n) {</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">efd::InverseMap</a> inv(n, 0);</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; n; ++i) inv[i] = i;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    <a class="code" href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml#a8d2b03e37f848cb9170f7b102e3538f7">mInverseMaps</a>.clear();</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <span class="keywordflow">do</span> {</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;        <a class="code" href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml#a8d2b03e37f848cb9170f7b102e3538f7">mInverseMaps</a>.push_back(inv);</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    } <span class="keywordflow">while</span> (std::next_permutation(inv.begin(), inv.end()));</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;}</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;uint32_t efd::ExpTSFinder::getTargetId(<span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a>&amp; source,</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a>&amp; target) {</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordflow">if</span> (source.size() != target.size()) {</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;The assignment map must be of same size: `&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;            &lt;&lt; source.size() &lt;&lt; <span class="stringliteral">&quot;` and `&quot;</span> &lt;&lt; target.size() &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    }</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordtype">int</span> size = source.size();</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a> translator(size, 0);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a> realtgt(size, 0);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        translator[source[i]] = i;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    }</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size; ++i) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        realtgt[i] = translator[target[i]];</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> mMapId[realtgt];</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">// Pre-process the architechture graph, calculating the optimal swaps from every</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// permutation.</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keywordtype">void</span> efd::ExpTSFinder::preprocess() {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    uint32_t size = mG-&gt;size();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    genAllAssigns(size);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    mMapId.clear();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = mInverseMaps.size(); i &lt; e; ++i) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        mMapId.insert(std::make_pair(mInverseMaps[i], i));</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    std::vector&lt;bool&gt; inserted(mInverseMaps.size(), <span class="keyword">false</span>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    mSwaps.assign(mInverseMaps.size(), <a class="code" href="../../d4/deb/namespaceefd.xhtml#a8c6eb9e95f5fad95ab54779a502ea54f">SwapSeq</a>());</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::vector&lt;uint32_t&gt; cur;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    std::queue&lt;uint32_t&gt; q;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// Initial permutation [0, 1, 2, 3, 4]</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    q.push(0);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    inserted[0] = <span class="keyword">true</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">while</span> (!q.empty()) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">auto</span> aId = q.front();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        q.pop();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">auto</span> cur = mInverseMaps[aId];</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">for</span> (uint32_t u = 0; u &lt; size; ++u) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">for</span> (uint32_t v : mG-&gt;adj(u)) {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="keyword">auto</span> copy = cur;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                std::swap(copy[u], copy[v]);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keywordtype">int</span> cId = mMapId[copy];</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keywordflow">if</span> (!inserted[cId]) {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                    inserted[cId] = <span class="keyword">true</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    mSwaps[cId] = mSwaps[aId];</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    mSwaps[cId].push_back(Swap { u, v });</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    q.push(cId);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<a class="code" href="../../d4/deb/namespaceefd.xhtml#a8c6eb9e95f5fad95ab54779a502ea54f">efd::SwapSeq</a> efd::ExpTSFinder::findImpl(<span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a>&amp; from, <span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a>&amp; to) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> mSwaps[getTargetId(from, to)];</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml#a4ee3d033ab19b28e52840547aa7ffec2">   89</a></span>&#160;<a class="code" href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml#a2dffb10439cbd4d431fa68fe09ade077">efd::ExpTSFinder::uRef</a> <a class="code" href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml#a4ee3d033ab19b28e52840547aa7ffec2">efd::ExpTSFinder::Create</a>() {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml#a2dffb10439cbd4d431fa68fe09ade077">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml">ExpTSFinder</a>());</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div><div class="ttc" id="namespaceefd_xhtml_a8c6eb9e95f5fad95ab54779a502ea54f"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a8c6eb9e95f5fad95ab54779a502ea54f">efd::SwapSeq</a></div><div class="ttdeci">std::vector&lt; Swap &gt; SwapSeq</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00023">Defs.h:23</a></div></div>
<div class="ttc" id="classefd_1_1ExpTSFinder_xhtml_a2dffb10439cbd4d431fa68fe09ade077"><div class="ttname"><a href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml#a2dffb10439cbd4d431fa68fe09ade077">efd::ExpTSFinder::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; ExpTSFinder &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../de/d31/ExpTSFinder_8h_source.xhtml#l00019">ExpTSFinder.h:19</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="classefd_1_1ExpTSFinder_xhtml_a4ee3d033ab19b28e52840547aa7ffec2"><div class="ttname"><a href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml#a4ee3d033ab19b28e52840547aa7ffec2">efd::ExpTSFinder::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdoc">Creates an instance of this class. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d47/ExpTSFinder_8cpp_source.xhtml#l00089">ExpTSFinder.cpp:89</a></div></div>
<div class="ttc" id="classefd_1_1ExpTSFinder_xhtml"><div class="ttname"><a href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml">efd::ExpTSFinder</a></div><div class="ttdoc">Brute force solution to the Token Swap Finder. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/d31/ExpTSFinder_8h_source.xhtml#l00017">ExpTSFinder.h:17</a></div></div>
<div class="ttc" id="ExpTSFinder_8h_xhtml"><div class="ttname"><a href="../../de/d31/ExpTSFinder_8h.xhtml">ExpTSFinder.h</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a1f91f26f141eb5b2dd549121451a786c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">efd::InverseMap</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; InverseMap</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00012">Defs.h:12</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">efd::ExitCode::EXIT_unreachable</a></div></div>
<div class="ttc" id="classefd_1_1ExpTSFinder_xhtml_a8d2b03e37f848cb9170f7b102e3538f7"><div class="ttname"><a href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml#a8d2b03e37f848cb9170f7b102e3538f7">efd::ExpTSFinder::mInverseMaps</a></div><div class="ttdeci">std::vector&lt; InverseMap &gt; mInverseMaps</div><div class="ttdef"><b>Definition:</b> <a href="../../de/d31/ExpTSFinder_8h_source.xhtml#l00032">ExpTSFinder.h:32</a></div></div>
<div class="ttc" id="Defs_8h_xhtml"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml">Defs.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
