<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Support/CommandLine.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_f0dc79bace318df7ec0fa0bdb179ed95.xhtml">Support</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">CommandLine.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../df/dd1/CommandLine_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/d41/CommandLine_8h.xhtml">enfield/Support/CommandLine.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/d73/Defs_8h.xhtml">enfield/Support/Defs.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">using namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a> {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml">   18</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml">ArgsParser</a> {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#afb90be52374f01dc75694ed320dd93ec">   20</a></span>&#160;            std::map&lt;std::string, std::vector&lt;OptBase*&gt; &gt; <a class="code" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#afb90be52374f01dc75694ed320dd93ec">mArgMap</a>;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#a68a6e97d3145586d583a03403e36dcd5">   22</a></span>&#160;            <a class="code" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#a68a6e97d3145586d583a03403e36dcd5">ArgsParser</a>() {}</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#a5e4e228dd275d0b5c1eca330f71e0c0b">hasOpt</a>(<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a>* opt);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#a08d6365cce0b0211508ab0f2b28aab65">addOpt</a>(<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a>* opt);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#ab6f5326548208fc577be9c14a9f2d5b6">delOpt</a>(<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a>* opt);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    };</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;};</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#a5e4e228dd275d0b5c1eca330f71e0c0b">   31</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#a5e4e228dd275d0b5c1eca330f71e0c0b">efd::ArgsParser::hasOpt</a>(<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a>* opt) {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">return</span> mArgMap.find(opt-&gt;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a6218f4c7e970dff321d844b542e45189">mName</a>) != mArgMap.end();</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#a08d6365cce0b0211508ab0f2b28aab65">   35</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#a08d6365cce0b0211508ab0f2b28aab65">efd::ArgsParser::addOpt</a>(<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a>* opt) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    std::string name(opt-&gt;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a6218f4c7e970dff321d844b542e45189">mName</a>);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">if</span> (!hasOpt(opt)) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        mArgMap.insert(std::make_pair(name, std::vector&lt;OptBase*&gt;()));</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    mArgMap[name].push_back(opt);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#ab6f5326548208fc577be9c14a9f2d5b6">   45</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#ab6f5326548208fc577be9c14a9f2d5b6">efd::ArgsParser::delOpt</a>(<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a>* opt) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">if</span> (hasOpt(opt)) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        std::vector&lt;OptBase*&gt; &amp;optVector = mArgMap[opt-&gt;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a6218f4c7e970dff321d844b542e45189">mName</a>];</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">if</span> (optVector.size() == 1)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            mArgMap.erase(mArgMap.find(opt-&gt;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a6218f4c7e970dff321d844b542e45189">mName</a>));</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = optVector.begin(), e = optVector.end(); it != e; ++it)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                <span class="keywordflow">if</span> (opt == *it) {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                    optVector.erase(it);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">static</span> <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">efd::Opt&lt;bool&gt;</a> PrintHelp</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;(<span class="stringliteral">&quot;help&quot;</span>, <span class="stringliteral">&quot;Prints a list with the available commands.&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">static</span> std::shared_ptr&lt;ArgsParser&gt; GetParser() {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">static</span> std::shared_ptr&lt;ArgsParser&gt; Parser(<span class="keyword">new</span> <a class="code" href="../../d8/d9c/classefd_1_1ArgsParser.xhtml">ArgsParser</a>());</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> Parser;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">efd::ParseOptTrait&lt;bool&gt;::</a></div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="../../d8/db7/structefd_1_1ParseOptTrait_3_01bool_01_4.xhtml#a5e334927d71f1752d0e26eb5fba0cb2b">   71</a></span>&#160;<a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;bool&gt;</a>* opt, std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    opt-&gt;mVal = !opt-&gt;mVal;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">efd::ParseOptTrait&lt;int&gt;::</a></div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="../../d6/df3/structefd_1_1ParseOptTrait_3_01int_01_4.xhtml#a803d6a3acb686fca5ec0bd99368ad51a">   76</a></span>&#160;<a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;int&gt;</a>* opt, std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    opt-&gt;mVal = std::stoi(args[0]);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">efd::ParseOptTrait&lt;uint32_t&gt;::</a></div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">   81</a></span>&#160;<a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;uint32_t&gt;</a>* opt, std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    opt-&gt;mVal = std::stoul(args[0]);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">efd::ParseOptTrait&lt;long long&gt;::</a></div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="../../da/d77/structefd_1_1ParseOptTrait_3_01long_01long_01_4.xhtml#aa829b114b9d411c24cb765c0dafdef6a">   86</a></span>&#160;<a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;long long&gt;</a>* opt, std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    opt-&gt;mVal = std::stoll(args[0]);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">efd::ParseOptTrait&lt;unsigned long long&gt;::</a></div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="../../db/da0/structefd_1_1ParseOptTrait_3_01unsigned_01long_01long_01_4.xhtml#abb1ed48b691efdb64c5a026e3b14bb8d">   91</a></span>&#160;<a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;unsigned long long&gt;</a>* opt, std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    opt-&gt;mVal = std::stoull(args[0]);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">efd::ParseOptTrait&lt;float&gt;::</a></div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="../../db/da9/structefd_1_1ParseOptTrait_3_01float_01_4.xhtml#a31e3215883287a7039741c741cf5b750">   96</a></span>&#160;<a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;float&gt;</a>* opt, std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    opt-&gt;mVal = std::stof(args[0]);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">efd::ParseOptTrait&lt;double&gt;::</a></div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="../../d7/dda/structefd_1_1ParseOptTrait_3_01double_01_4.xhtml#a96aa02b5411d8125e8c7f2b172514866">  101</a></span>&#160;<a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;double&gt;</a>* opt, std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    opt-&gt;mVal = std::stod(args[0]);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">efd::ParseOptTrait&lt;std::string&gt;::</a></div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="../../d9/d9d/structefd_1_1ParseOptTrait_3_01std_1_1string_01_4.xhtml#a4bb91df59176ff1fa8ee758ae4211197">  106</a></span>&#160;<a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">Run</a>(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;std::string&gt;</a>* opt, std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    opt-&gt;mVal = args[0];</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">efd::ParseOptTrait&lt;std::vector&lt;std::string&gt;</a>&gt;::</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="../../d4/dbd/structefd_1_1ParseOptTrait_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.xhtml#aa72d1c84ca2ce759de84c5165a82da92">  111</a></span>&#160;Run(<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt</a>&lt;std::vector&lt;std::string&gt;&gt;* opt, std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    opt-&gt;mVal.push_back(args[0]);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#aa5923cf565e73f65280e0270e2c70c4b">  116</a></span>&#160;uint32_t <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a46275ed355d77e765883f6f1e9d5c0ca">efd::Opt&lt;bool&gt;::argsConsumed</a>() {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#a160309073899a3c149ba3e76693aa7c9">  121</a></span>&#160;std::string <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a5bcbb400700c773f4bba2af9f7478bf6">efd::Opt&lt;bool&gt;::getStringVal</a>() {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> (mVal) <span class="keywordflow">return</span> <span class="stringliteral">&quot;true&quot;</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">return</span> <span class="stringliteral">&quot;false&quot;</span>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#a49286fb114de87f08852daccbea09806">  127</a></span>&#160;std::string <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a5bcbb400700c773f4bba2af9f7478bf6">efd::Opt&lt;std::string&gt;::getStringVal</a>() {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> mVal;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="../../de/d50/classefd_1_1Opt.xhtml#a12c70fa89b6dcf3bca56d65aea36c31c">  132</a></span>&#160;std::string <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">efd::Opt&lt;std::vector&lt;std::string&gt;</a>&gt;::getStringVal() {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    std::string str;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> s : mVal) str += s + <span class="stringliteral">&quot;; &quot;</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> str;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="../../d6/d25/classefd_1_1OptBase.xhtml#a750fc8118aa58f03a0b95922e2178e58">  138</a></span>&#160;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a750fc8118aa58f03a0b95922e2178e58">efd::OptBase::OptBase</a>(std::string name, std::string description, <span class="keywordtype">bool</span> isRequired) : </div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    mIsRequired(isRequired), mIsParsed(false), mName(name), mDescription(description) {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    mParser = GetParser();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    mParser-&gt;addOpt(<span class="keyword">this</span>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="../../d6/d25/classefd_1_1OptBase.xhtml#ada7f795827eeb855da6d55839bd09f59">  145</a></span>&#160;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#ada7f795827eeb855da6d55839bd09f59">efd::OptBase::~OptBase</a>() {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    mParser-&gt;delOpt(<span class="keyword">this</span>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="../../d6/d25/classefd_1_1OptBase.xhtml#a0ab870ed13c778499c0b53b3b617f34d">  149</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a0ab870ed13c778499c0b53b3b617f34d">efd::OptBase::isParsed</a>() {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> mIsParsed;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="../../d6/d25/classefd_1_1OptBase.xhtml#ae271836d2366f5dc5ee502430df99c8a">  153</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#ae271836d2366f5dc5ee502430df99c8a">efd::OptBase::isRequired</a>() {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">return</span> mIsRequired;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="../../d6/d25/classefd_1_1OptBase.xhtml#a62615588393d0a86d38c5d1d3b4c8f97">  157</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a62615588393d0a86d38c5d1d3b4c8f97">efd::OptBase::parse</a>(std::vector&lt;std::string&gt; args) {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    parseImpl(args);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    mIsParsed = <span class="keyword">true</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> PrintOption(<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a>* ptr, <span class="keywordtype">bool</span> printDefault = <span class="keyword">true</span>) {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> nCols = 20;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; std::left &lt;&lt; std::setw(nCols) &lt;&lt; <span class="stringliteral">&quot;-&quot;</span> + ptr-&gt;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a6218f4c7e970dff321d844b542e45189">mName</a>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    std::cout &lt;&lt; ptr-&gt;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a76929386279b8c53893a9ba2881d782e">mDescription</a> &lt;&lt; std::endl;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">auto</span> possibleValues = ptr-&gt;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#af201e114d28cec5eb4588ee4ef287828">getPossibleValuesList</a>();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span> (!possibleValues.empty()) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; std::left &lt;&lt; std::setw(nCols) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <span class="stringliteral">&quot;Possible: [&quot;</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0, e = possibleValues.size(); i &lt; e; ++i) {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            std::cout &lt;&lt; possibleValues[i];</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordflow">if</span> (i &lt; e - 1) std::cout &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;]&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">if</span> (printDefault) {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; std::left &lt;&lt; std::setw(nCols) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="stringliteral">&quot;Default: &quot;</span> &lt;&lt; ptr-&gt;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a3cafab5049227ffbd3089d004e689ffb">getStringVal</a>() &lt;&lt; std::endl;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> PrintCommandLineHelp() {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    std::shared_ptr&lt;ArgsParser&gt; Parser = GetParser();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;Usage:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\t$ efd &lt;required&gt; [Options]&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    std::cout &lt;&lt; std::endl;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;Examples:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\tCompiles the file &#39;test.qasm&#39; using &#39;Q_dynprog&#39; and &#39;A_ibmqx2&#39; &quot;</span>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;(default values)&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\t$ efd -i test.qasm&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::cout &lt;&lt; std::endl;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\tCompiles the file &#39;test.qasm&#39; using &#39;Q_wpm&#39; and &#39;A_ibmqx3&#39;.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\tIn the end, it shows some statistical data.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\t$ efd -i test.qasm -alloc Q_wpm -arch A_ibmqx3 -stats&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    std::cout &lt;&lt; std::endl;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\tCompiles the file &#39;test.qasm&#39; using &#39;Q_wpm&#39; and a custom&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\tarchitecture specified in &#39;folder/arch&#39;. In the end, it shows some &quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\tstatistical data.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\t$ efd -i test.qasm -alloc Q_wpm -arch-file folder/arch -stats&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    std::cout &lt;&lt; std::endl;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;Required:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair : Parser-&gt;mArgMap) {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">if</span> (pair.second[0]-&gt;isRequired()) {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            PrintOption(pair.second[0], <span class="keyword">false</span>);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    std::cout &lt;&lt; std::endl;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;Options:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair : Parser-&gt;mArgMap) {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">if</span> (!pair.second[0]-&gt;isRequired()) {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            PrintOption(pair.second[0]);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;}</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="../../d4/deb/namespaceefd.xhtml#a9701f22b92e06bad8f57614d98e5aa81">  227</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a6bbed132b341f48d4aad4f970e3822bc">efd::ParseArguments</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv) {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> cArgc = argc;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>** cArgv = (<span class="keyword">const</span> <span class="keywordtype">char</span>**) argv;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a6bbed132b341f48d4aad4f970e3822bc">efd::ParseArguments</a>(cArgc, cArgv);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="../../d4/deb/namespaceefd.xhtml#a6bbed132b341f48d4aad4f970e3822bc">  233</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a6bbed132b341f48d4aad4f970e3822bc">efd::ParseArguments</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> argc, <span class="keyword">const</span> <span class="keywordtype">char</span> **argv) {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    std::shared_ptr&lt;ArgsParser&gt; Parser = GetParser();</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    std::vector&lt;std::string&gt; rawArgs;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">for</span> (int32_t i = 0; i &lt; argc; ++i)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        rawArgs.push_back(argv[i]);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">for</span> (int32_t i = 1; i &lt; argc; ++i) {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        std::string arg(rawArgs[i]);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="comment">// Removing the initial &#39;-&#39;</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">if</span> (arg[0] == <span class="charliteral">&#39;-&#39;</span>) {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            arg = arg.substr(1);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">if</span> (Parser-&gt;mArgMap.find(arg) != Parser-&gt;mArgMap.end()) {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            std::vector&lt;OptBase*&gt;&amp; optVector = Parser-&gt;mArgMap[arg];</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            int32_t toBeConsumed = optVector[0]-&gt;argsConsumed();</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="keywordflow">if</span> (i + toBeConsumed &gt;= argc) {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;There should be &quot;</span> &lt;&lt; toBeConsumed &lt;&lt; <span class="stringliteral">&quot; arguments for -&quot;</span> &lt;&lt; arg</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    &lt;&lt; <span class="stringliteral">&quot;, but there was only &quot;</span> &lt;&lt; argc - i &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            std::vector&lt;std::string&gt; optArgs;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordflow">for</span> (int32_t j = 0; j &lt; toBeConsumed; ++j) {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                optArgs.push_back(rawArgs[i + 1 + j]);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">for</span> (<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a> *opt : optVector) {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                opt-&gt;parse(optArgs);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            i += toBeConsumed;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a9423380a92639b296ea0a984ea7e1c6b">WAR</a> &lt;&lt; <span class="stringliteral">&quot;CommandLine argument &#39;&quot;</span> &lt;&lt; arg &lt;&lt; <span class="stringliteral">&quot;&#39; not used!&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordtype">bool</span> requirementsFulfilled = <span class="keyword">true</span>;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair : Parser-&gt;mArgMap) {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml">OptBase</a> *opt = pair.second[0];</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">if</span> (opt-&gt;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#ae271836d2366f5dc5ee502430df99c8a">isRequired</a>() &amp;&amp; !opt-&gt;<a class="code" href="../../d6/d25/classefd_1_1OptBase.xhtml#a0ab870ed13c778499c0b53b3b617f34d">isParsed</a>()) {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            requirementsFulfilled = <span class="keyword">false</span>;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">if</span> (PrintHelp.getVal() || !requirementsFulfilled) {</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        PrintCommandLineHelp();</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        exit(0);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div><div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="classefd_1_1ArgsParser_xhtml_a68a6e97d3145586d583a03403e36dcd5"><div class="ttname"><a href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#a68a6e97d3145586d583a03403e36dcd5">efd::ArgsParser::ArgsParser</a></div><div class="ttdeci">ArgsParser()</div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00022">CommandLine.cpp:22</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml">efd::OptBase</a></div><div class="ttdoc">Base class for implementing command line options. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00015">CommandLine.h:15</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a750fc8118aa58f03a0b95922e2178e58"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a750fc8118aa58f03a0b95922e2178e58">efd::OptBase::OptBase</a></div><div class="ttdeci">OptBase(std::string name, std::string description, bool isRequired)</div><div class="ttdoc">Constructs and inserts itself in the command line options container. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00138">CommandLine.cpp:138</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml">efd::Opt</a></div><div class="ttdoc">Class used to declare the command line options available. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00012">CommandLine.h:12</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_af201e114d28cec5eb4588ee4ef287828"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#af201e114d28cec5eb4588ee4ef287828">efd::OptBase::getPossibleValuesList</a></div><div class="ttdeci">virtual std::vector&lt; std::string &gt; getPossibleValuesList()=0</div><div class="ttdoc">Return list of possible values for this option. </div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a62615588393d0a86d38c5d1d3b4c8f97"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a62615588393d0a86d38c5d1d3b4c8f97">efd::OptBase::parse</a></div><div class="ttdeci">void parse(std::vector&lt; std::string &gt; args)</div><div class="ttdoc">Calls the parseImpl function, which is type-dependent. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00157">CommandLine.cpp:157</a></div></div>
<div class="ttc" id="classefd_1_1ArgsParser_xhtml_ab6f5326548208fc577be9c14a9f2d5b6"><div class="ttname"><a href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#ab6f5326548208fc577be9c14a9f2d5b6">efd::ArgsParser::delOpt</a></div><div class="ttdeci">void delOpt(OptBase *opt)</div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00045">CommandLine.cpp:45</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_ae271836d2366f5dc5ee502430df99c8a"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#ae271836d2366f5dc5ee502430df99c8a">efd::OptBase::isRequired</a></div><div class="ttdeci">bool isRequired()</div><div class="ttdoc">True if the option was constructed as &amp;#39;required&amp;#39;. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00153">CommandLine.cpp:153</a></div></div>
<div class="ttc" id="CommandLine_8h_xhtml"><div class="ttname"><a href="../../d9/d41/CommandLine_8h.xhtml">CommandLine.h</a></div></div>
<div class="ttc" id="classefd_1_1ArgsParser_xhtml"><div class="ttname"><a href="../../d8/d9c/classefd_1_1ArgsParser.xhtml">efd::ArgsParser</a></div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00018">CommandLine.cpp:18</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_ada7f795827eeb855da6d55839bd09f59"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#ada7f795827eeb855da6d55839bd09f59">efd::OptBase::~OptBase</a></div><div class="ttdeci">virtual ~OptBase()</div><div class="ttdoc">Destructs and removes itself from the command line options container. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00145">CommandLine.cpp:145</a></div></div>
<div class="ttc" id="structefd_1_1ParseOptTrait_xhtml_a8c34572b7a6479431d76a4ef9a595e48"><div class="ttname"><a href="../../db/df8/structefd_1_1ParseOptTrait.xhtml#a8c34572b7a6479431d76a4ef9a595e48">efd::ParseOptTrait::Run</a></div><div class="ttdeci">static void Run(Opt&lt; T &gt; *opt, std::vector&lt; std::string &gt; args)</div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00081">CommandLine.cpp:81</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a6bbed132b341f48d4aad4f970e3822bc"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a6bbed132b341f48d4aad4f970e3822bc">efd::ParseArguments</a></div><div class="ttdeci">void ParseArguments(const int argc, const char **argv)</div><div class="ttdoc">Parses the command line arguments (this function should be used in the main function). </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00233">CommandLine.cpp:233</a></div></div>
<div class="ttc" id="classefd_1_1ArgsParser_xhtml_afb90be52374f01dc75694ed320dd93ec"><div class="ttname"><a href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#afb90be52374f01dc75694ed320dd93ec">efd::ArgsParser::mArgMap</a></div><div class="ttdeci">std::map&lt; std::string, std::vector&lt; OptBase * &gt; &gt; mArgMap</div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00020">CommandLine.cpp:20</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a9423380a92639b296ea0a984ea7e1c6b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a9423380a92639b296ea0a984ea7e1c6b">WAR</a></div><div class="ttdeci">#define WAR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00047">Defs.h:47</a></div></div>
<div class="ttc" id="classefd_1_1ArgsParser_xhtml_a5e4e228dd275d0b5c1eca330f71e0c0b"><div class="ttname"><a href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#a5e4e228dd275d0b5c1eca330f71e0c0b">efd::ArgsParser::hasOpt</a></div><div class="ttdeci">bool hasOpt(OptBase *opt)</div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00031">CommandLine.cpp:31</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml_a46275ed355d77e765883f6f1e9d5c0ca"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml#a46275ed355d77e765883f6f1e9d5c0ca">efd::Opt::argsConsumed</a></div><div class="ttdeci">uint32_t argsConsumed() override</div><div class="ttdoc">Type sensitive number of arguments consumed. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00170">CommandLine.h:170</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a6218f4c7e970dff321d844b542e45189"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a6218f4c7e970dff321d844b542e45189">efd::OptBase::mName</a></div><div class="ttdeci">std::string mName</div><div class="ttdoc">Command line string that represents the option. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00028">CommandLine.h:28</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a0ab870ed13c778499c0b53b3b617f34d"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a0ab870ed13c778499c0b53b3b617f34d">efd::OptBase::isParsed</a></div><div class="ttdeci">bool isParsed()</div><div class="ttdoc">True if this option has already been parsed. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00149">CommandLine.cpp:149</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a3cafab5049227ffbd3089d004e689ffb"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a3cafab5049227ffbd3089d004e689ffb">efd::OptBase::getStringVal</a></div><div class="ttdeci">virtual std::string getStringVal()=0</div><div class="ttdoc">Return the value in a string representation. </div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">efd::ExitCode::EXIT_unreachable</a></div></div>
<div class="ttc" id="classefd_1_1ArgsParser_xhtml_a08d6365cce0b0211508ab0f2b28aab65"><div class="ttname"><a href="../../d8/d9c/classefd_1_1ArgsParser.xhtml#a08d6365cce0b0211508ab0f2b28aab65">efd::ArgsParser::addOpt</a></div><div class="ttdeci">void addOpt(OptBase *opt)</div><div class="ttdef"><b>Definition:</b> <a href="../../df/dd1/CommandLine_8cpp_source.xhtml#l00035">CommandLine.cpp:35</a></div></div>
<div class="ttc" id="Defs_8h_xhtml"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml">Defs.h</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml_a5bcbb400700c773f4bba2af9f7478bf6"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml#a5bcbb400700c773f4bba2af9f7478bf6">efd::Opt::getStringVal</a></div><div class="ttdeci">std::string getStringVal() override</div><div class="ttdoc">Return the value in a string representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00173">CommandLine.h:173</a></div></div>
<div class="ttc" id="classefd_1_1OptBase_xhtml_a76929386279b8c53893a9ba2881d782e"><div class="ttname"><a href="../../d6/d25/classefd_1_1OptBase.xhtml#a76929386279b8c53893a9ba2881d782e">efd::OptBase::mDescription</a></div><div class="ttdeci">std::string mDescription</div><div class="ttdoc">Description of the command line option. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00030">CommandLine.h:30</a></div></div>
<div class="ttc" id="structefd_1_1ParseOptTrait_xhtml"><div class="ttname"><a href="../../db/df8/structefd_1_1ParseOptTrait.xhtml">efd::ParseOptTrait</a></div><div class="ttdoc">Parses the arguments in args to opt. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00058">CommandLine.h:58</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
