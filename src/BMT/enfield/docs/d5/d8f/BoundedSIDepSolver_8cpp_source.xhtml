<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/Allocators/BoundedSIDepSolver.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li><li class="navelem"><a class="el" href="../../dir_06974191db7fbe66527a95ceac77ccfb.xhtml">Allocators</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">BoundedSIDepSolver.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d5/d8f/BoundedSIDepSolver_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&quot;enfield/Transform/Allocators/BoundedSIDepSolver.h&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&quot;enfield/Support/ApproxTSFinder.h&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&quot;enfield/Support/CommandLine.h&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&quot;enfield/Support/Defs.h&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&quot;enfield/Support/Timer.h&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&lt;</span><span class="preprocessor">cstdlib</span><span class="preprocessor">&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&lt;</span><span class="preprocessor">algorithm</span><span class="preprocessor">&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&lt;</span><span class="preprocessor">queue</span><span class="preprocessor">&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#</span><span class="preprocessor">include</span> <span class="preprocessor">&lt;</span><span class="preprocessor">stack</span><span class="preprocessor">&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">using</span> <span class="keyword">namespace</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">static</span> Opt&lt;uint32_t&gt; MaxChildren</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">(</a><span class="stringliteral">&quot;-bsi-max-children&quot;</span><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">,</a> <span class="stringliteral">&quot;Limits the max number of children per partial solution.&quot;</span><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">,</a></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::numeric_limits&lt;uint32_t&gt;::max()<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">,</a> <span class="keyword">false</span><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">)</a>;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">static</span> Opt&lt;uint32_t&gt; MaxPartialSolutions</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">(</a><span class="stringliteral">&quot;-bsi-max-partial&quot;</span><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">,</a> <span class="stringliteral">&quot;Limits the max number of partial solutions per step.&quot;</span><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">,</a></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::numeric_limits&lt;uint32_t&gt;::max()<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">,</a> <span class="keyword">false</span><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">)</a>;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="../../db/dec/namespacebsi.xhtml">   22</a></span>&#160;<span class="keyword">namespace</span> <a class="code" href="../../db/dec/namespacebsi.xhtml">bsi</a> {</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml">   23</a></span>&#160;    <span class="keyword">struct</span> <a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml">TracebackInfo</a> {</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">   24</a></span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> <a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>;</div><div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#ad3a026cdafdf83a6e2b1686d9200cbb5">   25</a></span>&#160;        uint32_t <a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#ad3a026cdafdf83a6e2b1686d9200cbb5">parent</a>;</div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a4610e8717110917976951e397e0c8e1d">   26</a></span>&#160;        uint32_t <a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a4610e8717110917976951e397e0c8e1d">cost</a>;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    };</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;}</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">static</span> <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;uint32_t&gt; CalculateDistance(uint32_t u, <a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>::<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml">ArchGraph</a>::<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#acd67239985686893469219a4f07554ad">Ref</a> graph) {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    uint32_t size = graph<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">-&gt;</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">size</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">(</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">)</a>;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;uint32_t&gt; distance(size, _undef);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::queue&lt;uint32_t&gt; q;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<span class="keywordtype">bool</span>&gt; visited(size, <span class="keyword">false</span>);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    q.push(u);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    visited[u] = <span class="keyword">true</span>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    distance[u] = 0;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">while</span> (!q.empty()) {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        uint32_t u = q.front();</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        q.pop();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">for</span> (uint32_t v : graph<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">-&gt;</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">adj</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">(</a>u<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">)</a>) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordflow">if</span> (!visited[v]) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                visited[v] = <span class="keyword">true</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                distance[v] = distance[u] + 1;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                q.push(v);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> distance;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a088f3bbc3e2602a296cd214f06202520">   56</a></span>&#160;<a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml">BoundedSIDepSolver</a>::<a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a088f3bbc3e2602a296cd214f06202520">BoundedSIDepSolver</a>(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml">ArchGraph</a>::<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">sRef</a> archGraph)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    : <a class="code" href="../../da/d6e/classefd_1_1DepSolverQAllocator.xhtml">DepSolverQAllocator</a><a class="code" href="../../da/d6e/classefd_1_1DepSolverQAllocator.xhtml#a4ab0f7fa706eec4610c520607831092f">(</a>archGraph<a class="code" href="../../da/d6e/classefd_1_1DepSolverQAllocator.xhtml#a4ab0f7fa706eec4610c520607831092f">)</a> {}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a04ffd71ce2fe66a349b1ceac78e9f3e8">   59</a></span>&#160;<a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml">BoundedSIDepSolver</a>::<a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a5cd0ecfe9415c88771b30ae2a0b88364">uRef</a> <a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml">BoundedSIDepSolver</a>::<a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a04ffd71ce2fe66a349b1ceac78e9f3e8">Create</a>(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml">ArchGraph</a>::<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">sRef</a> archGraph) {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a5cd0ecfe9415c88771b30ae2a0b88364">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml">BoundedSIDepSolver</a><a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a088f3bbc3e2602a296cd214f06202520">(</a>archGraph<a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a088f3bbc3e2602a296cd214f06202520">)</a>);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a0e0c689d281fd47ff601f6279a8f0367">   63</a></span>&#160;<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml">Solution</a> <a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml">BoundedSIDepSolver</a>::<a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a0e0c689d281fd47ff601f6279a8f0367">solve</a>(DepsSet&amp; deps) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml">Solution</a> sol;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    sol<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a95fbd5a3cc1c578ed6082a4b4fead836">.</a><a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a95fbd5a3cc1c578ed6082a4b4fead836">mCost</a> = 0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    sol<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">.</a><a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">mInitial</a>.assign(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>, 0);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>; ++i)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        sol<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">.</a><a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">mInitial</a>[i] = i;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    CandidatesTy candidates { { Mapping(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>, _undef), 0 } };</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;CandidatesTy&gt; candidatesCollection;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<span class="keywordtype">bool</span>&gt; mapped(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>, <span class="keyword">false</span>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    Matrix distance(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>, <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;uint32_t&gt;(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>, _undef));</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>; ++i) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        distance[i] = CalculateDistance(i, <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>.get());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">bool</span> isFirst = <span class="keyword">true</span>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// First Phase:</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">//     in this phase, we divide the program in layers, such that each layer is satisfied</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">//     by any of the mappings inside &#39;candidates&#39;.</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; iDependencies : deps) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keyword">auto</span> nofIDeps = iDependencies<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a162d900ef6a43cdd8e1097808f1f43c9">.</a><a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a162d900ef6a43cdd8e1097808f1f43c9">getSize</a><a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a162d900ef6a43cdd8e1097808f1f43c9">(</a><a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a162d900ef6a43cdd8e1097808f1f43c9">)</a>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">if</span> (nofIDeps &gt; 1) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Instructions with more than one dependency not supported &quot;</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; iDependencies<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#abcbc6b75be680c6a35f38a8dbf968edc">.</a><a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#abcbc6b75be680c6a35f38a8dbf968edc">mCallPoint</a><a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">-&gt;</a><a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">toString</a><a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">(</a><span class="keyword">false</span><a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">)</a> &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::exit(<span class="keyword">static_cast</span>&lt;uint32_t&gt;(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9">ExitCode</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a1414203994e495fe3ee8884d6e117bda">::</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a1414203994e495fe3ee8884d6e117bda">EXIT_multi_deps</a>));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nofIDeps &lt; 1) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keyword">auto</span> dep = iDependencies<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a44ff7c580f8709701e476adb60daa220">[</a>0<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a44ff7c580f8709701e476adb60daa220">]</a>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keyword">auto</span> newCandidates = extendCandidates(dep, mapped, candidates, isFirst);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;(first) Candidate number: &quot;</span> &lt;&lt; newCandidates.size() &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">if</span> (newCandidates.empty()) {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;Reset!&quot;</span> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">MappingToString</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">(</a>candidates[0].m<a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">)</a> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="comment">// Save candidates and reset!</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            candidatesCollection.push_back(candidates);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="comment">// Process this dependency again.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            candidates = { { Mapping(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>, _undef), 0 } };</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            mapped.assign(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>, <span class="keyword">false</span>);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            newCandidates = extendCandidates(dep, mapped, candidates, <span class="keyword">true</span>);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        isFirst = <span class="keyword">false</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        candidates = newCandidates;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;Dep (&quot;</span> &lt;&lt; dep<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">.</a><a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">mFrom</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; dep<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">.</a><a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">mTo</a> &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;Candidate number: &quot;</span> &lt;&lt; candidates.size() &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    candidatesCollection.push_back(candidates);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// Second Phase:</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">//     here, the idea is to use, perhaps, dynamic programming to test all possibilities</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">//     for &#39;glueing&#39; the sequence of candidatesCollection together.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    uint32_t nofLayers = candidatesCollection.size();</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    uint32_t layerMaxSize = 0;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; nofLayers; ++i)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        layerMaxSize = <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::max(layerMaxSize, (uint32_t) candidatesCollection[i].size());</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;Dynamic Programming PHASE&quot;</span> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;Layers: &quot;</span> &lt;&lt; nofLayers &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;MaxSize: &quot;</span> &lt;&lt; layerMaxSize &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">if</span> (nofLayers &gt; 0) {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<a class="code" href="../../db/dec/namespacebsi.xhtml">bsi</a>::<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml">TracebackInfo</a>&gt;&gt; mem</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            (nofLayers, <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<a class="code" href="../../db/dec/namespacebsi.xhtml">bsi</a>::<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml">TracebackInfo</a>&gt;(layerMaxSize, { {}, _undef, _undef }));</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0, e = candidatesCollection[0].size(); i &lt; e; ++i)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            mem[0][i] = { candidatesCollection[0][i].m, _undef, candidatesCollection[0][i].cost };</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; nofLayers; ++i) {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;Beginning: &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; of &quot;</span> &lt;&lt; nofLayers &lt;&lt; <span class="stringliteral">&quot; layers.&quot;</span> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            uint32_t jLayerSize = candidatesCollection[i].size();</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">for</span> (uint32_t j = 0; j &lt; jLayerSize; ++j) {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml">Timer</a> jt;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                jt<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a04b2df0f873780111173bc5e2a1810aa">.</a><a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a04b2df0f873780111173bc5e2a1810aa">start</a><a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a04b2df0f873780111173bc5e2a1810aa">(</a><a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a04b2df0f873780111173bc5e2a1810aa">)</a>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <a class="code" href="../../db/dec/namespacebsi.xhtml">bsi</a>::<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml">TracebackInfo</a> best = { {}, _undef, _undef };</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                uint32_t kLayerSize = candidatesCollection[i - 1].size();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keywordflow">for</span> (uint32_t k = 0; k &lt; kLayerSize; ++k) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <span class="keyword">auto</span> candidate = candidatesCollection[i][j].m;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    uint32_t cost = estimateCost(mem[i - 1][k]<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>, candidate, distance);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    cost += mem[i - 1][k]<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a4610e8717110917976951e397e0c8e1d">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a4610e8717110917976951e397e0c8e1d">cost</a>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="keywordflow">if</span> (cost &lt; best<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a4610e8717110917976951e397e0c8e1d">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a4610e8717110917976951e397e0c8e1d">cost</a>) {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        best = { candidate, k, cost };</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                mem[i][j] = best;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                jt<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a0b9a3de677363a5d3f995ac03a3d0a5e">.</a><a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a0b9a3de677363a5d3f995ac03a3d0a5e">stop</a><a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a0b9a3de677363a5d3f995ac03a3d0a5e">(</a><a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a0b9a3de677363a5d3f995ac03a3d0a5e">)</a>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;(i:&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;, j:&quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot;): &quot;</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    &lt;&lt; ((<span class="keywordtype">double</span>) jt<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a12124caea02f8efea63a4ed320acb06f">.</a><a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a12124caea02f8efea63a4ed320acb06f">getMilliseconds</a><a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a12124caea02f8efea63a4ed320acb06f">(</a><a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a12124caea02f8efea63a4ed320acb06f">)</a>) / 1000.0 &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;End: &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; of &quot;</span> &lt;&lt; nofLayers &lt;&lt; <span class="stringliteral">&quot; layers.&quot;</span> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <a class="code" href="../../db/dec/namespacebsi.xhtml">bsi</a>::<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml">TracebackInfo</a> best = { {}, _undef, _undef };</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        uint32_t lastLayer = nofLayers - 1;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0, e = candidatesCollection[lastLayer].size(); i &lt; e; ++i) {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordflow">if</span> (mem[lastLayer][i]<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a4610e8717110917976951e397e0c8e1d">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a4610e8717110917976951e397e0c8e1d">cost</a> &lt; best<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a4610e8717110917976951e397e0c8e1d">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a4610e8717110917976951e397e0c8e1d">cost</a>)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                best = mem[lastLayer][i];</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<a class="code" href="../../db/dec/namespacebsi.xhtml">bsi</a>::<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml">TracebackInfo</a>&gt; infoVector;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="comment">// Here, we populate the stack of TracebackInfo.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="comment">// Doing so, the one that is in the top is the one that should be used</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="comment">// sooner.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <a class="code" href="../../db/dec/namespacebsi.xhtml">bsi</a>::<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml">TracebackInfo</a> info = best;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keywordflow">for</span> (int32_t i = nofLayers - 1; i &gt;= 0; --i) {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                infoVector.push_back(info);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keywordflow">if</span> (info<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#ad3a026cdafdf83a6e2b1686d9200cbb5">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#ad3a026cdafdf83a6e2b1686d9200cbb5">parent</a> != _undef)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    info = mem[i - 1][info.parent];</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::reverse(infoVector.begin(), infoVector.end());</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="comment">// Third Phase:</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="comment">//     build the operations vector by tracebacking from the solution we have</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="comment">//     found. For this, we have to go through every dependency again.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        uint32_t idx = 0;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keyword">auto</span> info = infoVector[0];</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        Mapping realToDummy = infoVector[0]<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        Mapping dummyToPhys = <a class="code" href="../../d4/deb/namespaceefd.xhtml#a186bbb1cec68c992374b8795b10af1a8">IdentityMapping</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a186bbb1cec68c992374b8795b10af1a8">(</a><a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a186bbb1cec68c992374b8795b10af1a8">)</a>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; iDependencies : deps) {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="comment">// We are sure that there are no instruction dependency that has more than</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="comment">// one dependency.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keywordflow">if</span> (iDependencies<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a162d900ef6a43cdd8e1097808f1f43c9">.</a><a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a162d900ef6a43cdd8e1097808f1f43c9">getSize</a><a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a162d900ef6a43cdd8e1097808f1f43c9">(</a><a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a162d900ef6a43cdd8e1097808f1f43c9">)</a> &lt; 1)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keyword">auto</span> dep = iDependencies<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a44ff7c580f8709701e476adb60daa220">[</a>0<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a44ff7c580f8709701e476adb60daa220">]</a>;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            uint32_t a = dep<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">.</a><a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">mFrom</a>, b = dep<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">.</a><a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">mTo</a>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            uint32_t u = info<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>[a], v = info<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>[b];</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml">Solution</a>::<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#aece8d5b7bc71b4f518d0e32b3ab1ec2c">OpVector</a> opVector;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="comment">// If we can&#39;t satisfy (u, v) with the current mapping, it can only mean</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="comment">// that we must go to the next one.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="keywordflow">if</span> ((u == _undef || v == _undef) ||</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                (!<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">hasEdge</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">(</a>u<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">,</a> v<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">)</a> &amp;&amp; !<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">hasEdge</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">(</a>v<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">,</a> u<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">)</a>)) {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                <span class="keywordflow">if</span> (++idx &gt;= infoVector.size()) {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Not enough mappings were generated, maybe!?&quot;</span> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Mapping for &#39;&quot;</span> &lt;&lt; iDependencies<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#abcbc6b75be680c6a35f38a8dbf968edc">.</a><a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#abcbc6b75be680c6a35f38a8dbf968edc">mCallPoint</a><a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">-&gt;</a><a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">toString</a><a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">(</a><span class="keyword">false</span><a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">)</a></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        &lt;&lt; <span class="stringliteral">&quot;&#39;.&quot;</span> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::exit(<span class="keyword">static_cast</span>&lt;uint32_t&gt;(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9">ExitCode</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">::</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">EXIT_unreachable</a>));</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keyword">auto</span> newInfo = infoVector[idx];</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="comment">// Transform all mappings into dummy mappings.</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                <span class="keyword">auto</span> prev = Mapping(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>, _undef);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="keyword">auto</span> curr = Mapping(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>, _undef);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>; ++i) {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <span class="keywordflow">if</span> (info<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>[i] != _undef &amp;&amp; newInfo<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>[i] == _undef) {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Assumption that previous mappings have same mapped qubits &quot;</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot;than current mapping broken.&quot;</span> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                        <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::exit(<span class="keyword">static_cast</span>&lt;uint32_t&gt;(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9">ExitCode</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">::</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">EXIT_unreachable</a>));</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    <span class="keywordflow">if</span> (info<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>[i] != _undef) {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        prev[realToDummy[i]] = info<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>[i];</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        curr[realToDummy[i]] = newInfo<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>[i];</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                <span class="keyword">auto</span> prevAssign = <a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">GenAssignment</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">(</a><a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> prev<a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> <span class="keyword">false</span><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">)</a>;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                <span class="keyword">auto</span> currAssign = <a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">GenAssignment</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">(</a><a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> curr<a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> <span class="keyword">false</span><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">)</a>;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                <a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml">ApproxTSFinder</a> finder<a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a48e2a69ee11d70c0d074cba522c48149">(</a><a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a><a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a48e2a69ee11d70c0d074cba522c48149">)</a>;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                <span class="keyword">auto</span> swaps = finder<a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a3142f7094125f35c011e0ffab5d6af7b">.</a><a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a3142f7094125f35c011e0ffab5d6af7b">find</a><a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a3142f7094125f35c011e0ffab5d6af7b">(</a>prevAssign<a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a3142f7094125f35c011e0ffab5d6af7b">,</a> currAssign<a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a3142f7094125f35c011e0ffab5d6af7b">)</a>;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                <span class="keyword">auto</span> assign = <a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">GenAssignment</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">(</a><a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> dummyToPhys<a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">)</a>;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;From &quot;</span> &lt;&lt; <a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">MappingToString</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">(</a>info<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">)</a> &lt;&lt; <span class="stringliteral">&quot; to &quot;</span> &lt;&lt; <a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">MappingToString</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">(</a>newInfo<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">)</a> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span> swp : swaps) {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    uint32_t a = assign[swp.u], b = assign[swp.v];</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    <span class="keywordflow">if</span> (!<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">hasEdge</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">(</a>swp<a class="code" href="../../d8/d62/structefd_1_1Swap.xhtml#add0ebbf6822b65844ab5c34a852b62fe">.</a><a class="code" href="../../d8/d62/structefd_1_1Swap.xhtml#add0ebbf6822b65844ab5c34a852b62fe">u</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">,</a> swp<a class="code" href="../../d8/d62/structefd_1_1Swap.xhtml#a85a25f0711e9e1f00ef9513bf9cab192">.</a><a class="code" href="../../d8/d62/structefd_1_1Swap.xhtml#a85a25f0711e9e1f00ef9513bf9cab192">v</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">)</a>) {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                        <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::swap(a, b);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                    }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::swap(assign[swp.u], assign[swp.v]);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::swap(dummyToPhys[a], dummyToPhys[b]);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                    opVector.push_back({ <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml">Operation</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">::</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">K_OP_SWAP</a>, a, b });</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                sol<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a95fbd5a3cc1c578ed6082a4b4fead836">.</a><a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a95fbd5a3cc1c578ed6082a4b4fead836">mCost</a> += (<a class="code" href="../../d0/d91/QbitAllocator_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">.</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">getVal</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">(</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">)</a> * swaps.size());</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>; ++i) {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    <span class="keywordflow">if</span> (realToDummy[i] == _undef &amp;&amp; newInfo<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>[i] != _undef) {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                        realToDummy[i] = assign[newInfo.m[i]];</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                    }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                info = newInfo;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            u = info<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>[a];</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            v = info<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a>[b];</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml">Operation</a> op;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            op<a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a661c645e7a123fe10368c28211c27818">.</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a661c645e7a123fe10368c28211c27818">mU</a> = a;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            op<a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8030b190900426e2e10f3ef4ce8b3200">.</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8030b190900426e2e10f3ef4ce8b3200">mV</a> = b;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">hasEdge</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">(</a>u<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">,</a> v<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">)</a>) {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                op<a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8b4600b23c317966b2529213b1f649db">.</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8b4600b23c317966b2529213b1f649db">mK</a> = <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml">Operation</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">::</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">K_OP_CNOT</a>;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">hasEdge</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">(</a>v<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">,</a> u<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">)</a>) {</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                op<a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8b4600b23c317966b2529213b1f649db">.</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8b4600b23c317966b2529213b1f649db">mK</a> = <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml">Operation</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">::</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">K_OP_REV</a>;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                sol<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a95fbd5a3cc1c578ed6082a4b4fead836">.</a><a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a95fbd5a3cc1c578ed6082a4b4fead836">mCost</a> += <a class="code" href="../../d0/d91/QbitAllocator_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">.</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">getVal</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">(</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">)</a>;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Mapping &quot;</span> &lt;&lt; <a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">MappingToString</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">(</a>info<a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">.</a><a class="code" href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">m</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">)</a> &lt;&lt; <span class="stringliteral">&quot; not able to satisfy dependency &quot;</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; a &lt;&lt; <span class="stringliteral">&quot;{&quot;</span> &lt;&lt; u &lt;&lt; <span class="stringliteral">&quot;}, &quot;</span> &lt;&lt; b &lt;&lt; <span class="stringliteral">&quot;{&quot;</span> &lt;&lt; v &lt;&lt; <span class="stringliteral">&quot;})&quot;</span> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::exit(<span class="keyword">static_cast</span>&lt;uint32_t&gt;(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9">ExitCode</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">::</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">EXIT_unreachable</a>));</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            }</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            opVector.push_back(op);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            sol<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#ab9f13ffebeaa6a3fd9825c5780eeac02">.</a><a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#ab9f13ffebeaa6a3fd9825c5780eeac02">mOpSeqs</a>.push_back(<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::make_pair(iDependencies<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#abcbc6b75be680c6a35f38a8dbf968edc">.</a><a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#abcbc6b75be680c6a35f38a8dbf968edc">mCallPoint</a>, opVector));</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">Fill</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">(</a><a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">,</a> realToDummy<a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">)</a>;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        sol<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">.</a><a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">mInitial</a> = realToDummy;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keyword">auto</span> dummyToReal = <a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">GenAssignment</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">(</a><a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> realToDummy<a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> <span class="keyword">false</span><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">)</a>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="comment">// Transforming swaps from dummy to real.</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; pair : sol<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#ab9f13ffebeaa6a3fd9825c5780eeac02">.</a><a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#ab9f13ffebeaa6a3fd9825c5780eeac02">mOpSeqs</a>) {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; op : pair.second) {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="keywordflow">if</span> (op<a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8b4600b23c317966b2529213b1f649db">.</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8b4600b23c317966b2529213b1f649db">mK</a> == <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml">Operation</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">::</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">K_OP_SWAP</a>) {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    op<a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a661c645e7a123fe10368c28211c27818">.</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a661c645e7a123fe10368c28211c27818">mU</a> = dummyToReal[op.mU];</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    op<a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8030b190900426e2e10f3ef4ce8b3200">.</a><a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a8030b190900426e2e10f3ef4ce8b3200">mV</a> = dummyToReal[op.mV];</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                }</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            }</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        }</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">Fill</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">(</a><a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">,</a> sol<a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">.</a><a class="code" href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">mInitial</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">)</a>;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    }</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordflow">return</span> sol;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;uint32_t <a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml">BoundedSIDepSolver</a>::estimateCost(Mapping&amp; previous,</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                          Mapping&amp; current,</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                          Matrix&amp; distance) {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keyword">auto</span> prevAssign = <a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">GenAssignment</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">(</a><a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> previous<a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> <span class="keyword">false</span><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">)</a>;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keyword">auto</span> curAssign = <a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">GenAssignment</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">(</a><a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> current<a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> <span class="keyword">false</span><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">)</a>;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>; ++i) {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">if</span> (current[i] != _undef &amp;&amp; previous[i] == _undef) {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">if</span> (prevAssign[current[i]] == _undef) {</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                previous[i] = current[i];</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                previous[i] = getNearest(current[i], prevAssign);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            prevAssign[previous[i]] = i;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (current[i] == _undef &amp;&amp; previous[i] != _undef) {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="keywordflow">if</span> (curAssign[previous[i]] == _undef) {</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                current[i] = previous[i];</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                current[i] = getNearest(previous[i], curAssign);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            }</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            curAssign[current[i]] = i;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        }</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    }</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    uint32_t totalDistance = 0;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>; ++i) {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">if</span> (current[i] != _undef) {</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            totalDistance += distance[previous[i]][current[i]];</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        }</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">return</span> totalDistance;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;}</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;uint32_t <a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml">BoundedSIDepSolver</a>::getNearest(uint32_t u, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a0370997575fb50e5567c20c151d37592">Assign</a>&amp; assign) {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<span class="keywordtype">bool</span>&gt; visited(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>, <span class="keyword">false</span>);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::queue&lt;uint32_t&gt; q;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    q.push(u);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    visited[u] = <span class="keyword">true</span>;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">while</span> (!q.empty()) {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        uint32_t v = q.front();</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        q.pop();</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keywordflow">if</span> (assign[v] == _undef) <span class="keywordflow">return</span> v;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordflow">for</span> (uint32_t w : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">adj</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">(</a>v<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">)</a>)</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            <span class="keywordflow">if</span> (!visited[w]) {</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                visited[w] = <span class="keyword">true</span>;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                q.push(w);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            }</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    }</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="comment">// There is no way we can not find anyone!!</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Can&#39;t find any vertice connected to v:&quot;</span> &lt;&lt; u &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::endl;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::exit(<span class="keyword">static_cast</span>&lt;uint32_t&gt;(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9">ExitCode</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">::</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">EXIT_unreachable</a>));</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;}</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml">BoundedSIDepSolver</a>::CandidatesTy</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<a class="code" href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml">BoundedSIDepSolver</a>::extendCandidates(<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml">Dep</a>&amp; dep, <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<span class="keywordtype">bool</span>&gt;&amp; mapped,</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                     CandidatesTy&amp; candidates, <span class="keywordtype">bool</span> isFirst) {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    CandidatesTy newCandidates;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    uint32_t a = dep<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">.</a><a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">mFrom</a>, b = dep<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">.</a><a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">mTo</a>;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    uint32_t remainingSolutions = MaxPartialSolutions<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">.</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">getVal</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">(</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">)</a>;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keywordtype">bool</span> bothUnmapped = !mapped[a] &amp;&amp; !mapped[b];</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordtype">bool</span> hasUnmapped = !mapped[a] || !mapped[b];</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="comment">// Of course, there is the possibility where both are mapped.</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="comment">// In this case, no worries since we do not use this variables.</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    uint32_t unmappedV = (!mapped[a]) ? a : b;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    uint32_t mappedV = (mapped[a]) ? a : b;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = candidates.size(); i &lt; e &amp;&amp; remainingSolutions; ++i) {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keyword">auto</span> candPair = candidates[i];</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="keyword">auto</span> assign = <a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">GenAssignment</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">(</a><a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> candPair.m<a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">,</a> <span class="keyword">false</span><a class="code" href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">)</a>;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        uint32_t remainingChildren = MaxChildren<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">.</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">getVal</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">(</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">)</a>;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">if</span> (isFirst) remainingChildren = MaxPartialSolutions<a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">.</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">getVal</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">(</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">)</a>;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        uint32_t maxMappingsAB = <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::min(remainingChildren, remainingSolutions);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::vector&lt;<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::pair&lt;uint32_t, uint32_t&gt;&gt; mappingsForAB;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordflow">if</span> (bothUnmapped) {</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            <span class="comment">// If both &#39;a&#39; or &#39;b&#39; are not mapped.</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            <span class="keywordflow">for</span> (uint32_t u = 0; u &lt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>; ++u) {</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                <span class="keywordflow">if</span> (assign[u] != _undef) <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                <span class="keywordflow">for</span> (uint32_t v : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">adj</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">(</a>u<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">)</a>) {</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                    <span class="keywordflow">if</span> (assign[v] != _undef) <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                    mappingsForAB.push_back(<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::make_pair(u, v));</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                }</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hasUnmapped) {</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            <span class="comment">// If only one of &#39;a&#39; or &#39;b&#39; are already mapped.</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            uint32_t u = candPair.m[mappedV];</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            <span class="keywordflow">for</span> (uint32_t v : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">adj</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">(</a>u<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">)</a>) {</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                <span class="keywordflow">if</span> (assign[v] == _undef) {</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                    <span class="comment">// This is one new candidate!</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                    uint32_t from = (mappedV == a) ? u : v;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                    uint32_t to = (unmappedV == a) ? u : v;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                    mappingsForAB.push_back(<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::make_pair(from, to));</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                }</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            }</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            <span class="comment">// If both, &#39;a&#39; and &#39;b&#39; are already mapped.</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            uint32_t u = candPair.m[a], v = candPair.m[b];</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">hasEdge</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">(</a>u<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">,</a> v<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">)</a> || <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">hasEdge</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">(</a>v<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">,</a> u<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">)</a>)</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                mappingsForAB.push_back(<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::make_pair(u, v));</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        }</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keywordflow">if</span> (mappingsForAB.size() &gt;= maxMappingsAB) {</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            mappingsForAB.erase(mappingsForAB.begin() + maxMappingsAB, mappingsForAB.end());</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        }</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; mappingCand : mappingsForAB) {</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            CandPair nCand = candPair;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            nCand.m[a] = mappingCand.first;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            nCand.m[b] = mappingCand.second;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">hasEdge</a><a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">(</a>mappingCand.first<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">,</a> mappingCand.second<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">)</a>) {</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                nCand.cost += <a class="code" href="../../d0/d91/QbitAllocator_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">.</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">getVal</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">(</a><a class="code" href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">)</a>;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            }</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            newCandidates.push_back(nCand);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        }</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        remainingSolutions -= <a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::min(maxMappingsAB, (uint32_t) mappingsForAB.size());</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    }</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    mapped[a] = <span class="keyword">true</span>;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    mapped[b] = <span class="keyword">true</span>;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">return</span> newCandidates;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div><div class="ttc" id="classefd_1_1DepSolverQAllocator_xhtml"><div class="ttname"><a href="../../da/d6e/classefd_1_1DepSolverQAllocator.xhtml">efd::DepSolverQAllocator</a></div><div class="ttdoc">Wrapper for making it easier to implement algorithms for Qubit Allocation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/db1/DepSolverQAllocator_8h_source.xhtml#l00011">DepSolverQAllocator.h:11</a></div></div>
<div class="ttc" id="classefd_1_1Timer_xhtml"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml">efd::Timer</a></div><div class="ttdoc">Tracks the elapsed time. One should use the methods start and stop in order to track the time of some...</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d27/Timer_8h_source.xhtml#l00014">Timer.h:14</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a0370997575fb50e5567c20c151d37592"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a0370997575fb50e5567c20c151d37592">efd::Assign</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Assign</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00012">Defs.h:12</a></div></div>
<div class="ttc" id="structefd_1_1Dep_xhtml"><div class="ttname"><a href="../../d9/d38/structefd_1_1Dep.xhtml">efd::Dep</a></div><div class="ttdoc">Structure for abstracting dependencies. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00017">DependencyBuilderPass.h:17</a></div></div>
<div class="ttc" id="structbsi_1_1TracebackInfo_xhtml_ad3a026cdafdf83a6e2b1686d9200cbb5"><div class="ttname"><a href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#ad3a026cdafdf83a6e2b1686d9200cbb5">bsi::TracebackInfo::parent</a></div><div class="ttdeci">uint32_t parent</div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d8f/BoundedSIDepSolver_8cpp_source.xhtml#l00025">BoundedSIDepSolver.cpp:25</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">efd::Operation::K_OP_REV</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00019">QbitAllocator.h:19</a></div></div>
<div class="ttc" id="classefd_1_1DepSolverQAllocator_xhtml_a4ab0f7fa706eec4610c520607831092f"><div class="ttname"><a href="../../da/d6e/classefd_1_1DepSolverQAllocator.xhtml#a4ab0f7fa706eec4610c520607831092f">efd::DepSolverQAllocator::DepSolverQAllocator</a></div><div class="ttdeci">DepSolverQAllocator(ArchGraph::sRef archGraph)</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d91/DepSolverQAllocator_8cpp_source.xhtml#l00006">DepSolverQAllocator.cpp:6</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00042">Defs.h:42</a></div></div>
<div class="ttc" id="classefd_1_1BoundedSIDepSolver_xhtml_a5cd0ecfe9415c88771b30ae2a0b88364"><div class="ttname"><a href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a5cd0ecfe9415c88771b30ae2a0b88364">efd::BoundedSIDepSolver::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; BoundedSIDepSolver &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d11/BoundedSIDepSolver_8h_source.xhtml#l00017">BoundedSIDepSolver.h:17</a></div></div>
<div class="ttc" id="structefd_1_1Swap_xhtml_a85a25f0711e9e1f00ef9513bf9cab192"><div class="ttname"><a href="../../d8/d62/structefd_1_1Swap.xhtml#a85a25f0711e9e1f00ef9513bf9cab192">efd::Swap::v</a></div><div class="ttdeci">uint32_t v</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00020">Defs.h:20</a></div></div>
<div class="ttc" id="classefd_1_1Timer_xhtml_a0b9a3de677363a5d3f995ac03a3d0a5e"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml#a0b9a3de677363a5d3f995ac03a3d0a5e">efd::Timer::stop</a></div><div class="ttdeci">void stop()</div><div class="ttdoc">Stops the timer. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/dc2/Timer_8cpp_source.xhtml#l00015">Timer.cpp:15</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a5b9a652c9403e0dbe7115d9d7f5e7d62"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a5b9a652c9403e0dbe7115d9d7f5e7d62">efd::GenAssignment</a></div><div class="ttdeci">Assign GenAssignment(uint32_t archQ, Mapping mapping, bool fill=true)</div><div class="ttdoc">Generates an assignment mapping (maps the architecture&amp;#39;s qubits to the logical ones) of size archQ...</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00335">QbitAllocator.cpp:335</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9">efd::ExitCode</a></div><div class="ttdeci">ExitCode</div><div class="ttdoc">Instead of issueing an &amp;#39;assert(false)&amp;#39;, we should use this enum in order to exit with errors...</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00034">Defs.h:34</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_aac5a20e6db5d358cf72d4816441d0b0d"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">efd::MappingToString</a></div><div class="ttdeci">std::string MappingToString(Mapping m)</div><div class="ttdoc">Prints the mapping m to a string and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00387">QbitAllocator.cpp:387</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a4d7d13dd12213a9f247d1304472badbd"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">efd::QbitAllocator::mArchGraph</a></div><div class="ttdeci">ArchGraph::sRef mArchGraph</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00069">QbitAllocator.h:69</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml">efd::ArchGraph</a></div><div class="ttdoc">This is the base class for the architectures that this project will be supporting. </div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00010">ArchGraph.h:10</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_aa85ea20ad74d6a7df7a52c13a9fabe2d"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">efd::Graph::size</a></div><div class="ttdeci">uint32_t size() const</div><div class="ttdoc">Return the number of vertices. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00036">Graph.cpp:36</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a3531989ad03fb1b38b43c7554d0d378e"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">efd::Graph::adj</a></div><div class="ttdeci">std::set&lt; uint32_t &gt; adj(uint32_t i) const</div><div class="ttdoc">Return the set of adjacent vertices of some vertex i. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00048">Graph.cpp:48</a></div></div>
<div class="ttc" id="structbsi_1_1TracebackInfo_xhtml_a22ef2d0c9afc45e310fe2d36a73079b1"><div class="ttname"><a href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a22ef2d0c9afc45e310fe2d36a73079b1">bsi::TracebackInfo::m</a></div><div class="ttdeci">Mapping m</div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d8f/BoundedSIDepSolver_8cpp_source.xhtml#l00024">BoundedSIDepSolver.cpp:24</a></div></div>
<div class="ttc" id="structefd_1_1Dep_xhtml_a87771188e9aacbd64ccd94e9b9524135"><div class="ttname"><a href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">efd::Dep::mTo</a></div><div class="ttdeci">uint32_t mTo</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00019">DependencyBuilderPass.h:19</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml">efd::Operation</a></div><div class="ttdoc">Struct used to describe the operation chosen for each solving each dependency. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00015">QbitAllocator.h:15</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a4d48c40aef0cafc61f748a978264a5c3"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">efd::QbitAllocator::mPQubits</a></div><div class="ttdeci">uint32_t mPQubits</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00074">QbitAllocator.h:74</a></div></div>
<div class="ttc" id="structefd_1_1Dependencies_xhtml_a162d900ef6a43cdd8e1097808f1f43c9"><div class="ttname"><a href="../../d1/dca/structefd_1_1Dependencies.xhtml#a162d900ef6a43cdd8e1097808f1f43c9">efd::Dependencies::getSize</a></div><div class="ttdeci">uint32_t getSize() const</div><div class="ttdoc">Forwards to the mDeps attribute. </div><div class="ttdef"><b>Definition:</b> <a href="../../da/dcd/DependencyBuilderPass_8cpp_source.xhtml#l00014">DependencyBuilderPass.cpp:14</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00012">Nodes.h:12</a></div></div>
<div class="ttc" id="classefd_1_1ApproxTSFinder_xhtml_a3142f7094125f35c011e0ffab5d6af7b"><div class="ttname"><a href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a3142f7094125f35c011e0ffab5d6af7b">efd::ApproxTSFinder::find</a></div><div class="ttdeci">SwapSeq find(Assign from, Assign to) override</div><div class="ttdoc">Finds a swap sequence to reach to from from. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d0b/ApproxTSFinder_8cpp_source.xhtml#l00468">ApproxTSFinder.cpp:468</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a96ca13a5c2b971b68619ce4a34be0f66"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">efd::Node::toString</a></div><div class="ttdeci">virtual std::string toString(bool pretty=false) const =0</div><div class="ttdoc">Returns a std::string representation of this Node and its childrem. </div></div>
<div class="ttc" id="structefd_1_1Dependencies_xhtml_a44ff7c580f8709701e476adb60daa220"><div class="ttname"><a href="../../d1/dca/structefd_1_1Dependencies.xhtml#a44ff7c580f8709701e476adb60daa220">efd::Dependencies::operator[]</a></div><div class="ttdeci">Dep &amp; operator[](uint32_t i)</div><div class="ttdoc">Forwards to the mDeps attribute. </div><div class="ttdef"><b>Definition:</b> <a href="../../da/dcd/DependencyBuilderPass_8cpp_source.xhtml#l00022">DependencyBuilderPass.cpp:22</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a8030b190900426e2e10f3ef4ce8b3200"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a8030b190900426e2e10f3ef4ce8b3200">efd::Operation::mV</a></div><div class="ttdeci">uint32_t mV</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00025">QbitAllocator.h:25</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_aace719bbdaaef0e8787f8a0032a676d8"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">efd::Graph::hasEdge</a></div><div class="ttdeci">bool hasEdge(uint32_t i, uint32_t j)</div><div class="ttdoc">Returns true whether it has an edge (i, j). </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00059">Graph.cpp:59</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml_a8c9131ca43a772179c24fa4dc9701bb2"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">efd::ArchGraph::sRef</a></div><div class="ttdeci">std::shared_ptr&lt; ArchGraph &gt; sRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00014">ArchGraph.h:14</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="../../d8/dcc/namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d2e/WrapperVal_8h_source.xhtml#l00048">WrapperVal.h:48</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml_af670a67c3fd6e0c5cbea732b3749fb14"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml#af670a67c3fd6e0c5cbea732b3749fb14">efd::Opt::getVal</a></div><div class="ttdeci">const T &amp; getVal() const</div><div class="ttdoc">Gets a const reference to the value of this command line option. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00158">CommandLine.h:158</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml_acd67239985686893469219a4f07554ad"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml#acd67239985686893469219a4f07554ad">efd::ArchGraph::Ref</a></div><div class="ttdeci">ArchGraph * Ref</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00012">ArchGraph.h:12</a></div></div>
<div class="ttc" id="namespacebsi_xhtml"><div class="ttname"><a href="../../db/dec/namespacebsi.xhtml">bsi</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d8f/BoundedSIDepSolver_8cpp_source.xhtml#l00022">BoundedSIDepSolver.cpp:22</a></div></div>
<div class="ttc" id="classefd_1_1BoundedSIDepSolver_xhtml"><div class="ttname"><a href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml">efd::BoundedSIDepSolver</a></div><div class="ttdoc">Implementation of DepSolverQAllocator that bounds the subgraph isomorphism search. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d11/BoundedSIDepSolver_8h_source.xhtml#l00014">BoundedSIDepSolver.h:14</a></div></div>
<div class="ttc" id="classefd_1_1Timer_xhtml_a12124caea02f8efea63a4ed320acb06f"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml#a12124caea02f8efea63a4ed320acb06f">efd::Timer::getMilliseconds</a></div><div class="ttdeci">uint64_t getMilliseconds()</div><div class="ttdoc">Gets the number of milliseconds stored in mDuration. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/dc2/Timer_8cpp_source.xhtml#l00031">Timer.cpp:31</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a8b4600b23c317966b2529213b1f649db"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a8b4600b23c317966b2529213b1f649db">efd::Operation::mK</a></div><div class="ttdeci">Kind mK</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00024">QbitAllocator.h:24</a></div></div>
<div class="ttc" id="classefd_1_1BoundedSIDepSolver_xhtml_a088f3bbc3e2602a296cd214f06202520"><div class="ttname"><a href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a088f3bbc3e2602a296cd214f06202520">efd::BoundedSIDepSolver::BoundedSIDepSolver</a></div><div class="ttdeci">BoundedSIDepSolver(ArchGraph::sRef archGraph)</div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d8f/BoundedSIDepSolver_8cpp_source.xhtml#l00056">BoundedSIDepSolver.cpp:56</a></div></div>
<div class="ttc" id="structbsi_1_1TracebackInfo_xhtml"><div class="ttname"><a href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml">bsi::TracebackInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d8f/BoundedSIDepSolver_8cpp_source.xhtml#l00023">BoundedSIDepSolver.cpp:23</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">efd::Operation::K_OP_SWAP</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00021">QbitAllocator.h:21</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">efd::Operation::K_OP_CNOT</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00018">QbitAllocator.h:18</a></div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml_a61fb88a6c3077b7d1abb47887bd01b11"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml#a61fb88a6c3077b7d1abb47887bd01b11">efd::Solution::mInitial</a></div><div class="ttdeci">Mapping mInitial</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00039">QbitAllocator.h:39</a></div></div>
<div class="ttc" id="structefd_1_1Dep_xhtml_a79841bfc527c14f4c1faeb37e2c4c1ee"><div class="ttname"><a href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">efd::Dep::mFrom</a></div><div class="ttdeci">uint32_t mFrom</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00018">DependencyBuilderPass.h:18</a></div></div>
<div class="ttc" id="classefd_1_1ApproxTSFinder_xhtml_a48e2a69ee11d70c0d074cba522c48149"><div class="ttname"><a href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a48e2a69ee11d70c0d074cba522c48149">efd::ApproxTSFinder::ApproxTSFinder</a></div><div class="ttdeci">ApproxTSFinder(Graph::sRef graph)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d0b/ApproxTSFinder_8cpp_source.xhtml#l00472">ApproxTSFinder.cpp:472</a></div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml_a95fbd5a3cc1c578ed6082a4b4fead836"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml#a95fbd5a3cc1c578ed6082a4b4fead836">efd::Solution::mCost</a></div><div class="ttdeci">uint32_t mCost</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00041">QbitAllocator.h:41</a></div></div>
<div class="ttc" id="structbsi_1_1TracebackInfo_xhtml_a4610e8717110917976951e397e0c8e1d"><div class="ttname"><a href="../../d5/d6b/structbsi_1_1TracebackInfo.xhtml#a4610e8717110917976951e397e0c8e1d">bsi::TracebackInfo::cost</a></div><div class="ttdeci">uint32_t cost</div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d8f/BoundedSIDepSolver_8cpp_source.xhtml#l00026">BoundedSIDepSolver.cpp:26</a></div></div>
<div class="ttc" id="structefd_1_1Swap_xhtml_add0ebbf6822b65844ab5c34a852b62fe"><div class="ttname"><a href="../../d8/d62/structefd_1_1Swap.xhtml#add0ebbf6822b65844ab5c34a852b62fe">efd::Swap::u</a></div><div class="ttdeci">uint32_t u</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00019">Defs.h:19</a></div></div>
<div class="ttc" id="classefd_1_1Timer_xhtml_a04b2df0f873780111173bc5e2a1810aa"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml#a04b2df0f873780111173bc5e2a1810aa">efd::Timer::start</a></div><div class="ttdeci">void start()</div><div class="ttdoc">Starts the timer. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/dc2/Timer_8cpp_source.xhtml#l00010">Timer.cpp:10</a></div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml">efd::Solution</a></div><div class="ttdoc">The solution for the allocation problem. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00034">QbitAllocator.h:34</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml_a47df596bfe4f88f23b9c989d10abc164"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml#a47df596bfe4f88f23b9c989d10abc164">efd::Opt::Opt</a></div><div class="ttdeci">Opt(std::string name, std::string description, T def, bool isRequired=false)</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00154">CommandLine.h:154</a></div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml_ab9f13ffebeaa6a3fd9825c5780eeac02"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml#ab9f13ffebeaa6a3fd9825c5780eeac02">efd::Solution::mOpSeqs</a></div><div class="ttdeci">OpSequences mOpSeqs</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00040">QbitAllocator.h:40</a></div></div>
<div class="ttc" id="QbitAllocator_8cpp_xhtml_a36846d9fb7f5b314db3aa16d72efe81f"><div class="ttname"><a href="../../d0/d91/QbitAllocator_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; RevCost(&quot;-rev-cost&quot;, &quot;Cost of using a reverse edge.&quot;, 4, false)</div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a09fe8045d6640c9583f9dabfbd2db9ce"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">efd::QbitAllocator::mVQubits</a></div><div class="ttdeci">uint32_t mVQubits</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00073">QbitAllocator.h:73</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9a1414203994e495fe3ee8884d6e117bda"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a1414203994e495fe3ee8884d6e117bda">efd::ExitCode::EXIT_multi_deps</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a18b0007f75e6b8d651b15754ff89f910"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">efd::Fill</a></div><div class="ttdeci">void Fill(uint32_t archQ, Mapping &amp;mapping)</div><div class="ttdoc">Fills the unmapped qubits with the ones missing. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00372">QbitAllocator.cpp:372</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a186bbb1cec68c992374b8795b10af1a8"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a186bbb1cec68c992374b8795b10af1a8">efd::IdentityMapping</a></div><div class="ttdeci">Mapping IdentityMapping(uint32_t progQ)</div><div class="ttdoc">Returns an identity mapping. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00377">QbitAllocator.cpp:377</a></div></div>
<div class="ttc" id="QbitAllocator_8cpp_xhtml_a99fd7c5ea250372d9b17e42df7764318"><div class="ttname"><a href="../../d0/d91/QbitAllocator_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; SwapCost(&quot;-swap-cost&quot;, &quot;Cost of using a swap function.&quot;, 7, false)</div></div>
<div class="ttc" id="classefd_1_1BoundedSIDepSolver_xhtml_a0e0c689d281fd47ff601f6279a8f0367"><div class="ttname"><a href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a0e0c689d281fd47ff601f6279a8f0367">efd::BoundedSIDepSolver::solve</a></div><div class="ttdeci">Solution solve(DepsSet &amp;deps) override</div><div class="ttdoc">Solves the allocation problem, returning a solution. </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d8f/BoundedSIDepSolver_8cpp_source.xhtml#l00063">BoundedSIDepSolver.cpp:63</a></div></div>
<div class="ttc" id="classefd_1_1BoundedSIDepSolver_xhtml_a04ffd71ce2fe66a349b1ceac78e9f3e8"><div class="ttname"><a href="../../de/d80/classefd_1_1BoundedSIDepSolver.xhtml#a04ffd71ce2fe66a349b1ceac78e9f3e8">efd::BoundedSIDepSolver::Create</a></div><div class="ttdeci">static uRef Create(ArchGraph::sRef archGraph)</div><div class="ttdoc">Create a new instance of this class. </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d8f/BoundedSIDepSolver_8cpp_source.xhtml#l00059">BoundedSIDepSolver.cpp:59</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a661c645e7a123fe10368c28211c27818"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a661c645e7a123fe10368c28211c27818">efd::Operation::mU</a></div><div class="ttdeci">uint32_t mU</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00025">QbitAllocator.h:25</a></div></div>
<div class="ttc" id="classefd_1_1ApproxTSFinder_xhtml"><div class="ttname"><a href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml">efd::ApproxTSFinder</a></div><div class="ttdef"><b>Definition:</b> <a href="../../db/dfc/ApproxTSFinder_8h_source.xhtml#l00007">ApproxTSFinder.h:7</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">efd::ExitCode::EXIT_unreachable</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a12c2040f25d8e3a7b9e1c2024c618cb6"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a></div><div class="ttdeci">#define INF</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00044">Defs.h:44</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a12a4775008cb8b6242cedc3621d98f9c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">efd::Mapping</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Mapping</div><div class="ttdoc">Defines the type used for mapping the qubits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00011">Defs.h:11</a></div></div>
<div class="ttc" id="structefd_1_1Solution_xhtml_aece8d5b7bc71b4f518d0e32b3ab1ec2c"><div class="ttname"><a href="../../d3/d2a/structefd_1_1Solution.xhtml#aece8d5b7bc71b4f518d0e32b3ab1ec2c">efd::Solution::OpVector</a></div><div class="ttdeci">std::vector&lt; Operation &gt; OpVector</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00035">QbitAllocator.h:35</a></div></div>
<div class="ttc" id="structefd_1_1Dependencies_xhtml_abcbc6b75be680c6a35f38a8dbf968edc"><div class="ttname"><a href="../../d1/dca/structefd_1_1Dependencies.xhtml#abcbc6b75be680c6a35f38a8dbf968edc">efd::Dependencies::mCallPoint</a></div><div class="ttdeci">Node::Ref mCallPoint</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00029">DependencyBuilderPass.h:29</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue May 1 2018 23:33:43 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
