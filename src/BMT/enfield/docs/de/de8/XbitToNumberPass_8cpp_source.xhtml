<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/XbitToNumberPass.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">XbitToNumberPass.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../de/de8/XbitToNumberPass_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d6/d94/XbitToNumberPass_8h.xhtml">enfield/Transform/XbitToNumberPass.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d0/d8d/NodeVisitor_8h.xhtml">enfield/Analysis/NodeVisitor.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d5/dfc/RTTI_8h.xhtml">enfield/Support/RTTI.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/d73/Defs_8h.xhtml">enfield/Support/Defs.h</a>&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/d09/uRefCast_8h.xhtml">enfield/Support/uRefCast.h</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// --------------------- XbitToNumber ------------------------</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">const</span> <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ab8b01e93534e95e5faa89004ab8da579">efd::XbitToNumber::XbitMap</a>&amp;</div><div class="line"><a name="l00011"></a><span class="lineno"><a class="line" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a7d9474b325920d98f5832d5f1923ba2b">   11</a></span>&#160;<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a7d9474b325920d98f5832d5f1923ba2b">efd::XbitToNumber::getQbitMap</a>(<a class="code" href="../../d1/d4b/classefd_1_1NDGateDecl.xhtml">NDGateDecl::Ref</a> gate)<span class="keyword"> const </span>{</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    <span class="keywordflow">if</span> (gate != <span class="keyword">nullptr</span> &amp;&amp; <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a05c05b2ff5664fb65306275d94799feb">lidQMap</a>.find(gate) == <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a05c05b2ff5664fb65306275d94799feb">lidQMap</a>.end()) {</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Trying to get an unknown gate information: `&quot;</span> &lt;&lt; gate-&gt;<a class="code" href="../../d0/d9e/classefd_1_1NDDecl.xhtml#a34957c2122c38cebf80a264d5fa3863f">getId</a>()-&gt;<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">getVal</a>()</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7">ExitCode::EXIT_unknown_resource</a>);</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    }</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="keywordflow">return</span> (gate == <span class="keyword">nullptr</span>) ? <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a66f71dcba0aa2ceeeabeb69196bd8191">gidQMap</a> : <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a05c05b2ff5664fb65306275d94799feb">lidQMap</a>.at(gate);</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;}</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#aa3dc820bf243cb3f06c6e6155e853888">   21</a></span>&#160;std::vector&lt;uint32_t&gt; <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#aa3dc820bf243cb3f06c6e6155e853888">efd::XbitToNumber::getRegUIds</a>(std::string <span class="keywordtype">id</span>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordflow">if</span> (gidRegMap.find(<span class="keywordtype">id</span>) == gidRegMap.end()) {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Register not found: `&quot;</span> &lt;&lt; <span class="keywordtype">id</span> &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7">ExitCode::EXIT_unknown_resource</a>);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    }</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">return</span> gidRegMap.at(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;}</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">   30</a></span>&#160;uint32_t <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">efd::XbitToNumber::getQUId</a>(std::string <span class="keywordtype">id</span>, <a class="code" href="../../d1/d4b/classefd_1_1NDGateDecl.xhtml">NDGateDecl::Ref</a> gate)<span class="keyword"> const </span>{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keyword">auto</span>&amp; map = getQbitMap(gate);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">if</span> (map.find(<span class="keywordtype">id</span>) == map.end()) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        std::string gateId = (gate == <span class="keyword">nullptr</span>) ? <span class="stringliteral">&quot;nullptr&quot;</span> : gate-&gt;<a class="code" href="../../d0/d9e/classefd_1_1NDDecl.xhtml#a34957c2122c38cebf80a264d5fa3863f">getId</a>()-&gt;<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">getVal</a>();</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Qubit id not found inside gate (`&quot;</span> &lt;&lt; gateId &lt;&lt; <span class="stringliteral">&quot;`): `&quot;</span> &lt;&lt; <span class="keywordtype">id</span> &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        std::exit(12);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="comment">// ExitWith(ExitCode::EXIT_unknown_resource);</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> map.at(<span class="keywordtype">id</span>).key;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae9f84f1119a80e918cc3b3fd916a5922">   41</a></span>&#160;uint32_t <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae9f84f1119a80e918cc3b3fd916a5922">efd::XbitToNumber::getCUId</a>(std::string <span class="keywordtype">id</span>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">if</span> (gidCMap.find(<span class="keywordtype">id</span>) == gidCMap.end()) {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Classical bit id not found: `&quot;</span> &lt;&lt; <span class="keywordtype">id</span> &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7">ExitCode::EXIT_unknown_resource</a>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> gidCMap.at(<span class="keywordtype">id</span>).key;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ab395508705fe60ed3bd0cfb28eb5ffc6">   49</a></span>&#160;uint32_t <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ab395508705fe60ed3bd0cfb28eb5ffc6">efd::XbitToNumber::getQSize</a>(<a class="code" href="../../d1/d4b/classefd_1_1NDGateDecl.xhtml">NDGateDecl::Ref</a> gate)<span class="keyword"> const </span>{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">auto</span>&amp; map = getQbitMap(gate);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> map.size();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#aee01f34943dd3c3afa794cb45815268f">   54</a></span>&#160;uint32_t <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#aee01f34943dd3c3afa794cb45815268f">efd::XbitToNumber::getCSize</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> gidCMap.size();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a58b4d8cab140b577430f717ba0a9fde8">   58</a></span>&#160;std::string <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a58b4d8cab140b577430f717ba0a9fde8">efd::XbitToNumber::getQStrId</a>(uint32_t <span class="keywordtype">id</span>, <a class="code" href="../../d1/d4b/classefd_1_1NDGateDecl.xhtml">NDGateDecl::Ref</a> gate)<span class="keyword"> const </span>{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">auto</span>&amp; map = getQbitMap(gate);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &gt;= map.size()) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Id trying to access out of bounds value (of `&quot;</span> &lt;&lt; map.size() &lt;&lt; <span class="stringliteral">&quot;`): `&quot;</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            &lt;&lt; <span class="keywordtype">id</span> &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7">ExitCode::EXIT_unknown_resource</a>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = map.begin(), end = map.end(); it != end; ++it) {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">if</span> (it-&gt;second.key == <span class="keywordtype">id</span>) <span class="keywordflow">return</span> it-&gt;first;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    std::string gateId = (gate == <span class="keyword">nullptr</span>) ? <span class="stringliteral">&quot;nullptr&quot;</span> : gate-&gt;<a class="code" href="../../d0/d9e/classefd_1_1NDDecl.xhtml#a34957c2122c38cebf80a264d5fa3863f">getId</a>()-&gt;<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">getVal</a>();</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;UId not found inside gate (`&quot;</span> &lt;&lt; gateId &lt;&lt; <span class="stringliteral">&quot;`): `&quot;</span> &lt;&lt; <span class="keywordtype">id</span> &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7">ExitCode::EXIT_unknown_resource</a>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a629b5b103d95bcdca73b30e8449dc510">   75</a></span>&#160;std::string <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a629b5b103d95bcdca73b30e8449dc510">efd::XbitToNumber::getCStrId</a>(uint32_t <span class="keywordtype">id</span>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &gt;= gidCMap.size()) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Classical bit id not found: `&quot;</span> &lt;&lt; <span class="keywordtype">id</span> &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7">ExitCode::EXIT_unknown_resource</a>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = gidCMap.begin(), end = gidCMap.end(); it != end; ++it) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">if</span> (it-&gt;second.key == <span class="keywordtype">id</span>) <span class="keywordflow">return</span> it-&gt;first;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;UId not found: `&quot;</span> &lt;&lt; <span class="keywordtype">id</span> &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7">ExitCode::EXIT_unknown_resource</a>);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a5ec70df49186af44e04433433bd13090">   89</a></span>&#160;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">efd::Node::Ref</a> <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a5ec70df49186af44e04433433bd13090">efd::XbitToNumber::getQNode</a>(uint32_t <span class="keywordtype">id</span>, <a class="code" href="../../d1/d4b/classefd_1_1NDGateDecl.xhtml">NDGateDecl::Ref</a> gate)<span class="keyword"> const </span>{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">auto</span> str = getQStrId(<span class="keywordtype">id</span>, gate);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">auto</span> map = getQbitMap(gate);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> map.at(str).node.get();</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae80988e23524d7839175a9bf5240599c">   95</a></span>&#160;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">efd::Node::Ref</a> <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae80988e23524d7839175a9bf5240599c">efd::XbitToNumber::getCNode</a>(uint32_t <span class="keywordtype">id</span>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">auto</span> str = getCStrId(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">return</span> gidCMap.at(str).node.get();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">// --------------------- XbitToNumberWrapperPass ------------------------</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;uint8_t <a class="code" href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml#a26520991acaed6cd105036c3275cb37e">efd::XbitToNumberWrapperPass::ID</a> = 0;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a> {</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml">  104</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml">XbitToNumberVisitor</a> : <span class="keyword">public</span> <a class="code" href="../../d8/d5d/classefd_1_1NodeVisitor.xhtml">efd::NodeVisitor</a> {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">efd::XbitToNumber</a>&amp; mXbitToNumber;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml#ac921e86864be36b0242a426ebed7d2ab">  109</a></span>&#160;            <a class="code" href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml#ac921e86864be36b0242a426ebed7d2ab">XbitToNumberVisitor</a>(<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">efd::XbitToNumber</a>&amp; qtn) : mXbitToNumber(qtn) {}</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml#ac652fe08e03b1525f4dc2a7a41b1f4fe">visit</a>(<a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml">efd::NDRegDecl::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml#ac652fe08e03b1525f4dc2a7a41b1f4fe">visit</a>(<a class="code" href="../../d1/d4b/classefd_1_1NDGateDecl.xhtml">efd::NDGateDecl::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    };</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml#ac652fe08e03b1525f4dc2a7a41b1f4fe">  116</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml#ac652fe08e03b1525f4dc2a7a41b1f4fe">efd::XbitToNumberVisitor::visit</a>(<a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml">NDRegDecl::Ref</a> ref) {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    std::string <span class="keywordtype">id</span> = ref-&gt;<a class="code" href="../../d0/d9e/classefd_1_1NDDecl.xhtml#a34957c2122c38cebf80a264d5fa3863f">getId</a>()-&gt;<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">getVal</a>();</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="../../d9/d7a/structefd_1_1WrapperVal.xhtml">IntVal</a> size = ref-&gt;<a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml#aa0cfc2736f15ea67553ea975b3b207f9">getSize</a>()-&gt;<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">getVal</a>();</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    mXbitToNumber.gidRegMap[id] = std::vector&lt;uint32_t&gt;();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">auto</span> mapref = &amp;mXbitToNumber.gidQMap;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">if</span> (ref-&gt;<a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml#a192297c494e1aabc57cd4cd72444e2ff">isCReg</a>()) mapref = &amp;mXbitToNumber.gidCMap;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    uint32_t basen = mapref-&gt;size();</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// For each register declaration, we associate a</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// number to each possible xbit.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// </span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// For example, &#39;qreg q[5];&#39; generates &#39;q[0]&#39;, &#39;q[1]&#39;, ...</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size.<a class="code" href="../../d9/d7a/structefd_1_1WrapperVal.xhtml#abd07b44a2918f50b89b32268c72372c2">mV</a>; ++i) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        std::string key = <span class="keywordtype">id</span> + <span class="stringliteral">&quot;[&quot;</span> + <a class="code" href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a>(i) +<span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keyword">auto</span> ref = <a class="code" href="../../d8/dd2/classefd_1_1NDIdRef.xhtml#a9407354bbb835d0daffbeb30cafc1076">NDIdRef::Create</a>(<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a96ab9dcd008523aa2f4cfc2eb95d7178">NDId::Create</a>(<span class="keywordtype">id</span>), <a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a96ab9dcd008523aa2f4cfc2eb95d7178">NDInt::Create</a>(<a class="code" href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a>(i)));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keyword">auto</span> info = <a class="code" href="../../db/d2b/structefd_1_1XbitToNumber_1_1XbitInfo.xhtml">XbitToNumber::XbitInfo</a> { basen + i, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a5d73093d1b1ab771a2e970412a565f39">toShared</a>(std::move(ref)) };</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        mapref-&gt;insert(std::make_pair(key, info));</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        mXbitToNumber.gidRegMap[id].push_back(basen + i);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml#a0a134111e6faacfdf721b47bf3b54f77">  139</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml#ac652fe08e03b1525f4dc2a7a41b1f4fe">efd::XbitToNumberVisitor::visit</a>(<a class="code" href="../../d1/d4b/classefd_1_1NDGateDecl.xhtml">NDGateDecl::Ref</a> ref) {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">if</span> (mXbitToNumber.lidQMap.find(ref) == mXbitToNumber.lidQMap.end()) {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        mXbitToNumber.lidQMap[ref] = <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ab8b01e93534e95e5faa89004ab8da579">efd::XbitToNumber::XbitMap</a>();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="comment">// Each quantum argument of each quantum gate declaration</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="comment">// will be mapped to a number.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; childRef : *ref-&gt;<a class="code" href="../../db/d1f/classefd_1_1NDGateSign.xhtml#a081605b4c294930734e9d93b34ef85d0">getQArgs</a>()) {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml">NDId::Ref</a> idref = dynCast&lt;NDId&gt;(childRef.get());</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <a class="code" href="../../db/d2b/structefd_1_1XbitToNumber_1_1XbitInfo.xhtml">XbitToNumber::XbitInfo</a> info {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                (uint32_t) mXbitToNumber.lidQMap[ref].size(), <a class="code" href="../../d4/deb/namespaceefd.xhtml#a5d73093d1b1ab771a2e970412a565f39">toShared</a>(idref-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a6c85c9bd21014b73497de741cc75f706">clone</a>())</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            };</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            mXbitToNumber.lidQMap[ref][idref-&gt;<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">getVal</a>()] = info;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml#a548fc1042fd63e8af500bf9d87a28e11">  157</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml#a548fc1042fd63e8af500bf9d87a28e11">efd::XbitToNumberWrapperPass::run</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod) {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    mData.gidCMap.clear();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    mData.gidQMap.clear();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    mData.lidQMap.clear();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml">XbitToNumberVisitor</a> visitor(mData);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a06eca2b18de495ccb1bb7dae6dafd997">reg_begin</a>(), e = qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a9f18c4d27fb850ad0f66724b1f01b11b">reg_end</a>(); it != e; ++it) {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        (*it)-&gt;apply(&amp;visitor);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#af560135001f7e189109fdd5330f1908f">gates_begin</a>(), e = qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a674bb9ce9b51f508600c30ad781d8af3">gates_end</a>(); it != e; ++it) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        (*it)-&gt;apply(&amp;visitor);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml#ad227984847d4e10f0f7eb75e20705544">  175</a></span>&#160;<a class="code" href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml#a14eca77c3faa6a3b343d24db4f6b64d2">efd::XbitToNumberWrapperPass::uRef</a> <a class="code" href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml#ad227984847d4e10f0f7eb75e20705544">efd::XbitToNumberWrapperPass::Create</a>() {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml#a14eca77c3faa6a3b343d24db4f6b64d2">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml">XbitToNumberWrapperPass</a>());</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div><div class="ttc" id="classefd_1_1XbitToNumberWrapperPass_xhtml"><div class="ttname"><a href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml">efd::XbitToNumberWrapperPass</a></div><div class="ttdoc">WrapperPass that yields a XbitToNumber structure. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d94/XbitToNumberPass_8h_source.xhtml#l00069">XbitToNumberPass.h:69</a></div></div>
<div class="ttc" id="classefd_1_1XbitToNumberVisitor_xhtml_ac921e86864be36b0242a426ebed7d2ab"><div class="ttname"><a href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml#ac921e86864be36b0242a426ebed7d2ab">efd::XbitToNumberVisitor::XbitToNumberVisitor</a></div><div class="ttdeci">XbitToNumberVisitor(efd::XbitToNumber &amp;qtn)</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00109">XbitToNumberPass.cpp:109</a></div></div>
<div class="ttc" id="classefd_1_1NodeVisitor_xhtml"><div class="ttname"><a href="../../d8/d5d/classefd_1_1NodeVisitor.xhtml">efd::NodeVisitor</a></div><div class="ttdoc">Interface class to be used as a visitor. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d8d/NodeVisitor_8h_source.xhtml#l00009">NodeVisitor.h:9</a></div></div>
<div class="ttc" id="classefd_1_1NDGateSign_xhtml_a081605b4c294930734e9d93b34ef85d0"><div class="ttname"><a href="../../db/d1f/classefd_1_1NDGateSign.xhtml#a081605b4c294930734e9d93b34ef85d0">efd::NDGateSign::getQArgs</a></div><div class="ttdeci">NDList::Ref getQArgs() const</div><div class="ttdoc">Gets the qargs node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00742">Nodes.cpp:742</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="XbitToNumberPass_8h_xhtml"><div class="ttname"><a href="../../d6/d94/XbitToNumberPass_8h.xhtml">XbitToNumberPass.h</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a674bb9ce9b51f508600c30ad781d8af3"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a674bb9ce9b51f508600c30ad781d8af3">efd::QModule::gates_end</a></div><div class="ttdeci">GateIterator gates_end()</div><div class="ttdoc">Iterator to the end of the gate declaration node vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00210">QModule.cpp:210</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_ab395508705fe60ed3bd0cfb28eb5ffc6"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ab395508705fe60ed3bd0cfb28eb5ffc6">efd::XbitToNumber::getQSize</a></div><div class="ttdeci">uint32_t getQSize(NDGateDecl::Ref gate=nullptr) const</div><div class="ttdoc">Returns the number of qbits in a given gate (if any). </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00049">XbitToNumberPass.cpp:49</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a6c85c9bd21014b73497de741cc75f706"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a6c85c9bd21014b73497de741cc75f706">efd::Node::clone</a></div><div class="ttdeci">Node::uRef clone() const</div><div class="ttdoc">Clones the current node (deep copy). </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00114">Nodes.cpp:114</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="classefd_1_1XbitToNumberWrapperPass_xhtml_ad227984847d4e10f0f7eb75e20705544"><div class="ttname"><a href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml#ad227984847d4e10f0f7eb75e20705544">efd::XbitToNumberWrapperPass::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdoc">Returns a new instance of this class. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00175">XbitToNumberPass.cpp:175</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_af560135001f7e189109fdd5330f1908f"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#af560135001f7e189109fdd5330f1908f">efd::QModule::gates_begin</a></div><div class="ttdeci">GateIterator gates_begin()</div><div class="ttdoc">Iterator to the beginning of the gate declaration node vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00202">QModule.cpp:202</a></div></div>
<div class="ttc" id="classefd_1_1XbitToNumberWrapperPass_xhtml_a548fc1042fd63e8af500bf9d87a28e11"><div class="ttname"><a href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml#a548fc1042fd63e8af500bf9d87a28e11">efd::XbitToNumberWrapperPass::run</a></div><div class="ttdeci">bool run(QModule::Ref qmod) override</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00157">XbitToNumberPass.cpp:157</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_aee01f34943dd3c3afa794cb45815268f"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#aee01f34943dd3c3afa794cb45815268f">efd::XbitToNumber::getCSize</a></div><div class="ttdeci">uint32_t getCSize() const</div><div class="ttdoc">Returns the number of cbits in a given gate (if any). </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00054">XbitToNumberPass.cpp:54</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a9f18c4d27fb850ad0f66724b1f01b11b"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a9f18c4d27fb850ad0f66724b1f01b11b">efd::QModule::reg_end</a></div><div class="ttdeci">RegIterator reg_end()</div><div class="ttdoc">Iterator to the end of the register node vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00194">QModule.cpp:194</a></div></div>
<div class="ttc" id="classefd_1_1XbitToNumberVisitor_xhtml"><div class="ttname"><a href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml">efd::XbitToNumberVisitor</a></div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00104">XbitToNumberPass.cpp:104</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml">efd::QModule</a></div><div class="ttdoc">Qasm module representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00013">QModule.h:13</a></div></div>
<div class="ttc" id="classefd_1_1NDRegDecl_xhtml_aa0cfc2736f15ea67553ea975b3b207f9"><div class="ttname"><a href="../../da/d97/classefd_1_1NDRegDecl.xhtml#aa0cfc2736f15ea67553ea975b3b207f9">efd::NDRegDecl::getSize</a></div><div class="ttdeci">NDInt::Ref getSize() const</div><div class="ttdoc">Gets the size node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00219">Nodes.cpp:219</a></div></div>
<div class="ttc" id="classefd_1_1NDRegDecl_xhtml_a192297c494e1aabc57cd4cd72444e2ff"><div class="ttname"><a href="../../da/d97/classefd_1_1NDRegDecl.xhtml#a192297c494e1aabc57cd4cd72444e2ff">efd::NDRegDecl::isCReg</a></div><div class="ttdeci">bool isCReg() const</div><div class="ttdoc">Returns true if it is a concrete register declaration. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00227">Nodes.cpp:227</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_a5ec70df49186af44e04433433bd13090"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a5ec70df49186af44e04433433bd13090">efd::XbitToNumber::getQNode</a></div><div class="ttdeci">Node::Ref getQNode(uint32_t id, NDGateDecl::Ref gate=nullptr) const</div><div class="ttdoc">Get a Node::Ref, representing that qbit. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00089">XbitToNumberPass.cpp:89</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_a58b4d8cab140b577430f717ba0a9fde8"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a58b4d8cab140b577430f717ba0a9fde8">efd::XbitToNumber::getQStrId</a></div><div class="ttdeci">std::string getQStrId(uint32_t id, NDGateDecl::Ref gate=nullptr) const</div><div class="ttdoc">Returns the std::string id representation of the corresponding qubit, represented by uint32_t id in t...</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00058">XbitToNumberPass.cpp:58</a></div></div>
<div class="ttc" id="classefd_1_1NDIdRef_xhtml_a9407354bbb835d0daffbeb30cafc1076"><div class="ttname"><a href="../../d8/dd2/classefd_1_1NDIdRef.xhtml#a9407354bbb835d0daffbeb30cafc1076">efd::NDIdRef::Create</a></div><div class="ttdeci">static uRef Create(NDId::uRef idNode, NDInt::uRef nNode)</div><div class="ttdoc">Creates a new instance of this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00330">Nodes.cpp:330</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">efd::XbitToNumber</a></div><div class="ttdoc">Maps every quantum and classic bit (not register) to a number inside a vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d94/XbitToNumberPass_8h_source.xhtml#l00023">XbitToNumberPass.h:23</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="RTTI_8h_xhtml"><div class="ttname"><a href="../../d5/dfc/RTTI_8h.xhtml">RTTI.h</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_a05c05b2ff5664fb65306275d94799feb"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a05c05b2ff5664fb65306275d94799feb">efd::XbitToNumber::lidQMap</a></div><div class="ttdeci">std::unordered_map&lt; NDGateDecl *, XbitMap &gt; lidQMap</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d94/XbitToNumberPass_8h_source.xhtml#l00032">XbitToNumberPass.h:32</a></div></div>
<div class="ttc" id="classefd_1_1NDDecl_xhtml_a34957c2122c38cebf80a264d5fa3863f"><div class="ttname"><a href="../../d0/d9e/classefd_1_1NDDecl.xhtml#a34957c2122c38cebf80a264d5fa3863f">efd::NDDecl::getId</a></div><div class="ttdeci">NDId::Ref getId() const</div><div class="ttdoc">Gets the id node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00186">Nodes.cpp:186</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a06eca2b18de495ccb1bb7dae6dafd997"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a06eca2b18de495ccb1bb7dae6dafd997">efd::QModule::reg_begin</a></div><div class="ttdeci">RegIterator reg_begin()</div><div class="ttdoc">Iterator to the beginning of the register node vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00186">QModule.cpp:186</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml">efd::Node</a></div><div class="ttdoc">Base class for AST nodes. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00039">Nodes.h:39</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_ae80988e23524d7839175a9bf5240599c"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae80988e23524d7839175a9bf5240599c">efd::XbitToNumber::getCNode</a></div><div class="ttdeci">Node::Ref getCNode(uint32_t id) const</div><div class="ttdoc">Get a Node::Ref, representing that cbit. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00095">XbitToNumberPass.cpp:95</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_a7d9474b325920d98f5832d5f1923ba2b"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a7d9474b325920d98f5832d5f1923ba2b">efd::XbitToNumber::getQbitMap</a></div><div class="ttdeci">const XbitMap &amp; getQbitMap(NDGateDecl::Ref gate=nullptr) const</div><div class="ttdoc">Gets a constant reference to the mapping of qubtis of a gate. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00011">XbitToNumberPass.cpp:11</a></div></div>
<div class="ttc" id="classefd_1_1NDGateDecl_xhtml"><div class="ttname"><a href="../../d1/d4b/classefd_1_1NDGateDecl.xhtml">efd::NDGateDecl</a></div><div class="ttdoc">Node for declaration of quantum gates. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00543">Nodes.h:543</a></div></div>
<div class="ttc" id="NodeVisitor_8h_xhtml"><div class="ttname"><a href="../../d0/d8d/NodeVisitor_8h.xhtml">NodeVisitor.h</a></div></div>
<div class="ttc" id="classefd_1_1XbitToNumberVisitor_xhtml_ac652fe08e03b1525f4dc2a7a41b1f4fe"><div class="ttname"><a href="../../d3/d66/classefd_1_1XbitToNumberVisitor.xhtml#ac652fe08e03b1525f4dc2a7a41b1f4fe">efd::XbitToNumberVisitor::visit</a></div><div class="ttdeci">void visit(efd::NDRegDecl::Ref ref) override</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00116">XbitToNumberPass.cpp:116</a></div></div>
<div class="ttc" id="classefd_1_1NDValue_xhtml_a53ee724a8db3429bf30bb1936ad548b2"><div class="ttname"><a href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">efd::NDValue::getVal</a></div><div class="ttdeci">T getVal() const</div><div class="ttdoc">Returns a copy to the setted value. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l01023">Nodes.h:1023</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7">efd::ExitCode::EXIT_unknown_resource</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_aa3dc820bf243cb3f06c6e6155e853888"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#aa3dc820bf243cb3f06c6e6155e853888">efd::XbitToNumber::getRegUIds</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; getRegUIds(std::string id) const</div><div class="ttdoc">Returns a list of uids that relate to a given register. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00021">XbitToNumberPass.cpp:21</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_a629b5b103d95bcdca73b30e8449dc510"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a629b5b103d95bcdca73b30e8449dc510">efd::XbitToNumber::getCStrId</a></div><div class="ttdeci">std::string getCStrId(uint32_t id) const</div><div class="ttdoc">Returns the std::string id representation of the corresponding classic bit, represented by id...</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00075">XbitToNumberPass.cpp:75</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_a66f71dcba0aa2ceeeabeb69196bd8191"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#a66f71dcba0aa2ceeeabeb69196bd8191">efd::XbitToNumber::gidQMap</a></div><div class="ttdeci">XbitMap gidQMap</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d94/XbitToNumberPass_8h_source.xhtml#l00033">XbitToNumberPass.h:33</a></div></div>
<div class="ttc" id="classefd_1_1XbitToNumberWrapperPass_xhtml_a14eca77c3faa6a3b343d24db4f6b64d2"><div class="ttname"><a href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml#a14eca77c3faa6a3b343d24db4f6b64d2">efd::XbitToNumberWrapperPass::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; XbitToNumberWrapperPass &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d94/XbitToNumberPass_8h_source.xhtml#l00072">XbitToNumberPass.h:72</a></div></div>
<div class="ttc" id="classefd_1_1NDValue_xhtml"><div class="ttname"><a href="../../df/d1b/classefd_1_1NDValue.xhtml">efd::NDValue</a></div><div class="ttdoc">Node for literal types. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00164">Nodes.h:164</a></div></div>
<div class="ttc" id="classefd_1_1XbitToNumberWrapperPass_xhtml_a26520991acaed6cd105036c3275cb37e"><div class="ttname"><a href="../../de/d2b/classefd_1_1XbitToNumberWrapperPass.xhtml#a26520991acaed6cd105036c3275cb37e">efd::XbitToNumberWrapperPass::ID</a></div><div class="ttdeci">static uint8_t ID</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d94/XbitToNumberPass_8h_source.xhtml#l00075">XbitToNumberPass.h:75</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a5d73093d1b1ab771a2e970412a565f39"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a5d73093d1b1ab771a2e970412a565f39">efd::toShared</a></div><div class="ttdeci">std::shared_ptr&lt; T &gt; toShared(std::unique_ptr&lt; T &gt; from)</div><div class="ttdoc">Wrapper function that &quot;transforms&quot; a std::unique_ptr into a std::shared_ptr. </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d09/uRefCast_8h_source.xhtml#l00057">uRefCast.h:57</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_1_1XbitInfo_xhtml"><div class="ttname"><a href="../../db/d2b/structefd_1_1XbitToNumber_1_1XbitInfo.xhtml">efd::XbitToNumber::XbitInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d94/XbitToNumberPass_8h_source.xhtml#l00024">XbitToNumberPass.h:24</a></div></div>
<div class="ttc" id="structefd_1_1WrapperVal_xhtml"><div class="ttname"><a href="../../d9/d7a/structefd_1_1WrapperVal.xhtml">efd::WrapperVal</a></div><div class="ttdoc">Wrapper for primitive values. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d2e/WrapperVal_8h_source.xhtml#l00013">WrapperVal.h:13</a></div></div>
<div class="ttc" id="uRefCast_8h_xhtml"><div class="ttname"><a href="../../dc/d09/uRefCast_8h.xhtml">uRefCast.h</a></div></div>
<div class="ttc" id="Defs_8h_xhtml"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml">Defs.h</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_ab8b01e93534e95e5faa89004ab8da579"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ab8b01e93534e95e5faa89004ab8da579">efd::XbitToNumber::XbitMap</a></div><div class="ttdeci">std::map&lt; std::string, XbitInfo &gt; XbitMap</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d94/XbitToNumberPass_8h_source.xhtml#l00029">XbitToNumberPass.h:29</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_ae645e4b0ccb9c25c534883843484f06a"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">efd::XbitToNumber::getQUId</a></div><div class="ttdeci">uint32_t getQUId(std::string id, NDGateDecl::Ref gate=nullptr) const</div><div class="ttdoc">Returns an uint32_t number representing the qubit in this specific gate (if any). ...</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00030">XbitToNumberPass.cpp:30</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a76fb98cd4a35566d53c2f0513c5d12d1"><div class="ttname"><a href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a></div><div class="ttdeci">string to_string(efd::EnumString&lt; T, first, last &gt; &amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d62/EnumString_8h_source.xhtml#l00053">EnumString.h:53</a></div></div>
<div class="ttc" id="classefd_1_1NDRegDecl_xhtml"><div class="ttname"><a href="../../da/d97/classefd_1_1NDRegDecl.xhtml">efd::NDRegDecl</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00245">Nodes.h:245</a></div></div>
<div class="ttc" id="classefd_1_1NDValue_xhtml_a96ab9dcd008523aa2f4cfc2eb95d7178"><div class="ttname"><a href="../../df/d1b/classefd_1_1NDValue.xhtml#a96ab9dcd008523aa2f4cfc2eb95d7178">efd::NDValue::Create</a></div><div class="ttdeci">static uRef Create(T val)</div><div class="ttdoc">Creates a new instance of this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l01055">Nodes.h:1055</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_ae9f84f1119a80e918cc3b3fd916a5922"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae9f84f1119a80e918cc3b3fd916a5922">efd::XbitToNumber::getCUId</a></div><div class="ttdeci">uint32_t getCUId(std::string id) const</div><div class="ttdoc">Returns an uint32_t number representing the classic bit;. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00041">XbitToNumberPass.cpp:41</a></div></div>
<div class="ttc" id="structefd_1_1WrapperVal_xhtml_abd07b44a2918f50b89b32268c72372c2"><div class="ttname"><a href="../../d9/d7a/structefd_1_1WrapperVal.xhtml#abd07b44a2918f50b89b32268c72372c2">efd::WrapperVal::mV</a></div><div class="ttdeci">T mV</div><div class="ttdoc">The static representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d2e/WrapperVal_8h_source.xhtml#l00015">WrapperVal.h:15</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
