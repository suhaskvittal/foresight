<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/Allocators/BMT/ImprovedBMTQAllocatorImpl.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li><li class="navelem"><a class="el" href="../../dir_06974191db7fbe66527a95ceac77ccfb.xhtml">Allocators</a></li><li class="navelem"><a class="el" href="../../dir_4e1c057fba7592260fc9a25a8dee270f.xhtml">BMT</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ImprovedBMTQAllocatorImpl.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../de/db6/ImprovedBMTQAllocatorImpl_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d3/de5/ImprovedBMTQAllocatorImpl_8h.xhtml">enfield/Transform/Allocators/BMT/ImprovedBMTQAllocatorImpl.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d8/d9b/CircuitGraphBuilderPass_8h.xhtml">enfield/Transform/CircuitGraphBuilderPass.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/d82/PassCache_8h.xhtml">enfield/Transform/PassCache.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">using namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">using namespace </span>bmt;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// --------------------- CircuitCandidatesGenerator ------------------------</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keywordtype">void</span> CircuitCandidatesGenerator::advanceXbitId(uint32_t i) {</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    mIt.next(i);</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    ++mReached[mIt.get(i)];</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;}</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keywordtype">void</span> CircuitCandidatesGenerator::advanceCNode(<a class="code" href="../../d9/dbc/structefd_1_1CircuitGraph_1_1CircuitNode.xhtml">CircuitGraph::CircuitNode::Ref</a> cnode) {</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keywordtype">id</span> : cnode-&gt;<a class="code" href="../../d9/dbc/structefd_1_1CircuitGraph_1_1CircuitNode.xhtml#a16133f502839323279d0caa970d5ae58">getXbitsId</a>()) {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        advanceXbitId(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    }</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;}</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a746f7be4d5631528e8369b6a13451da8">   23</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a746f7be4d5631528e8369b6a13451da8">CircuitCandidatesGenerator::initializeImpl</a>() {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    mCGraph = PassCache::Get&lt;CircuitGraphBuilderPass&gt;(mMod)-&gt;getData();</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    mIt = mCGraph.build_iterator();</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    mXbitSize = mCGraph.size();</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; mXbitSize; ++i) {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        advanceXbitId(i);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#aed862b9f0207679bc52eed39076bb3f2">   33</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#aed862b9f0207679bc52eed39076bb3f2">CircuitCandidatesGenerator::finishedImpl</a>() {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; mXbitSize; ++i)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">if</span> (!mIt[i]-&gt;isOutputNode())</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a46b453b1ff438e9bcf6ffe44d93b2295">   40</a></span>&#160;std::vector&lt;Node::Ref&gt; <a class="code" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a46b453b1ff438e9bcf6ffe44d93b2295">CircuitCandidatesGenerator::generateImpl</a>() {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    std::set&lt;Node::Ref&gt; nodeCandidateSet;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; mXbitSize; ++i) {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keyword">auto</span> cnode = mIt[i];</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keyword">auto</span> node = cnode-&gt;<a class="code" href="../../d9/dbc/structefd_1_1CircuitGraph_1_1CircuitNode.xhtml#a748e8cd12225a2d0268e84979726cd03">node</a>();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">if</span> (mReached[node] == cnode-&gt;<a class="code" href="../../d9/dbc/structefd_1_1CircuitGraph_1_1CircuitNode.xhtml#acdd2fff3b8fbce45bf0fd84efab71ab1">numberOfXbits</a>()) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            nodeCandidateSet.insert(node);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            mNCNMap[node] = cnode.get();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> std::vector&lt;Node::Ref&gt;(nodeCandidateSet.begin(), nodeCandidateSet.end());</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a843e0803d5f839c6ca5f3dcb8be05ff6">   56</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a843e0803d5f839c6ca5f3dcb8be05ff6">CircuitCandidatesGenerator::signalProcessed</a>(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> node) {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">auto</span> cnode = mNCNMap[node];</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    mNCNMap.erase(node);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    mReached.erase(node);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    advanceCNode(cnode);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a639d2a4557f967229b66f3a9218acae7">   63</a></span>&#160;<a class="code" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#af60d74c1f7df63612acda931ce472ca1">CircuitCandidatesGenerator::uRef</a> <a class="code" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a639d2a4557f967229b66f3a9218acae7">CircuitCandidatesGenerator::Create</a>() {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#af60d74c1f7df63612acda931ce472ca1">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d1/d9a/Allocators_8def.xhtml#a6eac9b00e7f8d5daefb167908263c85f">CircuitCandidatesGenerator</a>());</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">// --------------------- WeightedRouletteCandidateSelector ------------------------</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;WeightedRouletteCandidateSelector::WeightedRouletteCandidateSelector()</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    : mGen((<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::random_device())()), mDist(0.0) {}</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="../../d1/ddf/classefd_1_1WeightedRouletteCandidateSelector.xhtml#a793684bd3467376978cc7f273b9587a7">   71</a></span>&#160;<a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a> <a class="code" href="../../d1/ddf/classefd_1_1WeightedRouletteCandidateSelector.xhtml#a793684bd3467376978cc7f273b9587a7">WeightedRouletteCandidateSelector::select</a>(uint32_t maxCandidates,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a>&amp; candidates) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    uint32_t selectionNumber = std::min(maxCandidates, (uint32_t) candidates.size());</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    uint32_t deletedW = 0;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    uint32_t sqSum = 0;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    uint32_t wSum = 0;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a> selected;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    std::vector&lt;uint32_t&gt; weight;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::vector&lt;bool&gt; wasSelected(candidates.size(), <span class="keyword">false</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">if</span> (selectionNumber == (uint32_t) candidates.size())</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> candidates;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; cand : candidates) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        sqSum += (cand.cost * cand.cost);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span> (sqSum == 0) {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        weight.assign(candidates.size(), 1);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; cand : candidates) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            weight.push_back(sqSum - (cand.cost * cand.cost));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> w : weight) {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        wSum += w;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; selectionNumber; ++i) {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordtype">double</span> r = mDist(mGen);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordtype">double</span> cummulativeProbability = 0;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        uint32_t j = 0;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">while</span> (cummulativeProbability &lt; r &amp;&amp; j &lt; weight.size()) {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">if</span> (!wasSelected[j]) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                cummulativeProbability += (double) weight[j] / ((<span class="keywordtype">double</span>) wSum - deletedW);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            ++j;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        --j;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        wSum -= deletedW;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        deletedW = weight[j];</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        wasSelected[j] = <span class="keyword">true</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        selected.push_back(candidates[j]);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> selected;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="../../d1/ddf/classefd_1_1WeightedRouletteCandidateSelector.xhtml#abbd94c8f822adabf519c75aa707fd924">  125</a></span>&#160;<a class="code" href="../../d1/ddf/classefd_1_1WeightedRouletteCandidateSelector.xhtml#abc841e36012e32e732c9494f5942eb4a">WeightedRouletteCandidateSelector::uRef</a> <a class="code" href="../../d1/ddf/classefd_1_1WeightedRouletteCandidateSelector.xhtml#abbd94c8f822adabf519c75aa707fd924">WeightedRouletteCandidateSelector::Create</a>() {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/ddf/classefd_1_1WeightedRouletteCandidateSelector.xhtml#abc841e36012e32e732c9494f5942eb4a">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d1/ddf/classefd_1_1WeightedRouletteCandidateSelector.xhtml">WeightedRouletteCandidateSelector</a>());</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="ttc" id="classefd_1_1CircuitCandidatesGenerator_xhtml_aed862b9f0207679bc52eed39076bb3f2"><div class="ttname"><a href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#aed862b9f0207679bc52eed39076bb3f2">efd::CircuitCandidatesGenerator::finishedImpl</a></div><div class="ttdeci">bool finishedImpl() override</div><div class="ttdef"><b>Definition:</b> <a href="../../de/db6/ImprovedBMTQAllocatorImpl_8cpp_source.xhtml#l00033">ImprovedBMTQAllocatorImpl.cpp:33</a></div></div>
<div class="ttc" id="structefd_1_1CircuitGraph_1_1CircuitNode_xhtml_acdd2fff3b8fbce45bf0fd84efab71ab1"><div class="ttname"><a href="../../d9/dbc/structefd_1_1CircuitGraph_1_1CircuitNode.xhtml#acdd2fff3b8fbce45bf0fd84efab71ab1">efd::CircuitGraph::CircuitNode::numberOfXbits</a></div><div class="ttdeci">uint32_t numberOfXbits()</div><div class="ttdoc">Returns the number of Xbit&amp;#39;s in this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dce/CircuitGraph_8cpp_source.xhtml#l00074">CircuitGraph.cpp:74</a></div></div>
<div class="ttc" id="classefd_1_1CircuitCandidatesGenerator_xhtml_a639d2a4557f967229b66f3a9218acae7"><div class="ttname"><a href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a639d2a4557f967229b66f3a9218acae7">efd::CircuitCandidatesGenerator::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdef"><b>Definition:</b> <a href="../../de/db6/ImprovedBMTQAllocatorImpl_8cpp_source.xhtml#l00063">ImprovedBMTQAllocatorImpl.cpp:63</a></div></div>
<div class="ttc" id="classefd_1_1WeightedRouletteCandidateSelector_xhtml"><div class="ttname"><a href="../../d1/ddf/classefd_1_1WeightedRouletteCandidateSelector.xhtml">efd::WeightedRouletteCandidateSelector</a></div><div class="ttdoc">Selects the candidates randomly, based on their cost. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/de5/ImprovedBMTQAllocatorImpl_8h_source.xhtml#l00066">ImprovedBMTQAllocatorImpl.h:66</a></div></div>
<div class="ttc" id="classefd_1_1CircuitCandidatesGenerator_xhtml_a843e0803d5f839c6ca5f3dcb8be05ff6"><div class="ttname"><a href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a843e0803d5f839c6ca5f3dcb8be05ff6">efd::CircuitCandidatesGenerator::signalProcessed</a></div><div class="ttdeci">void signalProcessed(Node::Ref node) override</div><div class="ttdoc">Signals the generator which node has been selected. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/db6/ImprovedBMTQAllocatorImpl_8cpp_source.xhtml#l00056">ImprovedBMTQAllocatorImpl.cpp:56</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="classefd_1_1WeightedRouletteCandidateSelector_xhtml_a793684bd3467376978cc7f273b9587a7"><div class="ttname"><a href="../../d1/ddf/classefd_1_1WeightedRouletteCandidateSelector.xhtml#a793684bd3467376978cc7f273b9587a7">efd::WeightedRouletteCandidateSelector::select</a></div><div class="ttdeci">bmt::MCandidateVector select(uint32_t maxCandidates, const bmt::MCandidateVector &amp;candidates) override</div><div class="ttdoc">Selects maxCandidates from candidates. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/db6/ImprovedBMTQAllocatorImpl_8cpp_source.xhtml#l00071">ImprovedBMTQAllocatorImpl.cpp:71</a></div></div>
<div class="ttc" id="ImprovedBMTQAllocatorImpl_8h_xhtml"><div class="ttname"><a href="../../d3/de5/ImprovedBMTQAllocatorImpl_8h.xhtml">ImprovedBMTQAllocatorImpl.h</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="../../d8/dcc/namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d62/EnumString_8h_source.xhtml#l00051">EnumString.h:51</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml">efd::Node</a></div><div class="ttdoc">Base class for AST nodes. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00039">Nodes.h:39</a></div></div>
<div class="ttc" id="classefd_1_1CircuitCandidatesGenerator_xhtml_a46b453b1ff438e9bcf6ffe44d93b2295"><div class="ttname"><a href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a46b453b1ff438e9bcf6ffe44d93b2295">efd::CircuitCandidatesGenerator::generateImpl</a></div><div class="ttdeci">std::vector&lt; Node::Ref &gt; generateImpl() override</div><div class="ttdef"><b>Definition:</b> <a href="../../de/db6/ImprovedBMTQAllocatorImpl_8cpp_source.xhtml#l00040">ImprovedBMTQAllocatorImpl.cpp:40</a></div></div>
<div class="ttc" id="structefd_1_1CircuitGraph_1_1CircuitNode_xhtml"><div class="ttname"><a href="../../d9/dbc/structefd_1_1CircuitGraph_1_1CircuitNode.xhtml">efd::CircuitGraph::CircuitNode</a></div><div class="ttdoc">Representation of a quantum operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/da6/CircuitGraph_8h_source.xhtml#l00041">CircuitGraph.h:41</a></div></div>
<div class="ttc" id="structefd_1_1CircuitGraph_1_1CircuitNode_xhtml_a16133f502839323279d0caa970d5ae58"><div class="ttname"><a href="../../d9/dbc/structefd_1_1CircuitGraph_1_1CircuitNode.xhtml#a16133f502839323279d0caa970d5ae58">efd::CircuitGraph::CircuitNode::getXbitsId</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; getXbitsId()</div><div class="ttdoc">Returns the Xbit ids in this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dce/CircuitGraph_8cpp_source.xhtml#l00099">CircuitGraph.cpp:99</a></div></div>
<div class="ttc" id="PassCache_8h_xhtml"><div class="ttname"><a href="../../db/d82/PassCache_8h.xhtml">PassCache.h</a></div></div>
<div class="ttc" id="CircuitGraphBuilderPass_8h_xhtml"><div class="ttname"><a href="../../d8/d9b/CircuitGraphBuilderPass_8h.xhtml">CircuitGraphBuilderPass.h</a></div></div>
<div class="ttc" id="classefd_1_1CircuitCandidatesGenerator_xhtml_a746f7be4d5631528e8369b6a13451da8"><div class="ttname"><a href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#a746f7be4d5631528e8369b6a13451da8">efd::CircuitCandidatesGenerator::initializeImpl</a></div><div class="ttdeci">void initializeImpl() override</div><div class="ttdef"><b>Definition:</b> <a href="../../de/db6/ImprovedBMTQAllocatorImpl_8cpp_source.xhtml#l00023">ImprovedBMTQAllocatorImpl.cpp:23</a></div></div>
<div class="ttc" id="namespaceefd_1_1bmt_xhtml_a5b3384851faf32cfe58e9eaf0c44a2e7"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">efd::bmt::MCandidateVector</a></div><div class="ttdeci">std::vector&lt; MappingCandidate &gt; MCandidateVector</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00042">BoundedMappingTreeQAllocator.h:42</a></div></div>
<div class="ttc" id="Allocators_8def_xhtml_a6eac9b00e7f8d5daefb167908263c85f"><div class="ttname"><a href="../../d1/d9a/Allocators_8def.xhtml#a6eac9b00e7f8d5daefb167908263c85f">CircuitCandidatesGenerator</a></div><div class="ttdeci">CircuitCandidatesGenerator</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d9a/Allocators_8def_source.xhtml#l00011">Allocators.def:11</a></div></div>
<div class="ttc" id="classefd_1_1WeightedRouletteCandidateSelector_xhtml_abc841e36012e32e732c9494f5942eb4a"><div class="ttname"><a href="../../d1/ddf/classefd_1_1WeightedRouletteCandidateSelector.xhtml#abc841e36012e32e732c9494f5942eb4a">efd::WeightedRouletteCandidateSelector::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; WeightedRouletteCandidateSelector &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/de5/ImprovedBMTQAllocatorImpl_8h_source.xhtml#l00069">ImprovedBMTQAllocatorImpl.h:69</a></div></div>
<div class="ttc" id="structefd_1_1CircuitGraph_1_1CircuitNode_xhtml_a748e8cd12225a2d0268e84979726cd03"><div class="ttname"><a href="../../d9/dbc/structefd_1_1CircuitGraph_1_1CircuitNode.xhtml#a748e8cd12225a2d0268e84979726cd03">efd::CircuitGraph::CircuitNode::node</a></div><div class="ttdeci">Node::Ref node()</div><div class="ttdoc">Returns the Node::Ref associated with this circuit node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dce/CircuitGraph_8cpp_source.xhtml#l00070">CircuitGraph.cpp:70</a></div></div>
<div class="ttc" id="classefd_1_1WeightedRouletteCandidateSelector_xhtml_abbd94c8f822adabf519c75aa707fd924"><div class="ttname"><a href="../../d1/ddf/classefd_1_1WeightedRouletteCandidateSelector.xhtml#abbd94c8f822adabf519c75aa707fd924">efd::WeightedRouletteCandidateSelector::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdef"><b>Definition:</b> <a href="../../de/db6/ImprovedBMTQAllocatorImpl_8cpp_source.xhtml#l00125">ImprovedBMTQAllocatorImpl.cpp:125</a></div></div>
<div class="ttc" id="classefd_1_1CircuitCandidatesGenerator_xhtml_af60d74c1f7df63612acda931ce472ca1"><div class="ttname"><a href="../../d1/d88/classefd_1_1CircuitCandidatesGenerator.xhtml#af60d74c1f7df63612acda931ce472ca1">efd::CircuitCandidatesGenerator::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; CircuitCandidatesGenerator &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/de5/ImprovedBMTQAllocatorImpl_8h_source.xhtml#l00044">ImprovedBMTQAllocatorImpl.h:44</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
