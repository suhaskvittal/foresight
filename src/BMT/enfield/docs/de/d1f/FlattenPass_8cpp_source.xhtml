<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/FlattenPass.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">FlattenPass.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../de/d1f/FlattenPass_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d6/da6/FlattenPass_8h.xhtml">enfield/Transform/FlattenPass.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d0/d8d/NodeVisitor_8h.xhtml">enfield/Analysis/NodeVisitor.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d5/dfc/RTTI_8h.xhtml">enfield/Support/RTTI.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/d09/uRefCast_8h.xhtml">enfield/Support/uRefCast.h</a>&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">using namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a> {</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    <span class="keyword">class </span><a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml">FlattenVisitor</a>;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;}</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">static</span> <span class="keywordtype">bool</span> IsIdRef(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref);</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">static</span> <span class="keywordtype">bool</span> IsId(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref);</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">static</span> <span class="keywordtype">bool</span> HasAnyNDIdChild(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref);</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">static</span> <a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml">NDRegDecl::Ref</a> GetDeclFromId(<span class="keyword">const</span> <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod, <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref);</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">static</span> uint32_t GetIdDeclSize(<span class="keyword">const</span> <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod, <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref);</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">static</span> std::vector&lt;NDIdRef::uRef&gt; ToIdRef(<span class="keyword">const</span> <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod, <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref, uint32_t max);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">static</span> std::vector&lt;std::vector&lt;NDIdRef::uRef&gt;&gt;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;GetFlattenedOpsArgs(<span class="keyword">const</span> <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod, std::vector&lt;Node::Ref&gt; qcargs);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">static</span> <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">Node::uRef</a> WrapWithIfStmt(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ifnode, <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">Node::uRef</a> node);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> FlattenVisitQOperation(<a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml">FlattenVisitor</a>* visitor, <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ifstmt, <a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a> ref);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;uint8_t <a class="code" href="../../d8/df2/classefd_1_1FlattenPass.xhtml#adab3ab9965a35d39b77ec7872d9ef46f">efd::FlattenPass::ID</a> = 0;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a> {</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml">   30</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml">FlattenVisitor</a> : <span class="keyword">public</span> <a class="code" href="../../d8/d5d/classefd_1_1NodeVisitor.xhtml">NodeVisitor</a> {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule</a>&amp; mMod;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> mIf;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#acfc065fe4bdcb9b3d7659b4db1cfb54a">   36</a></span>&#160;            std::unordered_map&lt;Node::Ref, std::vector&lt;Node::uRef&gt;&gt; <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#acfc065fe4bdcb9b3d7659b4db1cfb54a">mRepMap</a>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#a6ea929e0dbe236c3145cb5e85042b524">   38</a></span>&#160;            <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#a6ea929e0dbe236c3145cb5e85042b524">FlattenVisitor</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule</a>&amp; qmod) : mMod(qmod), mIf(nullptr) {}</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ade87c5c047700064b904967b434d120c">getQMod</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">visit</a>(<a class="code" href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">NDQOpBarrier::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">visit</a>(<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">NDQOpMeasure::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">visit</a>(<a class="code" href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">NDQOpReset::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">visit</a>(<a class="code" href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">NDQOpCX::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">visit</a>(<a class="code" href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">NDQOpU::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">visit</a>(<a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">NDQOpGen::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">visit</a>(<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    };</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ade87c5c047700064b904967b434d120c">   52</a></span>&#160;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ade87c5c047700064b904967b434d120c">efd::FlattenVisitor::getQMod</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> &amp;mMod;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">   56</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">efd::FlattenVisitor::visit</a>(<a class="code" href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">NDQOpBarrier::Ref</a> ref) {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    FlattenVisitQOperation(<span class="keyword">this</span>, mIf, (<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a>) ref);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#a3d6786433d37610cc7301268862d4dd7">   60</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">efd::FlattenVisitor::visit</a>(<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">NDQOpMeasure::Ref</a> ref) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">if</span> (HasAnyNDIdChild(ref))</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> key = (mIf == <span class="keyword">nullptr</span>) ? (<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a>) ref : mIf;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    std::vector&lt;Node::uRef&gt; newNodes;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">auto</span> flatArgs = GetFlattenedOpsArgs(&amp;mMod, { ref-&gt;<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml#a96d21c24df543013ac4e88f537d40c9b">getQBit</a>(), ref-&gt;<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml#addcc5fd8d95d5790f75b643e88e76c7e">getCBit</a>() });</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">if</span> (!flatArgs.empty()) {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0, e = flatArgs[0].size(); i &lt; e; ++i) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keyword">auto</span> qop = <a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml#ab696e3c3f4463ad2a126a1b335e5baca">NDQOpMeasure::Create</a>(std::move(flatArgs[0][i]), std::move(flatArgs[1][i]));</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            newNodes.push_back(WrapWithIfStmt(mIf, std::move(qop)));</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        mRepMap[key] = std::move(newNodes);;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#a4d5bc32252ae522fa941294dd6bf5d8c">   80</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">efd::FlattenVisitor::visit</a>(<a class="code" href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">NDQOpReset::Ref</a> ref) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    FlattenVisitQOperation(<span class="keyword">this</span>, mIf, (<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a>) ref);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ac9b7f23d8823ab71f49f6f811b21b307">   84</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">efd::FlattenVisitor::visit</a>(<a class="code" href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">NDQOpU::Ref</a> ref) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    FlattenVisitQOperation(<span class="keyword">this</span>, mIf, (<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a>) ref);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#a89b273aff5809d8005294db4395739f2">   88</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">efd::FlattenVisitor::visit</a>(<a class="code" href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">NDQOpCX::Ref</a> ref) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    FlattenVisitQOperation(<span class="keyword">this</span>, mIf, (<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a>) ref);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#affcb1b12cf7cd7d43da0e3aabc9e15fc">   92</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">efd::FlattenVisitor::visit</a>(<a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">NDQOpGen::Ref</a> ref) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    FlattenVisitQOperation(<span class="keyword">this</span>, mIf, (<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a>) ref);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#a9f64d78ddb87ae15a1b4ca2d726a3a08">   96</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">efd::FlattenVisitor::visit</a>(<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ref) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    mIf = ref;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    visitChildren(ref);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    mIf = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;efd::FlattenPass::FlattenPass() {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="../../d8/df2/classefd_1_1FlattenPass.xhtml#a92a8364503dbe68df61bb2fb7728db38">  105</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d8/df2/classefd_1_1FlattenPass.xhtml#a92a8364503dbe68df61bb2fb7728db38">efd::FlattenPass::run</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod) {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml">FlattenVisitor</a> visitor(*qmod);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#ac00e1eb93f94c00db1e6a661d8f95d9d">stmt_begin</a>(), e = qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a23d45e3b6c65d5fa14b199da8b0617c7">stmt_end</a>(); it != e; ++it) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        (*it)-&gt;apply(&amp;visitor);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; pair : visitor.<a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#acfc065fe4bdcb9b3d7659b4db1cfb54a">mRepMap</a>) {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#abaf0b3dd099e4b098b89772b6a134d07">replaceStatement</a>(pair.first, std::move(pair.second));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="../../d8/df2/classefd_1_1FlattenPass.xhtml#a54f4d65e669d72d93522bf79a5e29596">  119</a></span>&#160;<a class="code" href="../../d8/df2/classefd_1_1FlattenPass.xhtml#a349e7c7025c4ab38b8ec1769efbedc93">FlattenPass::uRef</a> <a class="code" href="../../d8/df2/classefd_1_1FlattenPass.xhtml#a54f4d65e669d72d93522bf79a5e29596">efd::FlattenPass::Create</a>() {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d8/df2/classefd_1_1FlattenPass.xhtml#a349e7c7025c4ab38b8ec1769efbedc93">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d8/df2/classefd_1_1FlattenPass.xhtml">FlattenPass</a>());</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">// ----------------------------------------------------------------</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">// --------------------- Static Functions -------------------------</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">// ----------------------------------------------------------------</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">static</span> <span class="keywordtype">bool</span> IsIdRef(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref) {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> instanceOf&lt;NDIdRef&gt;(ref);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">static</span> <span class="keywordtype">bool</span> IsId(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref) {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">return</span> instanceOf&lt;NDId&gt;(ref);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">static</span> <span class="keywordtype">bool</span> HasAnyNDIdChild(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; child : *ref)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">if</span> (IsId(child.get())) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword">static</span> <a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml">NDRegDecl::Ref</a> GetDeclFromId(<span class="keyword">const</span> <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod, <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref) {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml">NDId::Ref</a> refId = dynCast&lt;NDId&gt;(ref);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">if</span> (refId == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        std::string refStr = (ref == <span class="keyword">nullptr</span>) ? <span class="stringliteral">&quot;nullptr&quot;</span> : ref-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">toString</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Not an Id: `&quot;</span> &lt;&lt; refStr &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">auto</span> node = qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#adccc5909af3a4bc63090ecd885ffc7ad">getQVar</a>(refId-&gt;<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">getVal</a>());</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml">NDRegDecl::Ref</a> refDecl = dynCast&lt;NDRegDecl&gt;(node);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">if</span> (refDecl == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        std::string nodeStr = (node == <span class="keyword">nullptr</span>) ? <span class="stringliteral">&quot;nullptr&quot;</span> : node-&gt;<a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml#a3bf9bff2803d9e5c9a838d47a81c2d20">toString</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Not an NDRegDecl: `&quot;</span> &lt;&lt; nodeStr &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7">ExitCode::EXIT_unknown_resource</a>);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">return</span> refDecl;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">static</span> uint32_t GetIdDeclSize(<span class="keyword">const</span> <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod, <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref) {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">return</span> GetDeclFromId(qmod, ref)-&gt;<a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml#aa0cfc2736f15ea67553ea975b3b207f9">getSize</a>()-&gt;<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">getVal</a>().mV;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;}</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keyword">static</span> std::vector&lt;NDIdRef::uRef&gt; ToIdRef(<span class="keyword">const</span> <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod, <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref, uint32_t max) {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    std::vector&lt;NDIdRef::uRef&gt; idRefV;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">if</span> (IsIdRef(ref)) {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; max; ++i)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            idRefV.push_back(uniqueCastForward&lt;NDIdRef&gt;(ref-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a6c85c9bd21014b73497de741cc75f706">clone</a>()));</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">return</span> idRefV;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml">NDRegDecl::Ref</a> refDecl = GetDeclFromId(qmod, ref);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    uint32_t i = 0, e = refDecl-&gt;<a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml#aa0cfc2736f15ea67553ea975b3b207f9">getSize</a>()-&gt;<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">getVal</a>().mV;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">if</span> (max != 0) e = std::max(max, e);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">for</span> (; i &lt; e; ++i) {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        std::string strVal = <a class="code" href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a>(i);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        idRefV.push_back(<a class="code" href="../../d8/dd2/classefd_1_1NDIdRef.xhtml#a9407354bbb835d0daffbeb30cafc1076">NDIdRef::Create</a></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                (uniqueCastForward&lt;NDId&gt;(ref-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a6c85c9bd21014b73497de741cc75f706">clone</a>()), <a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a96ab9dcd008523aa2f4cfc2eb95d7178">NDInt::Create</a>(strVal)));</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">return</span> idRefV;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">static</span> std::vector&lt;std::vector&lt;NDIdRef::uRef&gt;&gt;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;GetFlattenedOpsArgs(<span class="keyword">const</span> <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod, std::vector&lt;Node::Ref&gt; qcargs) {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    std::vector&lt;std::vector&lt;NDIdRef::uRef&gt;&gt; newNodesArgs;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">const</span> uint32_t uint32max = std::numeric_limits&lt;uint32_t&gt;::max();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    uint32_t min = uint32max;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> child : qcargs) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">if</span> (IsId(child)) {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keyword">auto</span> declsize = GetIdDeclSize(qmod, child);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">if</span> (declsize &lt; min) min = declsize;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">if</span> (min != uint32max) {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> child : qcargs) {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            newNodesArgs.push_back(ToIdRef(qmod, child, min));</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">return</span> newNodesArgs;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="keyword">static</span> <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">Node::uRef</a> WrapWithIfStmt(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ifnode, <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">Node::uRef</a> node) {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">auto</span> wrapped = std::move(node);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">if</span> (ifnode != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keyword">auto</span> ifstmt = uniqueCastForward&lt;NDIfStmt&gt;(ifnode-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a6c85c9bd21014b73497de741cc75f706">clone</a>());</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        ifstmt-&gt;setQOp(uniqueCastForward&lt;NDQOp&gt;(std::move(wrapped)));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        wrapped = std::move(ifstmt);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">return</span> wrapped;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> FlattenVisitQOperation(<a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml">FlattenVisitor</a>* visitor, <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ifstmt, <a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a> ref) {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">if</span> (HasAnyNDIdChild(ref-&gt;<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml#af7ef43289355c5bb047a46419177c8ed">getQArgs</a>()))</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    std::vector&lt;Node::uRef&gt; newNodes;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod = visitor-&gt;<a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ade87c5c047700064b904967b434d120c">getQMod</a>();</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> key = (ifstmt == <span class="keyword">nullptr</span>) ? (<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a>) ref : ifstmt;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    std::vector&lt;Node::Ref&gt; qcargs;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; child : *ref-&gt;<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml#af7ef43289355c5bb047a46419177c8ed">getQArgs</a>()) qcargs.push_back(child.get());</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">auto</span> flatArgs = GetFlattenedOpsArgs(qmod, qcargs);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">if</span> (!flatArgs.empty()) {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0, e = flatArgs[0].size(); i &lt; e; ++i) {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keyword">auto</span> qaList = <a class="code" href="../../da/ddd/classefd_1_1NDList.xhtml#a5e3e2ab6234caa816599eb51766210b7">NDList::Create</a>();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; qarg : flatArgs)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                qaList-&gt;addChild(std::move(qarg[i]));</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keyword">auto</span> clone = uniqueCastForward&lt;NDQOp&gt;(ref-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a6c85c9bd21014b73497de741cc75f706">clone</a>());</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            clone-&gt;setQArgs(std::move(qaList));</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            newNodes.push_back(WrapWithIfStmt(ifstmt, std::move(clone)));</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        visitor-&gt;<a class="code" href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#acfc065fe4bdcb9b3d7659b4db1cfb54a">mRepMap</a>[key] = std::move(newNodes);;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div><div class="ttc" id="classefd_1_1FlattenPass_xhtml_a92a8364503dbe68df61bb2fb7728db38"><div class="ttname"><a href="../../d8/df2/classefd_1_1FlattenPass.xhtml#a92a8364503dbe68df61bb2fb7728db38">efd::FlattenPass::run</a></div><div class="ttdeci">bool run(QModule::Ref qmod) override</div><div class="ttdef"><b>Definition:</b> <a href="../../de/d1f/FlattenPass_8cpp_source.xhtml#l00105">FlattenPass.cpp:105</a></div></div>
<div class="ttc" id="classefd_1_1NodeVisitor_xhtml"><div class="ttname"><a href="../../d8/d5d/classefd_1_1NodeVisitor.xhtml">efd::NodeVisitor</a></div><div class="ttdoc">Interface class to be used as a visitor. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d8d/NodeVisitor_8h_source.xhtml#l00009">NodeVisitor.h:9</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_adccc5909af3a4bc63090ecd885ffc7ad"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#adccc5909af3a4bc63090ecd885ffc7ad">efd::QModule::getQVar</a></div><div class="ttdeci">Node::Ref getQVar(std::string id, NDGateDecl::Ref gate=nullptr) const</div><div class="ttdoc">Gets the quantum variable mapped to id from some gate. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00300">QModule.cpp:300</a></div></div>
<div class="ttc" id="classefd_1_1FlattenVisitor_xhtml_ade87c5c047700064b904967b434d120c"><div class="ttname"><a href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ade87c5c047700064b904967b434d120c">efd::FlattenVisitor::getQMod</a></div><div class="ttdeci">QModule::Ref getQMod() const</div><div class="ttdef"><b>Definition:</b> <a href="../../de/d1f/FlattenPass_8cpp_source.xhtml#l00052">FlattenPass.cpp:52</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpMeasure_xhtml_a96d21c24df543013ac4e88f537d40c9b"><div class="ttname"><a href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml#a96d21c24df543013ac4e88f537d40c9b">efd::NDQOpMeasure::getQBit</a></div><div class="ttdeci">Node::Ref getQBit() const</div><div class="ttdoc">Gets the qbit node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l01017">Nodes.cpp:1017</a></div></div>
<div class="ttc" id="classefd_1_1NDList_xhtml_a5e3e2ab6234caa816599eb51766210b7"><div class="ttname"><a href="../../da/ddd/classefd_1_1NDList.xhtml#a5e3e2ab6234caa816599eb51766210b7">efd::NDList::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdoc">Creates a new instance of this node with the kind K_LIST. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00442">Nodes.cpp:442</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a6c85c9bd21014b73497de741cc75f706"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a6c85c9bd21014b73497de741cc75f706">efd::Node::clone</a></div><div class="ttdeci">Node::uRef clone() const</div><div class="ttdoc">Clones the current node (deep copy). </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00114">Nodes.cpp:114</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpGen_xhtml"><div class="ttname"><a href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">efd::NDQOpGen</a></div><div class="ttdoc">NDQOp specialized for generic gates. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00930">Nodes.h:930</a></div></div>
<div class="ttc" id="classefd_1_1FlattenVisitor_xhtml_acfc065fe4bdcb9b3d7659b4db1cfb54a"><div class="ttname"><a href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#acfc065fe4bdcb9b3d7659b4db1cfb54a">efd::FlattenVisitor::mRepMap</a></div><div class="ttdeci">std::unordered_map&lt; Node::Ref, std::vector&lt; Node::uRef &gt; &gt; mRepMap</div><div class="ttdef"><b>Definition:</b> <a href="../../de/d1f/FlattenPass_8cpp_source.xhtml#l00036">FlattenPass.cpp:36</a></div></div>
<div class="ttc" id="FlattenPass_8h_xhtml"><div class="ttname"><a href="../../d6/da6/FlattenPass_8h.xhtml">FlattenPass.h</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_abaf0b3dd099e4b098b89772b6a134d07"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#abaf0b3dd099e4b098b89772b6a134d07">efd::QModule::replaceStatement</a></div><div class="ttdeci">Iterator replaceStatement(Node::Ref stmt, std::vector&lt; Node::uRef &gt; stmts)</div><div class="ttdoc">Replaces the stmt by the vector stmts. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00113">QModule.cpp:113</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpReset_xhtml"><div class="ttname"><a href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">efd::NDQOpReset</a></div><div class="ttdoc">NDQOp specialized for reset operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00630">Nodes.h:630</a></div></div>
<div class="ttc" id="classefd_1_1FlattenVisitor_xhtml_a6ea929e0dbe236c3145cb5e85042b524"><div class="ttname"><a href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#a6ea929e0dbe236c3145cb5e85042b524">efd::FlattenVisitor::FlattenVisitor</a></div><div class="ttdeci">FlattenVisitor(QModule &amp;qmod)</div><div class="ttdef"><b>Definition:</b> <a href="../../de/d1f/FlattenPass_8cpp_source.xhtml#l00038">FlattenPass.cpp:38</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a23d45e3b6c65d5fa14b199da8b0617c7"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a23d45e3b6c65d5fa14b199da8b0617c7">efd::QModule::stmt_end</a></div><div class="ttdeci">Iterator stmt_end()</div><div class="ttdoc">Iterator to the end of the statement node vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00226">QModule.cpp:226</a></div></div>
<div class="ttc" id="classefd_1_1FlattenVisitor_xhtml"><div class="ttname"><a href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml">efd::FlattenVisitor</a></div><div class="ttdef"><b>Definition:</b> <a href="../../de/d1f/FlattenPass_8cpp_source.xhtml#l00030">FlattenPass.cpp:30</a></div></div>
<div class="ttc" id="classefd_1_1FlattenPass_xhtml_a349e7c7025c4ab38b8ec1769efbedc93"><div class="ttname"><a href="../../d8/df2/classefd_1_1FlattenPass.xhtml#a349e7c7025c4ab38b8ec1769efbedc93">efd::FlattenPass::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; FlattenPass &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/da6/FlattenPass_8h_source.xhtml#l00015">FlattenPass.h:15</a></div></div>
<div class="ttc" id="classefd_1_1FlattenPass_xhtml"><div class="ttname"><a href="../../d8/df2/classefd_1_1FlattenPass.xhtml">efd::FlattenPass</a></div><div class="ttdoc">Flattens the given QModule. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/da6/FlattenPass_8h_source.xhtml#l00012">FlattenPass.h:12</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml">efd::QModule</a></div><div class="ttdoc">Qasm module representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00013">QModule.h:13</a></div></div>
<div class="ttc" id="classefd_1_1NDRegDecl_xhtml_aa0cfc2736f15ea67553ea975b3b207f9"><div class="ttname"><a href="../../da/d97/classefd_1_1NDRegDecl.xhtml#aa0cfc2736f15ea67553ea975b3b207f9">efd::NDRegDecl::getSize</a></div><div class="ttdeci">NDInt::Ref getSize() const</div><div class="ttdoc">Gets the size node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00219">Nodes.cpp:219</a></div></div>
<div class="ttc" id="classefd_1_1NDIdRef_xhtml_a9407354bbb835d0daffbeb30cafc1076"><div class="ttname"><a href="../../d8/dd2/classefd_1_1NDIdRef.xhtml#a9407354bbb835d0daffbeb30cafc1076">efd::NDIdRef::Create</a></div><div class="ttdeci">static uRef Create(NDId::uRef idNode, NDInt::uRef nNode)</div><div class="ttdoc">Creates a new instance of this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00330">Nodes.cpp:330</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="RTTI_8h_xhtml"><div class="ttname"><a href="../../d5/dfc/RTTI_8h.xhtml">RTTI.h</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a96ca13a5c2b971b68619ce4a34be0f66"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">efd::Node::toString</a></div><div class="ttdeci">virtual std::string toString(bool pretty=false) const =0</div><div class="ttdoc">Returns a std::string representation of this Node and its childrem. </div></div>
<div class="ttc" id="classefd_1_1NDQOpU_xhtml"><div class="ttname"><a href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">efd::NDQOpU</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00716">Nodes.h:716</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a494a2123de6024d1057cf773acda5f25"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">efd::Node::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; Node &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00042">Nodes.h:42</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpMeasure_xhtml_ab696e3c3f4463ad2a126a1b335e5baca"><div class="ttname"><a href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml#ab696e3c3f4463ad2a126a1b335e5baca">efd::NDQOpMeasure::Create</a></div><div class="ttdeci">static uRef Create(Node::uRef qNode, Node::uRef cNode)</div><div class="ttdoc">Creates a new instance of this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l01060">Nodes.cpp:1060</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml">efd::Node</a></div><div class="ttdoc">Base class for AST nodes. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00039">Nodes.h:39</a></div></div>
<div class="ttc" id="classefd_1_1NDQOp_xhtml"><div class="ttname"><a href="../../dd/d94/classefd_1_1NDQOp.xhtml">efd::NDQOp</a></div><div class="ttdoc">Generic node for quantum operations. This is also the base node for the other quantum gates...</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00577">Nodes.h:577</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpBarrier_xhtml"><div class="ttname"><a href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">efd::NDQOpBarrier</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00658">Nodes.h:658</a></div></div>
<div class="ttc" id="NodeVisitor_8h_xhtml"><div class="ttname"><a href="../../d0/d8d/NodeVisitor_8h.xhtml">NodeVisitor.h</a></div></div>
<div class="ttc" id="classefd_1_1NDValue_xhtml_a53ee724a8db3429bf30bb1936ad548b2"><div class="ttname"><a href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">efd::NDValue::getVal</a></div><div class="ttdeci">T getVal() const</div><div class="ttdoc">Returns a copy to the setted value. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l01023">Nodes.h:1023</a></div></div>
<div class="ttc" id="classefd_1_1NDIfStmt_xhtml"><div class="ttname"><a href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">efd::NDIfStmt</a></div><div class="ttdoc">Node for conditional statement. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00968">Nodes.h:968</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a4497f103166f16df2ab65d3a779f56e7">efd::ExitCode::EXIT_unknown_resource</a></div></div>
<div class="ttc" id="classefd_1_1NDRegDecl_xhtml_a3bf9bff2803d9e5c9a838d47a81c2d20"><div class="ttname"><a href="../../da/d97/classefd_1_1NDRegDecl.xhtml#a3bf9bff2803d9e5c9a838d47a81c2d20">efd::NDRegDecl::toString</a></div><div class="ttdeci">std::string toString(bool pretty=false) const override</div><div class="ttdoc">Returns a std::string representation of this Node and its childrem. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00253">Nodes.cpp:253</a></div></div>
<div class="ttc" id="classefd_1_1FlattenVisitor_xhtml_ae7ca8a9ee54a34d5db9e25bd4ceb0d38"><div class="ttname"><a href="../../dd/dc6/classefd_1_1FlattenVisitor.xhtml#ae7ca8a9ee54a34d5db9e25bd4ceb0d38">efd::FlattenVisitor::visit</a></div><div class="ttdeci">void visit(NDQOpBarrier::Ref ref) override</div><div class="ttdef"><b>Definition:</b> <a href="../../de/d1f/FlattenPass_8cpp_source.xhtml#l00056">FlattenPass.cpp:56</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpMeasure_xhtml_addcc5fd8d95d5790f75b643e88e76c7e"><div class="ttname"><a href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml#addcc5fd8d95d5790f75b643e88e76c7e">efd::NDQOpMeasure::getCBit</a></div><div class="ttdeci">Node::Ref getCBit() const</div><div class="ttdoc">Gets the cbit node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l01025">Nodes.cpp:1025</a></div></div>
<div class="ttc" id="classefd_1_1NDQOp_xhtml_af7ef43289355c5bb047a46419177c8ed"><div class="ttname"><a href="../../dd/d94/classefd_1_1NDQOp.xhtml#af7ef43289355c5bb047a46419177c8ed">efd::NDQOp::getQArgs</a></div><div class="ttdeci">NDList::Ref getQArgs() const</div><div class="ttdoc">Gets the quantum arguments. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00909">Nodes.cpp:909</a></div></div>
<div class="ttc" id="classefd_1_1NDValue_xhtml"><div class="ttname"><a href="../../df/d1b/classefd_1_1NDValue.xhtml">efd::NDValue</a></div><div class="ttdoc">Node for literal types. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00164">Nodes.h:164</a></div></div>
<div class="ttc" id="classefd_1_1FlattenPass_xhtml_adab3ab9965a35d39b77ec7872d9ef46f"><div class="ttname"><a href="../../d8/df2/classefd_1_1FlattenPass.xhtml#adab3ab9965a35d39b77ec7872d9ef46f">efd::FlattenPass::ID</a></div><div class="ttdeci">static uint8_t ID</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/da6/FlattenPass_8h_source.xhtml#l00017">FlattenPass.h:17</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_ac00e1eb93f94c00db1e6a661d8f95d9d"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#ac00e1eb93f94c00db1e6a661d8f95d9d">efd::QModule::stmt_begin</a></div><div class="ttdeci">Iterator stmt_begin()</div><div class="ttdoc">Iterator to the beginning of the statement node vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00218">QModule.cpp:218</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">efd::ExitCode::EXIT_unreachable</a></div></div>
<div class="ttc" id="uRefCast_8h_xhtml"><div class="ttname"><a href="../../dc/d09/uRefCast_8h.xhtml">uRefCast.h</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a76fb98cd4a35566d53c2f0513c5d12d1"><div class="ttname"><a href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a></div><div class="ttdeci">string to_string(efd::EnumString&lt; T, first, last &gt; &amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d62/EnumString_8h_source.xhtml#l00053">EnumString.h:53</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpMeasure_xhtml"><div class="ttname"><a href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">efd::NDQOpMeasure</a></div><div class="ttdoc">NDQOp specialized for measure operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00681">Nodes.h:681</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpCX_xhtml"><div class="ttname"><a href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">efd::NDQOpCX</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00744">Nodes.h:744</a></div></div>
<div class="ttc" id="classefd_1_1NDRegDecl_xhtml"><div class="ttname"><a href="../../da/d97/classefd_1_1NDRegDecl.xhtml">efd::NDRegDecl</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00245">Nodes.h:245</a></div></div>
<div class="ttc" id="classefd_1_1NDValue_xhtml_a96ab9dcd008523aa2f4cfc2eb95d7178"><div class="ttname"><a href="../../df/d1b/classefd_1_1NDValue.xhtml#a96ab9dcd008523aa2f4cfc2eb95d7178">efd::NDValue::Create</a></div><div class="ttdeci">static uRef Create(T val)</div><div class="ttdoc">Creates a new instance of this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l01055">Nodes.h:1055</a></div></div>
<div class="ttc" id="classefd_1_1FlattenPass_xhtml_a54f4d65e669d72d93522bf79a5e29596"><div class="ttname"><a href="../../d8/df2/classefd_1_1FlattenPass.xhtml#a54f4d65e669d72d93522bf79a5e29596">efd::FlattenPass::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdef"><b>Definition:</b> <a href="../../de/d1f/FlattenPass_8cpp_source.xhtml#l00119">FlattenPass.cpp:119</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
