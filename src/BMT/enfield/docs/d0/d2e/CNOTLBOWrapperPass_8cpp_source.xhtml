<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/CNOTLBOWrapperPass.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">CNOTLBOWrapperPass.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d0/d2e/CNOTLBOWrapperPass_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/dc9/CNOTLBOWrapperPass_8h.xhtml">enfield/Transform/CNOTLBOWrapperPass.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d4/d73/QModule_8h.xhtml">enfield/Transform/QModule.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d5/dfc/RTTI_8h.xhtml">enfield/Support/RTTI.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;uint8_t <a class="code" href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml#add7d3d9d34d7bb6dd30d21c1d934193c">efd::CNOTLBOWrapperPass::ID</a> = 0;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno"><a class="line" href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml#ad2467d75427cd5cab79e005eb00acd69">    7</a></span>&#160;<a class="code" href="../../d4/deb/namespaceefd.xhtml#a0f9170fd3a6f78d50afc01229e241d61">efd::Ordering</a> <a class="code" href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml#ad2467d75427cd5cab79e005eb00acd69">efd::CNOTLBOWrapperPass::generate</a>(<a class="code" href="../../d0/d54/classefd_1_1CircuitGraph.xhtml">CircuitGraph</a>&amp; graph) {</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;    <span class="keyword">auto</span>&amp; layers = <a class="code" href="../../db/d56/classefd_1_1PassT.xhtml#a5b6a7296f64c3ae0dd8ad9f528b11ed0">mData</a>.<a class="code" href="../../d4/d41/structefd_1_1LayerBasedOrdering.xhtml#af54cf265105ad19f631fd5b202c04821">layers</a>;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;    <span class="keyword">auto</span> xbitNumber = graph.<a class="code" href="../../d0/d54/classefd_1_1CircuitGraph.xhtml#af5bed18e4c713957e30e7c11d0995da1">size</a>();</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    <span class="keyword">auto</span> qubitNumber = graph.<a class="code" href="../../d0/d54/classefd_1_1CircuitGraph.xhtml#adcb4c92728654114aa63ba37f853bac5">getQSize</a>();</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    <span class="keyword">auto</span> cbitNumber = graph.<a class="code" href="../../d0/d54/classefd_1_1CircuitGraph.xhtml#afccd427dbf207e52f0865b9cb10836f6">getCSize</a>();</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    <span class="keywordtype">bool</span> stop, ugate;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <span class="keyword">auto</span> marked = std::vector&lt;bool&gt;(xbitNumber, <span class="keyword">false</span>);</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="keyword">auto</span> reached = std::unordered_map&lt;Node::Ref, uint32_t&gt;();</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="keyword">auto</span> order = <a class="code" href="../../d4/deb/namespaceefd.xhtml#a0f9170fd3a6f78d50afc01229e241d61">Ordering</a>();</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="keyword">auto</span> it = graph.<a class="code" href="../../d0/d54/classefd_1_1CircuitGraph.xhtml#ad1dbcb28dda3121f795a74944927de4a">build_iterator</a>();</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    std::set&lt;Node::Ref&gt; processed;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    std::vector&lt;Xbit&gt; xbits;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; qubitNumber; ++i) {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        it.<a class="code" href="../../d7/d0b/classefd_1_1CircuitGraph_1_1Iterator.xhtml#a53e088602bfc10b1de2a681b93cff134">next</a>(i);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        xbits.push_back(<a class="code" href="../../d9/d6b/classefd_1_1Xbit.xhtml#a9bc4937fc867235e1e7867529aee20e3">Xbit::Q</a>(i));</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    }</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; cbitNumber; ++i) {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        it.next(i + qubitNumber);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        xbits.push_back(<a class="code" href="../../d9/d6b/classefd_1_1Xbit.xhtml#a4cddd18c9e4ec4f08b28d1c3a81f67cc">Xbit::C</a>(i));</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    }</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">do</span> {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        stop = <span class="keyword">true</span>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="comment">// Emit U-gates that may be executed in parallel.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="comment">// However, we want to schedule the controlled gates only, as they</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="comment">// are the only gates that affects qubit allocation.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#a0275945f2cb203058ead872f748857e9">Layer</a> layer;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            ugate = <span class="keyword">false</span>;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; qubitNumber; ++i) {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                <span class="keyword">auto</span> qubit = xbits[i];</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                <span class="keywordflow">if</span> (it[qubit]-&gt;isGateNode() &amp;&amp; it[qubit]-&gt;numberOfXbits() == 1) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                    <span class="keyword">auto</span> node = it[qubit]-&gt;node();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                    layer.push_back(node);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                    processed.insert(node);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                    it.next(qubit);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                    ugate = <span class="keyword">true</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">if</span> (!layer.empty()) {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span> node : layer)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                    order.push_back(<a class="code" href="../../d6/de0/classefd_1_1LayerBasedOrderingWrapperPass.xhtml#a963054a3af9a814648cc2d567b47f10b">getNodeId</a>(node));</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                layers.push_back(layer);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        } <span class="keywordflow">while</span> (ugate);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#a0275945f2cb203058ead872f748857e9">Layer</a> layer;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="comment">// Reach gates with non-marked xbits and mark them.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; xbitNumber; ++i) {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keyword">auto</span> bit = xbits[i];</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">if</span> (it[bit]-&gt;isGateNode() &amp;&amp; !marked[i]) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                marked[i] = <span class="keyword">true</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <span class="keyword">auto</span> node = it[bit]-&gt;node();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keywordflow">if</span> (reached.find(node) == reached.end())</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                    reached[node] = it[bit]-&gt;numberOfXbits();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                --reached[node];</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="comment">// Advance the xbits and unmark them.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; xbitNumber; ++i) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keyword">auto</span> bit = xbits[i];</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keyword">auto</span> node = it[bit]-&gt;node();</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">if</span> (it[bit]-&gt;isGateNode() &amp;&amp; !reached[node]) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keywordflow">if</span> (processed.find(node) == processed.end()) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    layer.push_back(node);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    processed.insert(node);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                marked[i] = <span class="keyword">false</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                it.next(bit);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="comment">// If the xbits in the processed nodes haven&#39;t reached the end (output nodes)</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="comment">// we keep going.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">if</span> (!it[bit]-&gt;isOutputNode()) stop = <span class="keyword">false</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">if</span> (!layer.empty()) {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> node : layer)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                order.push_back(<a class="code" href="../../d6/de0/classefd_1_1LayerBasedOrderingWrapperPass.xhtml#a963054a3af9a814648cc2d567b47f10b">getNodeId</a>(node));</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            layers.push_back(layer);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    } <span class="keywordflow">while</span> (!stop);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> order;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml#a7571627fa8a48fb8116384af732f7791">  111</a></span>&#160;<a class="code" href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml#ad635a39ba7d6891d4ce30ab98a4cc7c1">efd::CNOTLBOWrapperPass::uRef</a> <a class="code" href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml#a7571627fa8a48fb8116384af732f7791">efd::CNOTLBOWrapperPass::Create</a>() {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml#ad635a39ba7d6891d4ce30ab98a4cc7c1">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml">CNOTLBOWrapperPass</a>());</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="ttc" id="classefd_1_1Xbit_xhtml_a4cddd18c9e4ec4f08b28d1c3a81f67cc"><div class="ttname"><a href="../../d9/d6b/classefd_1_1Xbit.xhtml#a4cddd18c9e4ec4f08b28d1c3a81f67cc">efd::Xbit::C</a></div><div class="ttdeci">static Xbit C(uint32_t id)</div><div class="ttdoc">Creates a classical Xbit with id. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dce/CircuitGraph_8cpp_source.xhtml#l00060">CircuitGraph.cpp:60</a></div></div>
<div class="ttc" id="classefd_1_1CircuitGraph_xhtml_afccd427dbf207e52f0865b9cb10836f6"><div class="ttname"><a href="../../d0/d54/classefd_1_1CircuitGraph.xhtml#afccd427dbf207e52f0865b9cb10836f6">efd::CircuitGraph::getCSize</a></div><div class="ttdeci">uint32_t getCSize() const</div><div class="ttdoc">Returns the number of cbits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dce/CircuitGraph_8cpp_source.xhtml#l00199">CircuitGraph.cpp:199</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a0275945f2cb203058ead872f748857e9"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a0275945f2cb203058ead872f748857e9">efd::Layer</a></div><div class="ttdeci">std::vector&lt; Node::Ref &gt; Layer</div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d33/LayersBuilderPass_8h_source.xhtml#l00011">LayersBuilderPass.h:11</a></div></div>
<div class="ttc" id="classefd_1_1LayerBasedOrderingWrapperPass_xhtml_a963054a3af9a814648cc2d567b47f10b"><div class="ttname"><a href="../../d6/de0/classefd_1_1LayerBasedOrderingWrapperPass.xhtml#a963054a3af9a814648cc2d567b47f10b">efd::LayerBasedOrderingWrapperPass::getNodeId</a></div><div class="ttdeci">uint32_t getNodeId(Node::Ref ref)</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d43/LayerBasedOrderingWrapperPass_8cpp_source.xhtml#l00005">LayerBasedOrderingWrapperPass.cpp:5</a></div></div>
<div class="ttc" id="RTTI_8h_xhtml"><div class="ttname"><a href="../../d5/dfc/RTTI_8h.xhtml">RTTI.h</a></div></div>
<div class="ttc" id="classefd_1_1CNOTLBOWrapperPass_xhtml_ad635a39ba7d6891d4ce30ab98a4cc7c1"><div class="ttname"><a href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml#ad635a39ba7d6891d4ce30ab98a4cc7c1">efd::CNOTLBOWrapperPass::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; CNOTLBOWrapperPass &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/dc9/CNOTLBOWrapperPass_8h_source.xhtml#l00010">CNOTLBOWrapperPass.h:10</a></div></div>
<div class="ttc" id="classefd_1_1CNOTLBOWrapperPass_xhtml"><div class="ttname"><a href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml">efd::CNOTLBOWrapperPass</a></div><div class="ttdoc">Layer-based Ordering with CNOT priority. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/dc9/CNOTLBOWrapperPass_8h_source.xhtml#l00008">CNOTLBOWrapperPass.h:8</a></div></div>
<div class="ttc" id="classefd_1_1CircuitGraph_xhtml_adcb4c92728654114aa63ba37f853bac5"><div class="ttname"><a href="../../d0/d54/classefd_1_1CircuitGraph.xhtml#adcb4c92728654114aa63ba37f853bac5">efd::CircuitGraph::getQSize</a></div><div class="ttdeci">uint32_t getQSize() const</div><div class="ttdoc">Returns the number of qubits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dce/CircuitGraph_8cpp_source.xhtml#l00195">CircuitGraph.cpp:195</a></div></div>
<div class="ttc" id="CNOTLBOWrapperPass_8h_xhtml"><div class="ttname"><a href="../../d1/dc9/CNOTLBOWrapperPass_8h.xhtml">CNOTLBOWrapperPass.h</a></div></div>
<div class="ttc" id="classefd_1_1CircuitGraph_xhtml"><div class="ttname"><a href="../../d0/d54/classefd_1_1CircuitGraph.xhtml">efd::CircuitGraph</a></div><div class="ttdoc">The Circuit representation of the QModule. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/da6/CircuitGraph_8h_source.xhtml#l00038">CircuitGraph.h:38</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a0f9170fd3a6f78d50afc01229e241d61"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a0f9170fd3a6f78d50afc01229e241d61">efd::Ordering</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Ordering</div><div class="ttdef"><b>Definition:</b> <a href="../../df/d01/LayerBasedOrderingWrapperPass_8h_source.xhtml#l00010">LayerBasedOrderingWrapperPass.h:10</a></div></div>
<div class="ttc" id="classefd_1_1CNOTLBOWrapperPass_xhtml_a7571627fa8a48fb8116384af732f7791"><div class="ttname"><a href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml#a7571627fa8a48fb8116384af732f7791">efd::CNOTLBOWrapperPass::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d2e/CNOTLBOWrapperPass_8cpp_source.xhtml#l00111">CNOTLBOWrapperPass.cpp:111</a></div></div>
<div class="ttc" id="classefd_1_1Xbit_xhtml_a9bc4937fc867235e1e7867529aee20e3"><div class="ttname"><a href="../../d9/d6b/classefd_1_1Xbit.xhtml#a9bc4937fc867235e1e7867529aee20e3">efd::Xbit::Q</a></div><div class="ttdeci">static Xbit Q(uint32_t id)</div><div class="ttdoc">Creates a quantum Xbit with id. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dce/CircuitGraph_8cpp_source.xhtml#l00056">CircuitGraph.cpp:56</a></div></div>
<div class="ttc" id="classefd_1_1CircuitGraph_xhtml_af5bed18e4c713957e30e7c11d0995da1"><div class="ttname"><a href="../../d0/d54/classefd_1_1CircuitGraph.xhtml#af5bed18e4c713957e30e7c11d0995da1">efd::CircuitGraph::size</a></div><div class="ttdeci">uint32_t size() const</div><div class="ttdoc">Returns the number of bits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dce/CircuitGraph_8cpp_source.xhtml#l00203">CircuitGraph.cpp:203</a></div></div>
<div class="ttc" id="classefd_1_1CircuitGraph_1_1Iterator_xhtml_a53e088602bfc10b1de2a681b93cff134"><div class="ttname"><a href="../../d7/d0b/classefd_1_1CircuitGraph_1_1Iterator.xhtml#a53e088602bfc10b1de2a681b93cff134">efd::CircuitGraph::Iterator::next</a></div><div class="ttdeci">bool next(Xbit xbit)</div><div class="ttdoc">Advances the bit xbit. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dce/CircuitGraph_8cpp_source.xhtml#l00127">CircuitGraph.cpp:127</a></div></div>
<div class="ttc" id="structefd_1_1LayerBasedOrdering_xhtml_af54cf265105ad19f631fd5b202c04821"><div class="ttname"><a href="../../d4/d41/structefd_1_1LayerBasedOrdering.xhtml#af54cf265105ad19f631fd5b202c04821">efd::LayerBasedOrdering::layers</a></div><div class="ttdeci">Layers layers</div><div class="ttdef"><b>Definition:</b> <a href="../../df/d01/LayerBasedOrderingWrapperPass_8h_source.xhtml#l00014">LayerBasedOrderingWrapperPass.h:14</a></div></div>
<div class="ttc" id="classefd_1_1PassT_xhtml_a5b6a7296f64c3ae0dd8ad9f528b11ed0"><div class="ttname"><a href="../../db/d56/classefd_1_1PassT.xhtml#a5b6a7296f64c3ae0dd8ad9f528b11ed0">efd::PassT&lt; LayerBasedOrdering &gt;::mData</a></div><div class="ttdeci">LayerBasedOrdering mData</div><div class="ttdef"><b>Definition:</b> <a href="../../df/d29/Pass_8h_source.xhtml#l00047">Pass.h:47</a></div></div>
<div class="ttc" id="QModule_8h_xhtml"><div class="ttname"><a href="../../d4/d73/QModule_8h.xhtml">QModule.h</a></div></div>
<div class="ttc" id="classefd_1_1CNOTLBOWrapperPass_xhtml_ad2467d75427cd5cab79e005eb00acd69"><div class="ttname"><a href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml#ad2467d75427cd5cab79e005eb00acd69">efd::CNOTLBOWrapperPass::generate</a></div><div class="ttdeci">Ordering generate(CircuitGraph &amp;graph) override</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d2e/CNOTLBOWrapperPass_8cpp_source.xhtml#l00007">CNOTLBOWrapperPass.cpp:7</a></div></div>
<div class="ttc" id="classefd_1_1CircuitGraph_xhtml_ad1dbcb28dda3121f795a74944927de4a"><div class="ttname"><a href="../../d0/d54/classefd_1_1CircuitGraph.xhtml#ad1dbcb28dda3121f795a74944927de4a">efd::CircuitGraph::build_iterator</a></div><div class="ttdeci">Iterator build_iterator()</div><div class="ttdoc">Builds an iterator instance for this CircuitGraph. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dce/CircuitGraph_8cpp_source.xhtml#l00223">CircuitGraph.cpp:223</a></div></div>
<div class="ttc" id="classefd_1_1CNOTLBOWrapperPass_xhtml_add7d3d9d34d7bb6dd30d21c1d934193c"><div class="ttname"><a href="../../dd/db9/classefd_1_1CNOTLBOWrapperPass.xhtml#add7d3d9d34d7bb6dd30d21c1d934193c">efd::CNOTLBOWrapperPass::ID</a></div><div class="ttdeci">static uint8_t ID</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/dc9/CNOTLBOWrapperPass_8h_source.xhtml#l00013">CNOTLBOWrapperPass.h:13</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
