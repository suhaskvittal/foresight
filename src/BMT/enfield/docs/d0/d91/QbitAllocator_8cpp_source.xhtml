<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/Allocators/QbitAllocator.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li><li class="navelem"><a class="el" href="../../dir_06974191db7fbe66527a95ceac77ccfb.xhtml">Allocators</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">QbitAllocator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d0/d91/QbitAllocator_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dd/d3b/QbitAllocator_8h.xhtml">enfield/Transform/Allocators/QbitAllocator.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/df0/RenameQbitsPass_8h.xhtml">enfield/Transform/RenameQbitsPass.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d4/d61/InlineAllPass_8h.xhtml">enfield/Transform/InlineAllPass.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/d82/PassCache_8h.xhtml">enfield/Transform/PassCache.h</a>&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/ded/Utils_8h.xhtml">enfield/Transform/Utils.h</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/d9d/ArchGraph_8h.xhtml">enfield/Arch/ArchGraph.h</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d0/d8d/NodeVisitor_8h.xhtml">enfield/Analysis/NodeVisitor.h</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d5/dfc/RTTI_8h.xhtml">enfield/Support/RTTI.h</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/d09/uRefCast_8h.xhtml">enfield/Support/uRefCast.h</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dd/d27/Timer_8h.xhtml">enfield/Support/Timer.h</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">static</span> <a class="code" href="../../d6/d1d/classefd_1_1Stat.xhtml">efd::Stat&lt;uint32_t&gt;</a> DepStat</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;(<span class="stringliteral">&quot;Dependencies&quot;</span>, <span class="stringliteral">&quot;The number of dependencies of this program.&quot;</span>);</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">static</span> <a class="code" href="../../d6/d1d/classefd_1_1Stat.xhtml">efd::Stat&lt;double&gt;</a> AllocTime</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;(<span class="stringliteral">&quot;AllocTime&quot;</span>, <span class="stringliteral">&quot;Time to allocate all qubits.&quot;</span>);</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">static</span> <a class="code" href="../../d6/d1d/classefd_1_1Stat.xhtml">efd::Stat&lt;double&gt;</a> InlineTime</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;(<span class="stringliteral">&quot;InlineTime&quot;</span>, <span class="stringliteral">&quot;Time to inline all gates.&quot;</span>);</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">static</span> <a class="code" href="../../d6/d1d/classefd_1_1Stat.xhtml">efd::Stat&lt;double&gt;</a> ReplaceTime</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;(<span class="stringliteral">&quot;ReplaceTime&quot;</span>, <span class="stringliteral">&quot;Time to replace all qubits to the corresponding architechture ones.&quot;</span>);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">static</span> <a class="code" href="../../d6/d1d/classefd_1_1Stat.xhtml">efd::Stat&lt;double&gt;</a> RenameTime</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;(<span class="stringliteral">&quot;RenameTime&quot;</span>, <span class="stringliteral">&quot;Time to rename all qubits to the mapped qubits.&quot;</span>);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">   25</a></span>&#160;<a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">efd::InverseMap</a> <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">efd::InvertMapping</a>(uint32_t archQ, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> mapping, <span class="keywordtype">bool</span> fill) {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    uint32_t progQ = mapping.size();</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="comment">// &#39;archQ&#39; is the number of qubits from the architecture.</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    std::vector&lt;uint32_t&gt; inv(archQ, _undef);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="comment">// for &#39;u&#39; in arch; and &#39;a&#39; in prog:</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="comment">// if &#39;a&#39; -&gt; &#39;u&#39;, then &#39;u&#39; -&gt; &#39;a&#39;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; progQ; ++i)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">if</span> (mapping[i] != _undef)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            inv[mapping[i]] = i;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">if</span> (fill) {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="comment">// Fill the qubits in the architecture that were not mapped.</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">Fill</a>(mapping, inv);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">return</span> inv;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="../../d4/deb/namespaceefd.xhtml#a50340b37be1e11f593899c400cf76969">   44</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">efd::Fill</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; mapping, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a>&amp; inv) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    uint32_t progQ = mapping.size(), archQ = inv.size();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    uint32_t a = 0, u = 0;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">do</span> {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">while</span> (a &lt; progQ &amp;&amp; mapping[a] != _undef) ++a;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">while</span> (u &lt; archQ &amp;&amp; inv[u] != _undef) ++u;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">if</span> (u &lt; archQ &amp;&amp; a &lt; progQ) {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            mapping[a] = u;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            inv[u] = a;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            ++u; ++a;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    } <span class="keywordflow">while</span> (<span class="keyword">true</span>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">   62</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">efd::Fill</a>(uint32_t archQ, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; mapping) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">auto</span> inv = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(archQ, mapping, <span class="keyword">false</span>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">Fill</a>(mapping, inv);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="../../d4/deb/namespaceefd.xhtml#a186bbb1cec68c992374b8795b10af1a8">   67</a></span>&#160;<a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">efd::Mapping</a> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a186bbb1cec68c992374b8795b10af1a8">efd::IdentityMapping</a>(uint32_t progQ) {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> mapping(progQ, _undef);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; progQ; ++i) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        mapping[i] = i;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> mapping;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">   77</a></span>&#160;std::string <a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">efd::MappingToString</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> m) {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    std::string s = <span class="stringliteral">&quot;[&quot;</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = m.size(); i &lt; e; ++i) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        s = s + <a class="code" href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a>(i) + <span class="stringliteral">&quot; =&gt; &quot;</span>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span> (m[i] == _undef) s = s + <span class="stringliteral">&quot;_undef&quot;</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">else</span> s = s + <a class="code" href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a>(m[i]);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        s = s + <span class="stringliteral">&quot;;&quot;</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">if</span> (i != e - 1) s = s + <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    s = s + <span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">return</span> s;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">// ------------------ QbitAllocator ----------------------</span></div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aa380bf007e46c8c8f09ffe7d4a552d54">   91</a></span>&#160;<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aa380bf007e46c8c8f09ffe7d4a552d54">efd::QbitAllocator::QbitAllocator</a>(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">ArchGraph::sRef</a> archGraph) </div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    : mInlineAll(false), mArchGraph(archGraph) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keywordtype">void</span> efd::QbitAllocator::inlineAllGates() {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">auto</span> inlinePass = <a class="code" href="../../d5/de3/classefd_1_1InlineAllPass.xhtml#a39637a556c08bf458f9bf20812d11470">InlineAllPass::Create</a>(mBasis);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="../../d1/df9/classefd_1_1PassCache.xhtml#acb82213b8e43f26fdca8266be3cc4c7c">PassCache::Run</a>(mMod, inlinePass.get());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keywordtype">void</span> efd::QbitAllocator::replaceWithArchSpecs() {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// Renaming program qbits to architecture qbits.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="../../d8/dd7/classefd_1_1RenameQbitPass.xhtml#afc4aead060964c7f60ff9316cd5199a3">RenameQbitPass::ArchMap</a> toArchMap;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">auto</span> xtn = PassCache::Get&lt;XbitToNumberWrapperPass&gt;(mMod);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">auto</span> xbitToNumber = xtn-&gt;getData();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = xbitToNumber.getQSize(); i &lt; e; ++i) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        toArchMap[xbitToNumber.getQStrId(i)] = mArchGraph-&gt;getNode(i);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">auto</span> renamePass = <a class="code" href="../../d8/dd7/classefd_1_1RenameQbitPass.xhtml#a0b50e7bed18048ff76f94e5e53311c6b">RenameQbitPass::Create</a>(toArchMap);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="../../d1/df9/classefd_1_1PassCache.xhtml#acb82213b8e43f26fdca8266be3cc4c7c">PassCache::Run</a>(mMod, renamePass.get());</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Replacing the old qbit declarations with the architecture&#39;s qbit</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">// declaration.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    mMod-&gt;removeAllQRegs();</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = mArchGraph-&gt;reg_begin(), e = mArchGraph-&gt;reg_end(); it != e; ++it)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        mMod-&gt;insertReg(<a class="code" href="../../da/d97/classefd_1_1NDRegDecl.xhtml#af206910448d281670d3afe89f3ff4677">NDRegDecl::CreateQ</a></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                (<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a96ab9dcd008523aa2f4cfc2eb95d7178">NDId::Create</a>(it-&gt;first), <a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a96ab9dcd008523aa2f4cfc2eb95d7178">NDInt::Create</a>(<a class="code" href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a>(it-&gt;second))));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#ad14c92694bf2e4c5874ac1bcc477a6dc">  122</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#ad14c92694bf2e4c5874ac1bcc477a6dc">efd::QbitAllocator::run</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod) {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml">Timer</a> timer;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// Setting the class QModule.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    mMod = qmod;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span> (mInlineAll) {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="comment">// Setting up timer ----------------</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        timer.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a04b2df0f873780111173bc5e2a1810aa">start</a>();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="comment">// ---------------------------------</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        inlineAllGates();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="comment">// Stopping timer and setting the stat -----------------</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        timer.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a0b9a3de677363a5d3f995ac03a3d0a5e">stop</a>();</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        InlineTime = ((double) timer.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#ac83f06f2145058ef3b3b6a53892ed39b">getMicroseconds</a>() / 1000000.0);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">// -----------------------------------------------------</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// Replacing all declared registers to the registers declared in the</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// architecture graph.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// Setting up timer ----------------</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    timer.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a04b2df0f873780111173bc5e2a1810aa">start</a>();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="comment">// ---------------------------------</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    replaceWithArchSpecs();</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Stopping timer and setting the stat -----------------</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    timer.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a0b9a3de677363a5d3f995ac03a3d0a5e">stop</a>();</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    ReplaceTime = ((double) timer.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#ac83f06f2145058ef3b3b6a53892ed39b">getMicroseconds</a>() / 1000000.0);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// -----------------------------------------------------</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// Getting the new information, since it can be the case that the qmodule</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// was modified.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">auto</span> depPass = PassCache::Get&lt;DependencyBuilderWrapperPass&gt;(mMod);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">auto</span> depBuilder = depPass-&gt;getData();</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">auto</span>&amp; deps = depBuilder.getDependencies();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Counting total dependencies.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    uint32_t totalDeps = 0;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; d : deps) totalDeps += d.mDeps.size();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    DepStat = totalDeps;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Filling Qubit information.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    mVQubits = depBuilder.mXbitToNumber.getQSize();</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    mPQubits = mArchGraph-&gt;size();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="comment">// Setting up timer ----------------</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    timer.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a04b2df0f873780111173bc5e2a1810aa">start</a>();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// ---------------------------------</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    mData = allocate(mMod);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="comment">// Stopping timer and setting the stat -----------------</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    timer.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a0b9a3de677363a5d3f995ac03a3d0a5e">stop</a>();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    AllocTime = ((double) timer.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#ac83f06f2145058ef3b3b6a53892ed39b">getMicroseconds</a>() / 1000000.0);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">// -----------------------------------------------------</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a997aa1c89bcfbcd5d5d796537c71c99a">  183</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a997aa1c89bcfbcd5d5d796537c71c99a">efd::QbitAllocator::setInlineAll</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#af5639e021a0ebb35ea61b55488ce5054">BasisVector</a> basis) {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    mInlineAll = <span class="keyword">true</span>;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    mBasis = basis;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aae527130ae67369e7ba62acae89438c5">  188</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aae527130ae67369e7ba62acae89438c5">efd::QbitAllocator::setDontInline</a>() {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    mInlineAll = <span class="keyword">false</span>;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div><div class="ttc" id="classefd_1_1Timer_xhtml"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml">efd::Timer</a></div><div class="ttdoc">Tracks the elapsed time. One should use the methods start and stop in order to track the time of some...</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d27/Timer_8h_source.xhtml#l00014">Timer.h:14</a></div></div>
<div class="ttc" id="ArchGraph_8h_xhtml"><div class="ttname"><a href="../../d7/d9d/ArchGraph_8h.xhtml">ArchGraph.h</a></div></div>
<div class="ttc" id="QbitAllocator_8h_xhtml"><div class="ttname"><a href="../../dd/d3b/QbitAllocator_8h.xhtml">QbitAllocator.h</a></div></div>
<div class="ttc" id="classefd_1_1PassCache_xhtml_acb82213b8e43f26fdca8266be3cc4c7c"><div class="ttname"><a href="../../d1/df9/classefd_1_1PassCache.xhtml#acb82213b8e43f26fdca8266be3cc4c7c">efd::PassCache::Run</a></div><div class="ttdeci">static void Run(QModule::Ref qmod)</div><div class="ttdoc">Runs the pass T in qmod. </div><div class="ttdef"><b>Definition:</b> <a href="../../db/d82/PassCache_8h_source.xhtml#l00047">PassCache.h:47</a></div></div>
<div class="ttc" id="classefd_1_1RenameQbitPass_xhtml_a0b50e7bed18048ff76f94e5e53311c6b"><div class="ttname"><a href="../../d8/dd7/classefd_1_1RenameQbitPass.xhtml#a0b50e7bed18048ff76f94e5e53311c6b">efd::RenameQbitPass::Create</a></div><div class="ttdeci">static RenameQbitPass::uRef Create(ArchMap map)</div><div class="ttdoc">Creates a new instance of this pass. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d2f/RenameQbitsPass_8cpp_source.xhtml#l00086">RenameQbitsPass.cpp:86</a></div></div>
<div class="ttc" id="classefd_1_1Timer_xhtml_ac83f06f2145058ef3b3b6a53892ed39b"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml#ac83f06f2145058ef3b3b6a53892ed39b">efd::Timer::getMicroseconds</a></div><div class="ttdeci">uint64_t getMicroseconds()</div><div class="ttdoc">Gets the number of microseconds stored in mDuration. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/dc2/Timer_8cpp_source.xhtml#l00030">Timer.cpp:30</a></div></div>
<div class="ttc" id="classefd_1_1Timer_xhtml_a0b9a3de677363a5d3f995ac03a3d0a5e"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml#a0b9a3de677363a5d3f995ac03a3d0a5e">efd::Timer::stop</a></div><div class="ttdeci">void stop()</div><div class="ttdoc">Stops the timer. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/dc2/Timer_8cpp_source.xhtml#l00015">Timer.cpp:15</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a997aa1c89bcfbcd5d5d796537c71c99a"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a997aa1c89bcfbcd5d5d796537c71c99a">efd::QbitAllocator::setInlineAll</a></div><div class="ttdeci">void setInlineAll(BasisVector basis={})</div><div class="ttdoc">Flags the QbitAllocator to inline all gates, but those inside the basis vector, before mapping...</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00183">QbitAllocator.cpp:183</a></div></div>
<div class="ttc" id="RenameQbitsPass_8h_xhtml"><div class="ttname"><a href="../../d1/df0/RenameQbitsPass_8h.xhtml">RenameQbitsPass.h</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_aac5a20e6db5d358cf72d4816441d0b0d"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">efd::MappingToString</a></div><div class="ttdeci">std::string MappingToString(Mapping m)</div><div class="ttdoc">Prints the mapping m to a string and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00077">QbitAllocator.cpp:77</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_ad14c92694bf2e4c5874ac1bcc477a6dc"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#ad14c92694bf2e4c5874ac1bcc477a6dc">efd::QbitAllocator::run</a></div><div class="ttdeci">bool run(QModule::Ref qmod) override</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00122">QbitAllocator.cpp:122</a></div></div>
<div class="ttc" id="classefd_1_1Stat_xhtml"><div class="ttname"><a href="../../d6/d1d/classefd_1_1Stat.xhtml">efd::Stat</a></div><div class="ttdoc">Stats of a given type. </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d09/Stats_8h_source.xhtml#l00041">Stats.h:41</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml">efd::QModule</a></div><div class="ttdoc">Qasm module representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00013">QModule.h:13</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_aae527130ae67369e7ba62acae89438c5"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aae527130ae67369e7ba62acae89438c5">efd::QbitAllocator::setDontInline</a></div><div class="ttdeci">void setDontInline()</div><div class="ttdoc">Flags the QbitAllocator not to inline. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00188">QbitAllocator.cpp:188</a></div></div>
<div class="ttc" id="RTTI_8h_xhtml"><div class="ttname"><a href="../../d5/dfc/RTTI_8h.xhtml">RTTI.h</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml_a8c9131ca43a772179c24fa4dc9701bb2"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">efd::ArchGraph::sRef</a></div><div class="ttdeci">std::shared_ptr&lt; ArchGraph &gt; sRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00014">ArchGraph.h:14</a></div></div>
<div class="ttc" id="Utils_8h_xhtml"><div class="ttname"><a href="../../d9/ded/Utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="NodeVisitor_8h_xhtml"><div class="ttname"><a href="../../d0/d8d/NodeVisitor_8h.xhtml">NodeVisitor.h</a></div></div>
<div class="ttc" id="InlineAllPass_8h_xhtml"><div class="ttname"><a href="../../d4/d61/InlineAllPass_8h.xhtml">InlineAllPass.h</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_aa380bf007e46c8c8f09ffe7d4a552d54"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#aa380bf007e46c8c8f09ffe7d4a552d54">efd::QbitAllocator::QbitAllocator</a></div><div class="ttdeci">QbitAllocator(ArchGraph::sRef archGraph)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00091">QbitAllocator.cpp:91</a></div></div>
<div class="ttc" id="PassCache_8h_xhtml"><div class="ttname"><a href="../../db/d82/PassCache_8h.xhtml">PassCache.h</a></div></div>
<div class="ttc" id="classefd_1_1NDRegDecl_xhtml_af206910448d281670d3afe89f3ff4677"><div class="ttname"><a href="../../da/d97/classefd_1_1NDRegDecl.xhtml#af206910448d281670d3afe89f3ff4677">efd::NDRegDecl::CreateQ</a></div><div class="ttdeci">static std::unique_ptr&lt; NDRegDecl &gt; CreateQ(NDId::uRef idNode, NDInt::uRef sizeNode)</div><div class="ttdoc">Creates a new quantum register node of this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00273">Nodes.cpp:273</a></div></div>
<div class="ttc" id="classefd_1_1Timer_xhtml_a04b2df0f873780111173bc5e2a1810aa"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml#a04b2df0f873780111173bc5e2a1810aa">efd::Timer::start</a></div><div class="ttdeci">void start()</div><div class="ttdoc">Starts the timer. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/dc2/Timer_8cpp_source.xhtml#l00010">Timer.cpp:10</a></div></div>
<div class="ttc" id="classefd_1_1RenameQbitPass_xhtml_afc4aead060964c7f60ff9316cd5199a3"><div class="ttname"><a href="../../d8/dd7/classefd_1_1RenameQbitPass.xhtml#afc4aead060964c7f60ff9316cd5199a3">efd::RenameQbitPass::ArchMap</a></div><div class="ttdeci">std::unordered_map&lt; std::string, Node::Ref &gt; ArchMap</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/df0/RenameQbitsPass_8h_source.xhtml#l00018">RenameQbitsPass.h:18</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_af5639e021a0ebb35ea61b55488ce5054"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#af5639e021a0ebb35ea61b55488ce5054">efd::QbitAllocator::BasisVector</a></div><div class="ttdeci">std::vector&lt; std::string &gt; BasisVector</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00017">QbitAllocator.h:17</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a18b0007f75e6b8d651b15754ff89f910"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">efd::Fill</a></div><div class="ttdeci">void Fill(uint32_t archQ, Mapping &amp;mapping)</div><div class="ttdoc">Fills the unmapped qubits with the ones missing. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00062">QbitAllocator.cpp:62</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a186bbb1cec68c992374b8795b10af1a8"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a186bbb1cec68c992374b8795b10af1a8">efd::IdentityMapping</a></div><div class="ttdeci">Mapping IdentityMapping(uint32_t progQ)</div><div class="ttdoc">Returns an identity mapping. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00067">QbitAllocator.cpp:67</a></div></div>
<div class="ttc" id="classefd_1_1InlineAllPass_xhtml_a39637a556c08bf458f9bf20812d11470"><div class="ttname"><a href="../../d5/de3/classefd_1_1InlineAllPass.xhtml#a39637a556c08bf458f9bf20812d11470">efd::InlineAllPass::Create</a></div><div class="ttdeci">static uRef Create(std::vector&lt; std::string &gt; basis=std::vector&lt; std::string &gt;())</div><div class="ttdoc">Creates an instance of this pass. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d93/InlineAllPass_8cpp_source.xhtml#l00062">InlineAllPass.cpp:62</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a1f91f26f141eb5b2dd549121451a786c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">efd::InverseMap</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; InverseMap</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00012">Defs.h:12</a></div></div>
<div class="ttc" id="uRefCast_8h_xhtml"><div class="ttname"><a href="../../dc/d09/uRefCast_8h.xhtml">uRefCast.h</a></div></div>
<div class="ttc" id="Timer_8h_xhtml"><div class="ttname"><a href="../../dd/d27/Timer_8h.xhtml">Timer.h</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a76fb98cd4a35566d53c2f0513c5d12d1"><div class="ttname"><a href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a></div><div class="ttdeci">string to_string(efd::EnumString&lt; T, first, last &gt; &amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d62/EnumString_8h_source.xhtml#l00053">EnumString.h:53</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a12a4775008cb8b6242cedc3621d98f9c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">efd::Mapping</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Mapping</div><div class="ttdoc">Defines the type used for mapping the qubits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00011">Defs.h:11</a></div></div>
<div class="ttc" id="classefd_1_1NDValue_xhtml_a96ab9dcd008523aa2f4cfc2eb95d7178"><div class="ttname"><a href="../../df/d1b/classefd_1_1NDValue.xhtml#a96ab9dcd008523aa2f4cfc2eb95d7178">efd::NDValue::Create</a></div><div class="ttdeci">static uRef Create(T val)</div><div class="ttdoc">Creates a new instance of this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l01055">Nodes.h:1055</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_adb4ffc373d7273aefb15d2f9dcd4aeb4"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">efd::InvertMapping</a></div><div class="ttdeci">InverseMap InvertMapping(uint32_t archQ, Mapping mapping, bool fill=true)</div><div class="ttdoc">Generates an assignment mapping (maps the architecture&amp;#39;s qubits to the logical ones) of size archQ...</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00025">QbitAllocator.cpp:25</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
