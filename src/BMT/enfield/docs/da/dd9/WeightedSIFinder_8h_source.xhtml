<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: include/enfield/Support/WeightedSIFinder.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="../../dir_ca9ae9fc199b7939600155691e280c84.xhtml">enfield</a></li><li class="navelem"><a class="el" href="../../dir_71e3284cbba00b0db547557b8d5e42ce.xhtml">Support</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">WeightedSIFinder.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../da/dd9/WeightedSIFinder_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifndef __EFD_WEIGHTED_SI_FINDER_H__</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#define __EFD_WEIGHTED_SI_FINDER_H__</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d6/df7/WeightedGraph_8h.xhtml">enfield/Support/WeightedGraph.h</a>&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/dd6/SIFinder_8h.xhtml">enfield/Support/SIFinder.h</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d5/dfc/RTTI_8h.xhtml">enfield/Support/RTTI.h</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a> {</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml">   21</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml">WeightedSIFinder</a> : <span class="keyword">public</span> <a class="code" href="../../d6/d1e/classefd_1_1SIFinder.xhtml">SIFinder</a> {</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a08479d2c2447e9f0970aa59e1c192f5d">   23</a></span>&#160;            <span class="keyword">typedef</span> <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml">WeightedSIFinder&lt;T&gt;</a>* <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a08479d2c2447e9f0970aa59e1c192f5d">Ref</a>;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a8d72a9f3d6f1f6a367867533c7fe3593">   24</a></span>&#160;            <span class="keyword">typedef</span> std::unique_ptr&lt;WeightedSIFinder&lt;T&gt;&gt; <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a8d72a9f3d6f1f6a367867533c7fe3593">uRef</a>;</div><div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a37f9c153b51477590e0bf0d65eb640eb">   25</a></span>&#160;            <span class="keyword">typedef</span> std::shared_ptr&lt;WeightedSIFinder&lt;T&gt;&gt; <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a37f9c153b51477590e0bf0d65eb640eb">sRef</a>;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keyword">protected</span>:</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#ac8eb781592e7f9ae1b757285fc116ea9">   28</a></span>&#160;            <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">Graph::Ref</a> <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#ac8eb781592e7f9ae1b757285fc116ea9">mG</a>;</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#ac6e2c42a9991cef223fbf088d6f14395">   29</a></span>&#160;            <span class="keyword">typename</span> <a class="code" href="../../d2/d54/classefd_1_1WeightedGraph.xhtml">WeightedGraph&lt;T&gt;::Ref</a> <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#ac6e2c42a9991cef223fbf088d6f14395">mH</a>;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a37c9d205ca2e36dc1c1ba41383c93c62">   31</a></span>&#160;            std::vector&lt;bool&gt; <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a37c9d205ca2e36dc1c1ba41383c93c62">matched</a>;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#ae438560dcc682b6433f14557766a1eb1">   32</a></span>&#160;            std::vector&lt;uint32_t&gt; <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#ae438560dcc682b6433f14557766a1eb1">matching</a>;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a570373bdb7a7a7c6c8e1a94d86d8130c">   33</a></span>&#160;            std::vector&lt;uint32_t&gt; <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a570373bdb7a7a7c6c8e1a94d86d8130c">gOutDegree</a>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a42a95ca00ac274099901c7addf9f0f0e">WeightedSIFinder</a>();</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            uint32_t <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a185ffcb2e682e58ea81c2119337330dd">findBestVertex</a>(uint32_t a, uint32_t b);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            uint32_t <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a1c1926b684230af5db0923894c51fa00">getFirstFree</a>();</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <span class="keyword">virtual</span> <a class="code" href="../../d3/dcd/structefd_1_1SIFinder_1_1Result.xhtml">Result</a> <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a4f0581d4dd240faa364a32f6768061fe">find</a>(<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">Graph::Ref</a> g, <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">Graph::Ref</a> h) <span class="keyword">override</span>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keyword">static</span> <a class="code" href="../../d6/d1e/classefd_1_1SIFinder.xhtml#a9d46c6c006daa8ac710d393e06981bb1">uRef</a> <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a5bcd8385114a9ef46c78edefc57abd12">Create</a>();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    };</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="../../da/de1/structefd_1_1IndexOrder.xhtml">   48</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="../../da/de1/structefd_1_1IndexOrder.xhtml">IndexOrder</a> {</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="../../da/de1/structefd_1_1IndexOrder.xhtml#ac660dc34df4f867e9e783dd0e728709d">   49</a></span>&#160;        std::vector&lt;T&gt;&amp; <a class="code" href="../../da/de1/structefd_1_1IndexOrder.xhtml#ac660dc34df4f867e9e783dd0e728709d">mRef</a>;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="../../da/de1/structefd_1_1IndexOrder.xhtml#ab40ae3659af46272d20a5e66b24f22c6">   50</a></span>&#160;        <a class="code" href="../../da/de1/structefd_1_1IndexOrder.xhtml#ab40ae3659af46272d20a5e66b24f22c6">IndexOrder</a>(std::vector&lt;T&gt;&amp; ref) : <a class="code" href="../../da/de1/structefd_1_1IndexOrder.xhtml#ac660dc34df4f867e9e783dd0e728709d">mRef</a>(ref) {}</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="../../da/de1/structefd_1_1IndexOrder.xhtml#ae641077c98d4c48c0144e8f64b6fef4a">   51</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="../../da/de1/structefd_1_1IndexOrder.xhtml#ae641077c98d4c48c0144e8f64b6fef4a">operator()</a>(<span class="keyword">const</span> uint32_t&amp; l, <span class="keyword">const</span> uint32_t&amp; r) { <span class="keywordflow">return</span> <a class="code" href="../../da/de1/structefd_1_1IndexOrder.xhtml#ac660dc34df4f867e9e783dd0e728709d">mRef</a>[l] &lt; <a class="code" href="../../da/de1/structefd_1_1IndexOrder.xhtml#ac660dc34df4f867e9e783dd0e728709d">mRef</a>[r]; }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    };</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a42a95ca00ac274099901c7addf9f0f0e">   56</a></span>&#160;<a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a42a95ca00ac274099901c7addf9f0f0e">efd::WeightedSIFinder&lt;T&gt;::WeightedSIFinder</a>() {}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a185ffcb2e682e58ea81c2119337330dd">   59</a></span>&#160;uint32_t <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a185ffcb2e682e58ea81c2119337330dd">efd::WeightedSIFinder&lt;T&gt;::findBestVertex</a>(uint32_t a, uint32_t b) {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    uint32_t gSize = mG-&gt;size();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    uint32_t hSize = mH-&gt;size();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    uint32_t bOutDegree = mH-&gt;outDegree(b);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    std::vector&lt;uint32_t&gt; gCandidates;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">if</span> (a == hSize) {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">for</span> (uint32_t u = 0; u &lt; gSize; ++u) {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            gCandidates.push_back(u);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">auto</span>&amp; succ = mG-&gt;succ(matching[a]);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        gCandidates = std::vector&lt;uint32_t&gt;(succ.begin(), succ.end());</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">int</span> tightestDiff = gSize;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    uint32_t tightestDiffId = gSize;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    uint32_t tightestPosId = gSize;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = gCandidates.size(); i &lt; e; ++i) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        uint32_t v = gCandidates[i];</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span> (!matched[v]) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordtype">int</span> ltight = gOutDegree[v] - bOutDegree;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">if</span> (ltight &gt;= 0 &amp;&amp; ltight &lt; tightestDiff) {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                tightestPosId = v;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (abs(ltight) &lt; tightestDiff) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                tightestDiffId = v;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                tightestDiff = ltight;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    uint32_t u;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">if</span> (tightestPosId != gSize) u = tightestPosId;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">else</span> u = tightestDiffId;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">if</span> (u == gSize) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">// Forget about this vertex.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">return</span> gSize;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    matched[u] = <span class="keyword">true</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> v : mG-&gt;pred(u)) --gOutDegree[v];</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> u;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a1c1926b684230af5db0923894c51fa00">  107</a></span>&#160;uint32_t <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a1c1926b684230af5db0923894c51fa00">efd::WeightedSIFinder&lt;T&gt;::getFirstFree</a>() {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    uint32_t gSize = mG-&gt;size();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">for</span> (uint32_t u = 0; u &lt; gSize; ++u) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">if</span> (!matched[u]) <span class="keywordflow">return</span> u;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Not enough qubits?&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(ExitCode::EXIT_unreachable);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a4f0581d4dd240faa364a32f6768061fe">  119</a></span>&#160;<a class="code" href="../../d3/dcd/structefd_1_1SIFinder_1_1Result.xhtml">efd::SIFinder::Result</a> <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a4f0581d4dd240faa364a32f6768061fe">efd::WeightedSIFinder&lt;T&gt;::find</a>(<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">Graph::Ref</a> g, <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">Graph::Ref</a> h) {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span> (!h-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a108a708923dcec909a20bd52417127b8">isWeighted</a>()) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Trying to use weighted partial matching on unweighted graph.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(ExitCode::EXIT_unreachable);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    mG = g;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    mH = dynCast&lt;WeightedGraph&lt;T&gt;&gt;(h);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span> (mH == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Graph &#39;h&#39; is not of the specified type.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(ExitCode::EXIT_unreachable);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    uint32_t hSize = mH-&gt;size();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    uint32_t gSize = mG-&gt;size();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// Copying the out-degree of each vertex of \p mG-&gt;</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    gOutDegree.assign(gSize, 0);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">for</span> (uint32_t u = 0; u &lt; gSize; ++u) {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        gOutDegree[u] = mG-&gt;outDegree(u);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// Computing the weight of each vertex.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// It is computed by summing all edges that have the vertex as its source.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// After that, we sort the indexes of the vertices by their weight.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    std::vector&lt;T&gt; w(hSize, 0);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">for</span> (uint32_t a = 0; a &lt; hSize; ++a) {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> b : mH-&gt;succ(a))</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            w[a] += mH-&gt;getW(a, b);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    std::vector&lt;uint32_t&gt; wOrdIdx(hSize, 0);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; hSize; ++i) wOrdIdx[i] = i;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="../../da/de1/structefd_1_1IndexOrder.xhtml">IndexOrder&lt;T&gt;</a> order(w);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    std::sort(wOrdIdx.begin(), wOrdIdx.end(), order);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// Start assigning (mapping) the vertices</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    std::vector&lt;uint32_t&gt; notMatched;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    matching.assign(hSize, hSize);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    matched.assign(gSize, <span class="keyword">false</span>);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = hSize-1; i &gt;= 0; --i) {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        uint32_t a = wOrdIdx[i];</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="comment">// Vertex a from mH-&gt;has not been matched yet.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">if</span> (matching[a] == hSize) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            std::vector&lt;uint32_t&gt; parent(hSize, hSize);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            std::vector&lt;bool&gt; inQueue(hSize, <span class="keyword">false</span>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            std::queue&lt;uint32_t&gt; q;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            q.push(a);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            inQueue[a] = <span class="keyword">true</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="comment">// BFS from &#39;a&#39; matching its successors.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordflow">while</span> (!q.empty()) {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                a = q.front();</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                q.pop();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                uint32_t u = findBestVertex(parent[a], a);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keywordflow">if</span> (u == gSize) {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    notMatched.push_back(a);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    matching[a] = u;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <span class="keywordflow">for</span> (<span class="keyword">auto</span> b : mH-&gt;succ(a)) {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        <span class="keywordflow">if</span> (matching[b] == hSize &amp;&amp; !inQueue[b]) {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                            parent[b] = a;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                            q.push(b);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                            inQueue[b] = <span class="keyword">true</span>;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> a : notMatched) {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">if</span> (matching[a] == hSize) {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            uint32_t u = getFirstFree();</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            matching[a] = u;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">return</span> { <span class="keyword">true</span>, matching };</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a8d72a9f3d6f1f6a367867533c7fe3593">efd::WeightedSIFinder&lt;T&gt;::uRef</a></div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a5bcd8385114a9ef46c78edefc57abd12">  209</a></span>&#160;<a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a5bcd8385114a9ef46c78edefc57abd12">efd::WeightedSIFinder&lt;T&gt;::Create</a>() {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d6/d1e/classefd_1_1SIFinder.xhtml#a9d46c6c006daa8ac710d393e06981bb1">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml">WeightedSIFinder&lt;T&gt;</a>());</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_a1c1926b684230af5db0923894c51fa00"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a1c1926b684230af5db0923894c51fa00">efd::WeightedSIFinder::getFirstFree</a></div><div class="ttdeci">uint32_t getFirstFree()</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00107">WeightedSIFinder.h:107</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="SIFinder_8h_xhtml"><div class="ttname"><a href="../../d7/dd6/SIFinder_8h.xhtml">SIFinder.h</a></div></div>
<div class="ttc" id="WeightedGraph_8h_xhtml"><div class="ttname"><a href="../../d6/df7/WeightedGraph_8h.xhtml">WeightedGraph.h</a></div></div>
<div class="ttc" id="structefd_1_1IndexOrder_xhtml_ae641077c98d4c48c0144e8f64b6fef4a"><div class="ttname"><a href="../../da/de1/structefd_1_1IndexOrder.xhtml#ae641077c98d4c48c0144e8f64b6fef4a">efd::IndexOrder::operator()</a></div><div class="ttdeci">bool operator()(const uint32_t &amp;l, const uint32_t &amp;r)</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00051">WeightedSIFinder.h:51</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="structefd_1_1IndexOrder_xhtml_ab40ae3659af46272d20a5e66b24f22c6"><div class="ttname"><a href="../../da/de1/structefd_1_1IndexOrder.xhtml#ab40ae3659af46272d20a5e66b24f22c6">efd::IndexOrder::IndexOrder</a></div><div class="ttdeci">IndexOrder(std::vector&lt; T &gt; &amp;ref)</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00050">WeightedSIFinder.h:50</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_a37f9c153b51477590e0bf0d65eb640eb"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a37f9c153b51477590e0bf0d65eb640eb">efd::WeightedSIFinder::sRef</a></div><div class="ttdeci">std::shared_ptr&lt; WeightedSIFinder&lt; T &gt; &gt; sRef</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00025">WeightedSIFinder.h:25</a></div></div>
<div class="ttc" id="classefd_1_1SIFinder_xhtml"><div class="ttname"><a href="../../d6/d1e/classefd_1_1SIFinder.xhtml">efd::SIFinder</a></div><div class="ttdoc">Interface for implementing different algorithms for finding matchings (subgraph isomorphism). </div><div class="ttdef"><b>Definition:</b> <a href="../../d7/dd6/SIFinder_8h_source.xhtml#l00013">SIFinder.h:13</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="RTTI_8h_xhtml"><div class="ttname"><a href="../../d5/dfc/RTTI_8h.xhtml">RTTI.h</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_ac6e2c42a9991cef223fbf088d6f14395"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#ac6e2c42a9991cef223fbf088d6f14395">efd::WeightedSIFinder::mH</a></div><div class="ttdeci">WeightedGraph&lt; T &gt;::Ref mH</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00029">WeightedSIFinder.h:29</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_a08479d2c2447e9f0970aa59e1c192f5d"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a08479d2c2447e9f0970aa59e1c192f5d">efd::WeightedSIFinder::Ref</a></div><div class="ttdeci">WeightedSIFinder&lt; T &gt; * Ref</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00023">WeightedSIFinder.h:23</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_ac8eb781592e7f9ae1b757285fc116ea9"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#ac8eb781592e7f9ae1b757285fc116ea9">efd::WeightedSIFinder::mG</a></div><div class="ttdeci">Graph::Ref mG</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00028">WeightedSIFinder.h:28</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml">efd::WeightedSIFinder</a></div><div class="ttdoc">Extends the SIFinder class for weighted graphs. </div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00021">WeightedSIFinder.h:21</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_a37c9d205ca2e36dc1c1ba41383c93c62"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a37c9d205ca2e36dc1c1ba41383c93c62">efd::WeightedSIFinder::matched</a></div><div class="ttdeci">std::vector&lt; bool &gt; matched</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00031">WeightedSIFinder.h:31</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_ae438560dcc682b6433f14557766a1eb1"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#ae438560dcc682b6433f14557766a1eb1">efd::WeightedSIFinder::matching</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; matching</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00032">WeightedSIFinder.h:32</a></div></div>
<div class="ttc" id="classefd_1_1WeightedGraph_xhtml"><div class="ttname"><a href="../../d2/d54/classefd_1_1WeightedGraph.xhtml">efd::WeightedGraph</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d6/df7/WeightedGraph_8h_source.xhtml#l00013">WeightedGraph.h:13</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_a4f0581d4dd240faa364a32f6768061fe"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a4f0581d4dd240faa364a32f6768061fe">efd::WeightedSIFinder::find</a></div><div class="ttdeci">virtual Result find(Graph::Ref g, Graph::Ref h) override</div><div class="ttdoc">Returns a valid matching of h in g. </div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00119">WeightedSIFinder.h:119</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_a185ffcb2e682e58ea81c2119337330dd"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a185ffcb2e682e58ea81c2119337330dd">efd::WeightedSIFinder::findBestVertex</a></div><div class="ttdeci">uint32_t findBestVertex(uint32_t a, uint32_t b)</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00059">WeightedSIFinder.h:59</a></div></div>
<div class="ttc" id="structefd_1_1IndexOrder_xhtml_ac660dc34df4f867e9e783dd0e728709d"><div class="ttname"><a href="../../da/de1/structefd_1_1IndexOrder.xhtml#ac660dc34df4f867e9e783dd0e728709d">efd::IndexOrder::mRef</a></div><div class="ttdeci">std::vector&lt; T &gt; &amp; mRef</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00049">WeightedSIFinder.h:49</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a108a708923dcec909a20bd52417127b8"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a108a708923dcec909a20bd52417127b8">efd::Graph::isWeighted</a></div><div class="ttdeci">bool isWeighted() const</div><div class="ttdoc">Returns true if this is a weighted graph. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00072">Graph.cpp:72</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml">efd::Graph</a></div><div class="ttdoc">Graph representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d16/Graph_8h_source.xhtml#l00011">Graph.h:11</a></div></div>
<div class="ttc" id="structefd_1_1SIFinder_1_1Result_xhtml"><div class="ttname"><a href="../../d3/dcd/structefd_1_1SIFinder_1_1Result.xhtml">efd::SIFinder::Result</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d7/dd6/SIFinder_8h_source.xhtml#l00019">SIFinder.h:19</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_a570373bdb7a7a7c6c8e1a94d86d8130c"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a570373bdb7a7a7c6c8e1a94d86d8130c">efd::WeightedSIFinder::gOutDegree</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; gOutDegree</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00033">WeightedSIFinder.h:33</a></div></div>
<div class="ttc" id="classefd_1_1SIFinder_xhtml_a9d46c6c006daa8ac710d393e06981bb1"><div class="ttname"><a href="../../d6/d1e/classefd_1_1SIFinder.xhtml#a9d46c6c006daa8ac710d393e06981bb1">efd::SIFinder::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; SIFinder &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/dd6/SIFinder_8h_source.xhtml#l00016">SIFinder.h:16</a></div></div>
<div class="ttc" id="structefd_1_1IndexOrder_xhtml"><div class="ttname"><a href="../../da/de1/structefd_1_1IndexOrder.xhtml">efd::IndexOrder</a></div><div class="ttdoc">Helper class to sort an index vector based on a value vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00048">WeightedSIFinder.h:48</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_a42a95ca00ac274099901c7addf9f0f0e"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a42a95ca00ac274099901c7addf9f0f0e">efd::WeightedSIFinder::WeightedSIFinder</a></div><div class="ttdeci">WeightedSIFinder()</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00056">WeightedSIFinder.h:56</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_a5bcd8385114a9ef46c78edefc57abd12"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a5bcd8385114a9ef46c78edefc57abd12">efd::WeightedSIFinder::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdoc">Creates an instance of this class. </div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00209">WeightedSIFinder.h:209</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIFinder_xhtml_a8d72a9f3d6f1f6a367867533c7fe3593"><div class="ttname"><a href="../../d5/db6/classefd_1_1WeightedSIFinder.xhtml#a8d72a9f3d6f1f6a367867533c7fe3593">efd::WeightedSIFinder::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; WeightedSIFinder&lt; T &gt; &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dd9/WeightedSIFinder_8h_source.xhtml#l00024">WeightedSIFinder.h:24</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:34 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
