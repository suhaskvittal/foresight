<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/Allocators/BoundedMappingTreeQAllocator.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li><li class="navelem"><a class="el" href="../../dir_06974191db7fbe66527a95ceac77ccfb.xhtml">Allocators</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">BoundedMappingTreeQAllocator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d6/daf/BoundedMappingTreeQAllocator_8h.xhtml">enfield/Transform/Allocators/BoundedMappingTreeQAllocator.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/d1c/DefaultBMTQAllocatorImpl_8h.xhtml">enfield/Transform/Allocators/BMT/DefaultBMTQAllocatorImpl.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/d82/PassCache_8h.xhtml">enfield/Transform/PassCache.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/ded/Utils_8h.xhtml">enfield/Transform/Utils.h</a>&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d0/d8d/NodeVisitor_8h.xhtml">enfield/Analysis/NodeVisitor.h</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/dfc/ApproxTSFinder_8h.xhtml">enfield/Support/ApproxTSFinder.h</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/d41/CommandLine_8h.xhtml">enfield/Support/CommandLine.h</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/d73/Defs_8h.xhtml">enfield/Support/Defs.h</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dd/d27/Timer_8h.xhtml">enfield/Support/Timer.h</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">using namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">using namespace </span>bmt;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">static</span> <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;uint32_t&gt;</a> MaxChildren</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;(<span class="stringliteral">&quot;-bmt-max-children&quot;</span>, <span class="stringliteral">&quot;Limits the max number of children per partial solution.&quot;</span>,</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; std::numeric_limits&lt;uint32_t&gt;::max(), <span class="keyword">false</span>);</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">static</span> <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;uint32_t&gt;</a> MaxPartialSolutions</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;(<span class="stringliteral">&quot;-bmt-max-partial&quot;</span>, <span class="stringliteral">&quot;Limits the max number of partial solutions per step.&quot;</span>,</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; std::numeric_limits&lt;uint32_t&gt;::max(), <span class="keyword">false</span>);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a6f54d1a0a8af4d9699d29a36d5ec979c">   24</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a6f54d1a0a8af4d9699d29a36d5ec979c">efd::bmt::operator&lt;</a>(<span class="keyword">const</span> <a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml">NodeCandidate</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml">NodeCandidate</a>&amp; rhs) {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">if</span> (lhs.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a95a5d52f408f2ec23c7489a0803a5825">mWeight</a> != rhs.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a95a5d52f408f2ec23c7489a0803a5825">mWeight</a>) <span class="keywordflow">return</span> lhs.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a95a5d52f408f2ec23c7489a0803a5825">mWeight</a> &lt; rhs.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a95a5d52f408f2ec23c7489a0803a5825">mWeight</a>;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordflow">return</span> lhs.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5702bcb70d8ba1dbbc1d5a49961bc6a9">mNode</a> &lt; rhs.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5702bcb70d8ba1dbbc1d5a49961bc6a9">mNode</a>;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;}</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// --------------------- NodeCandidatesGenerator ------------------------</span></div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a749790282a861d8ae533c15ed838f108">   30</a></span>&#160;<a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a749790282a861d8ae533c15ed838f108">NodeCandidatesGenerator::NodeCandidatesGenerator</a>() : mInitialized(false), mMod(nullptr) {}</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a07dcea8bfe5146473c125e8b720bb2ca">   32</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a07dcea8bfe5146473c125e8b720bb2ca">NodeCandidatesGenerator::setQModule</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a484a8b4cf326cf97dc066fc5304c69b2">mMod</a> = qmod;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a62f8c7e4b7de827a780872a818467c92">   36</a></span>&#160;std::vector&lt;Node::Ref&gt; <a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a62f8c7e4b7de827a780872a818467c92">NodeCandidatesGenerator::generate</a>() {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    checkInitialized();</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#aae8b813abf257e7bf69303169c88bafc">finished</a>()) <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a501cff508d30432db61f05e918571708">generateImpl</a>();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#aae8b813abf257e7bf69303169c88bafc">   42</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#aae8b813abf257e7bf69303169c88bafc">NodeCandidatesGenerator::finished</a>() {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    checkInitialized();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#afa7628594a0cb61c69255fb831772f5f">finishedImpl</a>();</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keywordtype">void</span> NodeCandidatesGenerator::checkInitialized() {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">if</span> (!mInitialized) {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;`NodeCandidatesGenerator` not initialized.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a26193d1189aa8f667e5e86f3e9b18ffc">   54</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a26193d1189aa8f667e5e86f3e9b18ffc">NodeCandidatesGenerator::initialize</a>() {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    mInitialized = <span class="keyword">true</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a484a8b4cf326cf97dc066fc5304c69b2">mMod</a> == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Set the `QModule` for NodeCandidatesGenerator.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a43228d164fad70f6099bc5eedb098f1c">initializeImpl</a>();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a84e966a21bda946c2c006a816dd8a73f">   65</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a84e966a21bda946c2c006a816dd8a73f">NodeCandidatesGenerator::signalProcessed</a>(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> node) {}</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">// --------------------- SwapCostEstimator ------------------------</span></div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a8315637f359d32ecad480e146f300b36">   68</a></span>&#160;<a class="code" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a8315637f359d32ecad480e146f300b36">SwapCostEstimator::SwapCostEstimator</a>() : mG(nullptr) {}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a961865eefa4ae383c6f96de88f709d1d">   70</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a961865eefa4ae383c6f96de88f709d1d">SwapCostEstimator::setGraph</a>(<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">Graph::Ref</a> g) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a3120ee9a6a6451b68678266f887341ec">mG</a> = g;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#ac9ab4a482467ebe0e1be2d96c4e3df21">preprocess</a>();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a9c18a2822396045d1b8832afddaf74ea">   75</a></span>&#160;uint32_t <a class="code" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a9c18a2822396045d1b8832afddaf74ea">SwapCostEstimator::estimate</a>(<span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; fromM, <span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; toM) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#af213c604a655aedee2ca67fefb2992c8">checkGraphSet</a>();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a63bbfd0654a51eb98a47188b05b778c3">estimateImpl</a>(fromM, toM);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#af213c604a655aedee2ca67fefb2992c8">   80</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#af213c604a655aedee2ca67fefb2992c8">SwapCostEstimator::checkGraphSet</a>() {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a3120ee9a6a6451b68678266f887341ec">mG</a> == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Set the `Graph` for SwapCostEstimator.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">// --------------------- BoundedMappingTreeQAllocator ------------------------</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a> {</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml">   89</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml">NodeRenameVisitor</a> : <span class="keyword">public</span> <a class="code" href="../../d8/d5d/classefd_1_1NodeVisitor.xhtml">NodeVisitor</a> {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; mMap;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">XbitToNumber</a>&amp; mXtoN;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml">ArchGraph::Ref</a> mArchGraph;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a366c12b342093952ced6c2087a177f77">NodeRenameVisitor</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; m,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                              <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">XbitToNumber</a>&amp; xtoN,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                              <a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml">ArchGraph::Ref</a> archGraph);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a222cfde4b0f189dfd4d73efc3a071904">visitNDQOp</a>(<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a> qop);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">visit</a>(<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">NDQOpMeasure::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">visit</a>(<a class="code" href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">NDQOpReset::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">visit</a>(<a class="code" href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">NDQOpU::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">visit</a>(<a class="code" href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">NDQOpCX::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">visit</a>(<a class="code" href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">NDQOpBarrier::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">visit</a>(<a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">NDQOpGen::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">visit</a>(<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    };</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a366c12b342093952ced6c2087a177f77">  112</a></span>&#160;<a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a366c12b342093952ced6c2087a177f77">NodeRenameVisitor::NodeRenameVisitor</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; m,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                     <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">XbitToNumber</a>&amp; xtoN,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                     <a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml">ArchGraph::Ref</a> archGraph)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    : mMap(m), mXtoN(xtoN), mArchGraph(archGraph) {}</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a222cfde4b0f189dfd4d73efc3a071904">  117</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a222cfde4b0f189dfd4d73efc3a071904">NodeRenameVisitor::visitNDQOp</a>(<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a> qop) {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">auto</span> qargs = qop-&gt;<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml#af7ef43289355c5bb047a46419177c8ed">getQArgs</a>();</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="../../da/ddd/classefd_1_1NDList.xhtml#a381f5bae7577d37327a824973f81d494">NDList::uRef</a> newQArgs = <a class="code" href="../../da/ddd/classefd_1_1NDList.xhtml#a5e3e2ab6234caa816599eb51766210b7">NDList::Create</a>();</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; qarg : *qargs) {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        uint32_t pseudoQUId = mXtoN.<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">getQUId</a>(qarg-&gt;toString(<span class="keyword">false</span>));</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        uint32_t physicalQUId = mMap[pseudoQUId];</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        newQArgs-&gt;addChild(mArchGraph-&gt;<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a1388225779727295176780b9a68aedf2">getNode</a>(physicalQUId)-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a6c85c9bd21014b73497de741cc75f706">clone</a>());</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    qop-&gt;<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml#af66ad886623f70ee24c756d424694dae">setQArgs</a>(std::move(newQArgs));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">  130</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">NodeRenameVisitor::visit</a>(<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">NDQOpMeasure::Ref</a> ref) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a222cfde4b0f189dfd4d73efc3a071904">visitNDQOp</a>((<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a>) ref);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#aed18aea59ccd2d25c3efd855d5ee462b">  134</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">NodeRenameVisitor::visit</a>(<a class="code" href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">NDQOpReset::Ref</a> ref) {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a222cfde4b0f189dfd4d73efc3a071904">visitNDQOp</a>((<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a>) ref);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#afe10daf8e8c39a67096b89607fe124a8">  138</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">NodeRenameVisitor::visit</a>(<a class="code" href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">NDQOpU::Ref</a> ref) {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a222cfde4b0f189dfd4d73efc3a071904">visitNDQOp</a>((<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a>) ref);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a7ab54079c8856dd20c3d8c97d9122309">  142</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">NodeRenameVisitor::visit</a>(<a class="code" href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">NDQOpCX::Ref</a> ref) {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a222cfde4b0f189dfd4d73efc3a071904">visitNDQOp</a>((<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a>) ref);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a87a3a39ac049f55867f2e97ae7abc4a3">  146</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">NodeRenameVisitor::visit</a>(<a class="code" href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">NDQOpBarrier::Ref</a> ref) {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a222cfde4b0f189dfd4d73efc3a071904">visitNDQOp</a>((<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a>) ref);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#ac0a78e435a7f982914e3151830a851da">  150</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">NodeRenameVisitor::visit</a>(<a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">NDQOpGen::Ref</a> ref) {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a222cfde4b0f189dfd4d73efc3a071904">visitNDQOp</a>((<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a>) ref);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a5467c5a2b5f56caba9a49b1118212a6b">  154</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">NodeRenameVisitor::visit</a>(<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ref) {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    ref-&gt;<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml#ae5c408d49862e644f1d299ab5b2f121d">getQOp</a>()-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#ab813c60af1717cf50e92a28b274c24ef">apply</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">// --------------------- BoundedMappingTreeQAllocator ------------------------</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;BoundedMappingTreeQAllocator::BoundedMappingTreeQAllocator(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">ArchGraph::sRef</a> ag)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml">QbitAllocator</a>(ag),</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      mNCGenerator(nullptr),</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      mChildrenCSelector(nullptr),</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      mPartialSolutionCSelector(nullptr),</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      mCostEstimator(nullptr),</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      mLQPProcessor(nullptr),</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      mMSSelector(nullptr),</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      mTSFinder(nullptr) {}</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;BoundedMappingTreeQAllocator::extendCandidates(<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml">Dep</a>&amp; dep,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                               <span class="keyword">const</span> std::vector&lt;bool&gt;&amp; mapped,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a>&amp; candidates,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                               <span class="keywordtype">bool</span> ignoreChildrenLimit) {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">typedef</span> std::pair&lt;uint32_t, uint32_t&gt; Pair;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">typedef</span> std::vector&lt;Pair&gt; PairVector;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    uint32_t a = dep.<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">mFrom</a>, b = dep.<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">mTo</a>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    uint32_t childrenBound = (ignoreChildrenLimit) ? _undef : <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a3d1f3d488b4ab5fa270373462f88bca6">mMaxChildren</a>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a> newCandidates;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> cand : candidates) {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        PairVector pairV;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a> localCandidates;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keyword">auto</span> inv = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>, cand.m, <span class="keyword">false</span>);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">if</span> (mapped[a] &amp;&amp; mapped[b]) {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            uint32_t u = cand.m[a], v = cand.m[b];</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(u, v) || <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(v, u))</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                pairV.push_back(Pair(u, v));</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!mapped[a] &amp;&amp; !mapped[b]) {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="keywordflow">for</span> (uint32_t u = 0; u &lt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>; ++u) {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keywordflow">if</span> (inv[u] != _undef) <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keywordflow">for</span> (uint32_t v : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;adj(u)) {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keywordflow">if</span> (inv[v] != _undef) <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    pairV.push_back(Pair(u, v));</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            uint32_t mappedV;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">if</span> (!mapped[a]) {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                mappedV = b;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                mappedV = a;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            uint32_t u = cand.m[mappedV];</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keywordflow">for</span> (uint32_t v : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;adj(u)) {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keywordflow">if</span> (inv[v] == _undef) {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <span class="keywordflow">if</span> (mappedV == a) {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        pairV.push_back(Pair(u, v));</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                        pairV.push_back(Pair(v, u));</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; pair : pairV) {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keyword">auto</span> cpy = cand;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            cpy.m[a] = pair.first;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            cpy.m[b] = pair.second;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(pair.first, pair.second)) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                cpy.cost += <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a>.getVal();</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            </div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            localCandidates.push_back(cpy);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a> selected = <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5715eee30034cab76a05ec768ff093c3">mChildrenCSelector</a>-&gt;select(childrenBound, localCandidates);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        newCandidates.insert(newCandidates.end(), selected.begin(), selected.end());</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5b402c56e1e684dc46c4a627d8f71b5f">mPartialSolutionCSelector</a>-&gt;select(<a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#abc93b04e6465c6825d7be4355c012767">mMaxPartial</a>, newCandidates);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;std::priority_queue&lt;NodeCandidate&gt;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;BoundedMappingTreeQAllocator::rankCandidates(<span class="keyword">const</span> std::vector&lt;Node::Ref&gt;&amp; nodeCandidates,</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                             <span class="keyword">const</span> std::vector&lt;bool&gt;&amp; mapped,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                             <span class="keyword">const</span> std::vector&lt;std::set&lt;uint32_t&gt;&gt;&amp; neighbors) {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    std::priority_queue&lt;NodeCandidate&gt; queue;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> node : nodeCandidates) {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml">NodeCandidate</a> nCand;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5702bcb70d8ba1dbbc1d5a49961bc6a9">mNode</a> = node;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5169b4baac5e7edc5b27d9661da03ee7">mDeps</a> = <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aac0b28355a80a0f614898b673ae3c56c">mDBuilder</a>.<a class="code" href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml#a1dd2f459d6b2107cc199d697e9ecffdb">getDeps</a>(node);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keyword">auto</span> depsSize = nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5169b4baac5e7edc5b27d9661da03ee7">mDeps</a>.<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a774330d9946ed2211aa8222a7e2453a4">size</a>();</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">if</span> (depsSize == 0) {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a95a5d52f408f2ec23c7489a0803a5825">mWeight</a> = 0;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (depsSize == 1) {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            uint32_t a = nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5169b4baac5e7edc5b27d9661da03ee7">mDeps</a>[0].mFrom;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            uint32_t b = nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5169b4baac5e7edc5b27d9661da03ee7">mDeps</a>[0].mTo;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keywordflow">if</span> (mapped[a] &amp;&amp; mapped[b] &amp;&amp; neighbors[a].find(b) != neighbors[a].end()) {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a95a5d52f408f2ec23c7489a0803a5825">mWeight</a> = 1;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!mapped[a] &amp;&amp; !mapped[b]) {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a95a5d52f408f2ec23c7489a0803a5825">mWeight</a> = 3;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!mapped[a] || !mapped[b]) {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a95a5d52f408f2ec23c7489a0803a5825">mWeight</a> = 2;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a95a5d52f408f2ec23c7489a0803a5825">mWeight</a> = 4;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Instructions with more than one dependency not supported &quot;</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; node-&gt;toString(<span class="keyword">false</span>) &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a1414203994e495fe3ee8884d6e117bda">ExitCode::EXIT_multi_deps</a>);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        queue.push(nCand);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">if</span> (queue.empty()) {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;`pQueue` empty.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">return</span> queue;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#adcab493369b2583fc15a8f3581362620">MCandidateVCollection</a> BoundedMappingTreeQAllocator::phase1() {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// First Phase:</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="comment">//     in this phase, we divide the program in layers, such that each layer is satisfied</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">//     by any of the mappings inside &#39;candidates&#39;.</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="comment">//</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a3010278854a9674631baf4f871c43dc6">mPP</a>.push_back(<a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#aed26aa182d1884b63bcd51a2d94b1e0b">PPartition</a>());</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a> candidates { { <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>, _undef), 0 } };</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#adcab493369b2583fc15a8f3581362620">MCandidateVCollection</a> collection;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    std::vector&lt;bool&gt; mapped(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>, <span class="keyword">false</span>);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    std::vector&lt;std::set&lt;uint32_t&gt;&gt; neighbors(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;PHASE 1 &gt;&gt;&gt;&gt; Solving SIP Instances&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a3ab6f82f2df49bbde5c943bbe60c3cf3a8b04d5e3775d298e78455efc5ca404d5">first</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">while</span> (!<a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aa6125ae88ccfbb49674c0d554379ec08">mNCGenerator</a>-&gt;finished()) {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keyword">auto</span> nodeCandidates = <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aa6125ae88ccfbb49674c0d554379ec08">mNCGenerator</a>-&gt;generate();</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keyword">auto</span> pQueue = rankCandidates(nodeCandidates, mapped, neighbors);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml">NodeCandidate</a> nCand;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">MCandidateVector</a> newCandidates;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keywordflow">while</span> (!pQueue.empty()) {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            nCand = pQueue.top();</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            pQueue.pop();</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keyword">auto</span> depsSize = nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5169b4baac5e7edc5b27d9661da03ee7">mDeps</a>.<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a774330d9946ed2211aa8222a7e2453a4">size</a>();</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="keywordflow">if</span> (depsSize == 0) {</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                newCandidates = candidates;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (depsSize == 1) {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                newCandidates = extendCandidates(nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5169b4baac5e7edc5b27d9661da03ee7">mDeps</a>[0],</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                                 mapped,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                                 candidates,</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                                 <a class="code" href="../../d4/deb/namespaceefd.xhtml#a3ab6f82f2df49bbde5c943bbe60c3cf3a8b04d5e3775d298e78455efc5ca404d5">first</a>);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                <a class="code" href="../../d4/deb/namespaceefd.xhtml#a3ab6f82f2df49bbde5c943bbe60c3cf3a8b04d5e3775d298e78455efc5ca404d5">first</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                <span class="keywordflow">if</span> (!newCandidates.empty())</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        }</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keywordflow">if</span> (newCandidates.empty()) {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            collection.push_back(candidates);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="comment">// Reseting all data from the last partition.</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            candidates = { { <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>, _undef), 0 } };</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            mapped.assign(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>, <span class="keyword">false</span>);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a3010278854a9674631baf4f871c43dc6">mPP</a>.push_back(<a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#aed26aa182d1884b63bcd51a2d94b1e0b">PPartition</a>());</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#a3ab6f82f2df49bbde5c943bbe60c3cf3a8b04d5e3775d298e78455efc5ca404d5">first</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keywordflow">if</span> (!nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5169b4baac5e7edc5b27d9661da03ee7">mDeps</a>.<a class="code" href="../../d1/dca/structefd_1_1Dependencies.xhtml#a5c78bf4763aeb36f8dd32b35fd99bca8">empty</a>()) {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                <span class="keyword">auto</span> dep = nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5169b4baac5e7edc5b27d9661da03ee7">mDeps</a>[0];</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                uint32_t a = dep.<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">mFrom</a>, b = dep.<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">mTo</a>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                mapped[a] = <span class="keyword">true</span>;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                mapped[b] = <span class="keyword">true</span>;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                neighbors[a].insert(b);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                neighbors[b].insert(a);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                candidates = newCandidates;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a3010278854a9674631baf4f871c43dc6">mPP</a>.back().push_back(nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5702bcb70d8ba1dbbc1d5a49961bc6a9">mNode</a>);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aa6125ae88ccfbb49674c0d554379ec08">mNCGenerator</a>-&gt;signalProcessed(nCand.<a class="code" href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5702bcb70d8ba1dbbc1d5a49961bc6a9">mNode</a>);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    }</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    collection.push_back(candidates);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">return</span> collection;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<a class="code" href="../../dc/d18/structefd_1_1bmt_1_1MappingSeq.xhtml">MappingSeq</a> BoundedMappingTreeQAllocator::tracebackPath(<span class="keyword">const</span> <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a75ab4a9032ad7dc808fe170911a1198c">TIMatrix</a>&amp; mem, uint32_t idx) {</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="../../dc/d18/structefd_1_1bmt_1_1MappingSeq.xhtml">MappingSeq</a> mapSeq;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    uint32_t nofLayers = mem.size();</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    mapSeq.<a class="code" href="../../dc/d18/structefd_1_1bmt_1_1MappingSeq.xhtml#aa0ddfc8001f7f9132d62108a2d09189e">mappingCost</a> = mem[nofLayers - 1][idx].mappingCost;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    </div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">for</span> (int32_t i = nofLayers - 1; i &gt;= 0; --i) {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keyword">auto</span> info = mem[i][idx];</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        mapSeq.<a class="code" href="../../dc/d18/structefd_1_1bmt_1_1MappingSeq.xhtml#af214238fc5a3f18f91bec5e8c0912d79">mappingV</a>.push_back(info.m);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        idx = info.parent;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    </div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    std::reverse(mapSeq.<a class="code" href="../../dc/d18/structefd_1_1bmt_1_1MappingSeq.xhtml#af214238fc5a3f18f91bec5e8c0912d79">mappingV</a>.begin(), mapSeq.<a class="code" href="../../dc/d18/structefd_1_1bmt_1_1MappingSeq.xhtml#af214238fc5a3f18f91bec5e8c0912d79">mappingV</a>.end());</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">return</span> mapSeq;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<a class="code" href="../../d4/deb/namespaceefd.xhtml#a8c6eb9e95f5fad95ab54779a502ea54f">SwapSeq</a> BoundedMappingTreeQAllocator::getTransformingSwapsFor(<span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; fromM,</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                                              <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> toM) {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>; ++i) {</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keywordflow">if</span> (fromM[i] != _undef &amp;&amp; toM[i] == _undef) {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Assumption that previous mappings have same mapped qubits &quot;</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;than current mapping broken.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (fromM[i] == _undef &amp;&amp; toM[i] != _undef) {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            toM[i] = _undef;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        }</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keyword">auto</span> fromInv = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>, fromM, <span class="keyword">false</span>);</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keyword">auto</span> toInv = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>, toM, <span class="keyword">false</span>);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0d90e865c99ab35f5466662c249614b7">mTSFinder</a>-&gt;find(fromInv, toInv);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;}</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="keywordtype">void</span> BoundedMappingTreeQAllocator::normalize(<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml">MappingSwapSequence</a>&amp; mss) {</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    uint32_t mappingVSize = mss.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#ae19f8682528a945d122e4582f6fbebab">mappingV</a>.size();</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="comment">// Fill the last mapping, so that all qubits are mapped in</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="comment">// the end.</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">auto</span> &amp;lastMapping = mss.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#ae19f8682528a945d122e4582f6fbebab">mappingV</a>.back();</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">Fill</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>, lastMapping);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keyword">auto</span> inv = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>, lastMapping);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = mappingVSize - 1; i &gt; 0; --i) {</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        mss.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#ae19f8682528a945d122e4582f6fbebab">mappingV</a>[i - 1] = mss.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#ae19f8682528a945d122e4582f6fbebab">mappingV</a>[i];</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a>&amp; mapping = mss.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#ae19f8682528a945d122e4582f6fbebab">mappingV</a>[i - 1];</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keyword">auto</span> swaps = mss.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#aba54431cd6e6cbdc3fc32c2052f9079d">swapSeqCollection</a>[i - 1];</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = swaps.rbegin(), end = swaps.rend(); it != end; ++it) {</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            uint32_t u = it-&gt;u, v = it-&gt;v;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            uint32_t a = inv[u], b = inv[v];</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            <span class="keywordflow">if</span> (a &lt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>) mapping[a] = v;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            <span class="keywordflow">if</span> (b &lt; <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">mVQubits</a>) mapping[b] = u;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            std::swap(inv[u], inv[v]);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        }</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;}</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml">MappingSwapSequence</a></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;BoundedMappingTreeQAllocator::phase2(<span class="keyword">const</span> <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#adcab493369b2583fc15a8f3581362620">MCandidateVCollection</a>&amp; collection) {</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="comment">// Second Phase:</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="comment">//     here, the idea is to use, perhaps, dynamic programming to test all possibilities</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="comment">//     for &#39;glueing&#39; the sequence of collection together.</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    uint32_t nofLayers = collection.size();</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    uint32_t layerMaxSize = 0;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; nofLayers; ++i)</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        layerMaxSize = std::max(layerMaxSize, (uint32_t) collection[i].size());</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    </div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;PHASE 2 &gt;&gt;&gt;&gt; Dynamic Programming&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;Layers: &quot;</span> &lt;&lt; nofLayers &lt;&lt; std::endl;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;MaxSize: &quot;</span> &lt;&lt; layerMaxSize &lt;&lt; std::endl;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a75ab4a9032ad7dc808fe170911a1198c">TIMatrix</a> mem(nofLayers, <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a2cca9e63ff880e5706b16091e81df342">TIVector</a>());</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = collection[0].size(); i &lt; e; ++i) {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        mem[0].push_back({ collection[0][i].m, _undef, collection[0][i].cost, 0 });</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    }</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; nofLayers; ++i) {</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;Beginning: &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; of &quot;</span> &lt;&lt; nofLayers &lt;&lt; <span class="stringliteral">&quot; layers.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        uint32_t jLayerSize = collection[i].size();</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keywordflow">for</span> (uint32_t j = 0; j &lt; jLayerSize; ++j) {</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml">Timer</a> jt;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            jt.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a04b2df0f873780111173bc5e2a1810aa">start</a>();</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            <a class="code" href="../../d7/db0/structefd_1_1bmt_1_1TracebackInfo.xhtml">TracebackInfo</a> best = { {}, _undef, _undef, 0 };</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            uint32_t kLayerSize = collection[i - 1].size();</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            <span class="keywordflow">for</span> (uint32_t k = 0; k &lt; kLayerSize; ++k) {</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                <span class="keyword">auto</span> mapping = collection[i][j].<a class="code" href="../../d7/db0/structefd_1_1bmt_1_1TracebackInfo.xhtml#a84f0798e1cd922e8e5a0e35c975d2197">m</a>;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                <span class="keyword">auto</span> lastMapping = mem[i - 1][k].m;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a2d5525abff76d4272fc8eb8020189a1a">mLQPProcessor</a>-&gt;process(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>.get(), lastMapping, mapping);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                <span class="comment">// uint32_t mappingCost = mem[i - 1][k].mappingCost;</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                <span class="comment">// Should be this one.</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                uint32_t mappingCost = mem[i - 1][k].mappingCost + collection[i][j].cost;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                uint32_t swapEstimatedCost = <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0a2eeba04ab27694eb12df54191a004f">mCostEstimator</a>-&gt;estimate(lastMapping, mapping) +</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    mem[i - 1][k].swapEstimatedCost;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                <span class="keywordflow">if</span> (mappingCost + swapEstimatedCost &lt; best.<a class="code" href="../../d7/db0/structefd_1_1bmt_1_1TracebackInfo.xhtml#aaa6086203a3b5b3e97ec8629f7b4a6b2">mappingCost</a> + best.<a class="code" href="../../d7/db0/structefd_1_1bmt_1_1TracebackInfo.xhtml#ad43ef483f450c2884662be8596af8485">swapEstimatedCost</a>) {</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                    best = { mapping, k, mappingCost, swapEstimatedCost };</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            }</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            mem[i].push_back(best);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            jt.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a0b9a3de677363a5d3f995ac03a3d0a5e">stop</a>();</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;(i:&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;, j:&quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot;): &quot;</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                &lt;&lt; ((double) jt.<a class="code" href="../../d4/d89/classefd_1_1Timer.xhtml#a12124caea02f8efea63a4ed320acb06f">getMilliseconds</a>()) / 1000.0 &lt;&lt; std::endl;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        }</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;End: &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; of &quot;</span> &lt;&lt; nofLayers &lt;&lt; <span class="stringliteral">&quot; layers.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    }</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#af6fec08387d2e2051bc5f33a23bf9b1f">Vector</a> mapSequenceIndexes = <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#ac697b995069bc303aa1ec480e001a8aa">mMSSelector</a>-&gt;select(mem);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml">MappingSwapSequence</a> best = { {}, {}, _undef };</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keywordflow">for</span> (uint32_t idx : mapSequenceIndexes) {</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="comment">// mapSCollection.push_back(tracebackPath(mem, idx));</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <a class="code" href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a2054849f7d8b1d3680c31d3101e12da7">SwapSeqVector</a> swapSeqCollection;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keyword">auto</span> seq = tracebackPath(mem, idx);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        uint32_t swapCost = 0;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        uint32_t mappingCost = seq.mappingCost * <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a>.getVal();</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; nofLayers; ++i) {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            <span class="keyword">auto</span> swaps = getTransformingSwapsFor(seq.mappingV[i - 1], seq.mappingV[i]);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            swapSeqCollection.push_back(swaps);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            swapCost += swaps.size() * <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a>.getVal();</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        }</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="keywordflow">if</span> (swapCost + mappingCost &lt; best.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#a21abd76b910239ebc970bb6a5a1277b4">cost</a>) {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            best.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#ae19f8682528a945d122e4582f6fbebab">mappingV</a> = seq.mappingV;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            best.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#aba54431cd6e6cbdc3fc32c2052f9079d">swapSeqCollection</a> = swapSeqCollection;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            best.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#a21abd76b910239ebc970bb6a5a1277b4">cost</a> = swapCost + mappingCost;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        }</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    }</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    normalize(best);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordflow">return</span> best;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> BoundedMappingTreeQAllocator::phase3(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod, <span class="keyword">const</span> <a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml">MappingSwapSequence</a>&amp; mss) {</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="comment">// Third Phase:</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="comment">//     build the operations vector by tracebacking from the solution we have</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="comment">//     found. For this, we have to go through every dependency again.</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    uint32_t idx = 0;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keyword">auto</span> initial = mss.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#ae19f8682528a945d122e4582f6fbebab">mappingV</a>[idx];</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keyword">auto</span> mapping = initial;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <a class="code" href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml">NodeRenameVisitor</a> renameVisitor(mapping, <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#adba643b0448e22fb00e5606262fe6f85">mXtoN</a>, <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>.get());</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    std::vector&lt;Node::uRef&gt; issuedInstructions;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; partition : <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a3010278854a9674631baf4f871c43dc6">mPP</a>) {</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; node : partition) {</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="comment">// for (auto&amp; iDependencies : deps) {</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            <span class="comment">// We are sure that there are no instruction dependency that has more than</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            <span class="comment">// one dependency.</span></div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            <span class="keyword">auto</span> iDependencies = <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aac0b28355a80a0f614898b673ae3c56c">mDBuilder</a>.<a class="code" href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml#a1dd2f459d6b2107cc199d697e9ecffdb">getDeps</a>(node);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            <span class="keywordflow">if</span> (iDependencies.size() &lt; 1) {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                <span class="keyword">auto</span> cloned = node-&gt;clone();</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                cloned-&gt;apply(&amp;renameVisitor);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                issuedInstructions.push_back(std::move(cloned));</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            }</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            <span class="keyword">auto</span> dep = iDependencies[0];</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            uint32_t a = dep.<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">mFrom</a>, b = dep.<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">mTo</a>;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            uint32_t u = mapping[a], v = mapping[b];</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            <span class="comment">// If we can&#39;t satisfy (u, v) with the current mapping, it can only mean</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            <span class="comment">// that we must go to the next one.</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <span class="keywordflow">if</span> ((u == _undef || v == _undef) ||</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                (!<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(u, v) &amp;&amp; !<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(v, u))) {</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                <span class="keywordflow">if</span> (++idx &gt;= mss.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#ae19f8682528a945d122e4582f6fbebab">mappingV</a>.size()) {</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Not enough mappings were generated, maybe!?&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Mapping for &#39;&quot;</span> &lt;&lt; iDependencies.mCallPoint-&gt;toString(<span class="keyword">false</span>)</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                        &lt;&lt; <span class="stringliteral">&quot;&#39;.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                    <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                }</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                mapping = mss.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#ae19f8682528a945d122e4582f6fbebab">mappingV</a>[idx];</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                <span class="keyword">auto</span> swaps = mss.<a class="code" href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#aba54431cd6e6cbdc3fc32c2052f9079d">swapSeqCollection</a>[idx - 1];</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span> swp : swaps) {</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                    uint32_t u = swp.u, v = swp.v;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                    <span class="keywordflow">if</span> (!<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(u, v)) {</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                        std::swap(u, v);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                    }</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                    issuedInstructions.push_back(<a class="code" href="../../d4/deb/namespaceefd.xhtml#ad83c1dbaa41519964485ea8e2437bcb7">CreateISwap</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;getNode(u)-&gt;clone(),</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                                                             <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;getNode(v)-&gt;clone()));</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                }</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                u = mapping[a];</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                v = mapping[b];</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;            }</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">Node::uRef</a> newNode;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(u, v)) {</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                newNode = node-&gt;clone();</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                newNode-&gt;apply(&amp;renameVisitor);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(v, u)) {</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                newNode = <a class="code" href="../../d4/deb/namespaceefd.xhtml#af8e947f977669e54d6aaf3a43815833c">CreateIRevCX</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;getNode(u)-&gt;clone(),</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                                       <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;getNode(v)-&gt;clone());</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Mapping &quot;</span> &lt;&lt; <a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">MappingToString</a>(mapping) &lt;&lt; <span class="stringliteral">&quot; not able to satisfy dependency &quot;</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                    &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; a &lt;&lt; <span class="stringliteral">&quot;{&quot;</span> &lt;&lt; u &lt;&lt; <span class="stringliteral">&quot;}, &quot;</span> &lt;&lt; b &lt;&lt; <span class="stringliteral">&quot;{&quot;</span> &lt;&lt; v &lt;&lt; <span class="stringliteral">&quot;})&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            }</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            issuedInstructions.push_back(std::move(newNode));</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        }</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    }</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a0d1ee13f9fdf977893067cb4d0688e3f">clearStatements</a>();</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; instr : issuedInstructions) {</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#ae5c8859117a0d6ea5aeddd1a3fb060ec">insertStatementLast</a>(std::move(instr));</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="keywordflow">return</span> initial;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;}</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> BoundedMappingTreeQAllocator::allocate(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod) {</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aa6125ae88ccfbb49674c0d554379ec08">mNCGenerator</a>.get() == <span class="keyword">nullptr</span> ||</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5715eee30034cab76a05ec768ff093c3">mChildrenCSelector</a>.get() == <span class="keyword">nullptr</span> ||</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5b402c56e1e684dc46c4a627d8f71b5f">mPartialSolutionCSelector</a>.get() == <span class="keyword">nullptr</span> ||</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0a2eeba04ab27694eb12df54191a004f">mCostEstimator</a>.get() == <span class="keyword">nullptr</span> ||</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a2d5525abff76d4272fc8eb8020189a1a">mLQPProcessor</a>.get() == <span class="keyword">nullptr</span> ||</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#ac697b995069bc303aa1ec480e001a8aa">mMSSelector</a>.get() == <span class="keyword">nullptr</span> ||</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0d90e865c99ab35f5466662c249614b7">mTSFinder</a>.get() == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Define the `BoundedMappingTreeQAllocator` interfaces:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;    NodeCandidatesGenerator: &quot;</span> &lt;&lt; <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aa6125ae88ccfbb49674c0d554379ec08">mNCGenerator</a>.get() &lt;&lt; std::endl;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;    mChildrenCSelector: &quot;</span> &lt;&lt; <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5715eee30034cab76a05ec768ff093c3">mChildrenCSelector</a>.get() &lt;&lt; std::endl;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;    mPartialSolutionCSelector: &quot;</span> &lt;&lt; <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5b402c56e1e684dc46c4a627d8f71b5f">mPartialSolutionCSelector</a>.get() &lt;&lt; std::endl;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;    mCostEstimator: &quot;</span> &lt;&lt; <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0a2eeba04ab27694eb12df54191a004f">mCostEstimator</a>.get() &lt;&lt; std::endl;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;    mLQPProcessor: &quot;</span> &lt;&lt; <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a2d5525abff76d4272fc8eb8020189a1a">mLQPProcessor</a>.get() &lt;&lt; std::endl;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;    mMSSelector: &quot;</span> &lt;&lt; <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#ac697b995069bc303aa1ec480e001a8aa">mMSSelector</a>.get() &lt;&lt; std::endl;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;    mTSFinder: &quot;</span> &lt;&lt; <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0d90e865c99ab35f5466662c249614b7">mTSFinder</a>.get() &lt;&lt; std::endl;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    }</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aa6125ae88ccfbb49674c0d554379ec08">mNCGenerator</a>-&gt;setQModule(qmod);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aa6125ae88ccfbb49674c0d554379ec08">mNCGenerator</a>-&gt;initialize();</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0a2eeba04ab27694eb12df54191a004f">mCostEstimator</a>-&gt;setGraph(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>.get());</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0d90e865c99ab35f5466662c249614b7">mTSFinder</a>-&gt;setGraph(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>.get());</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a3d1f3d488b4ab5fa270373462f88bca6">mMaxChildren</a> = MaxChildren.getVal();</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#abc93b04e6465c6825d7be4355c012767">mMaxPartial</a> = MaxPartialSolutions.getVal();</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aac0b28355a80a0f614898b673ae3c56c">mDBuilder</a> = PassCache::Get&lt;DependencyBuilderWrapperPass&gt;(qmod)-&gt;<a class="code" href="../../db/d56/classefd_1_1PassT.xhtml#a392ca2f78dace7161b2ad952a869b886">getData</a>();</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#adba643b0448e22fb00e5606262fe6f85">mXtoN</a> = PassCache::Get&lt;XbitToNumberWrapperPass&gt;(qmod)-&gt;<a class="code" href="../../db/d56/classefd_1_1PassT.xhtml#a392ca2f78dace7161b2ad952a869b886">getData</a>();</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    uint32_t nofDeps = <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aac0b28355a80a0f614898b673ae3c56c">mDBuilder</a>.<a class="code" href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml#a5e2b814aaeb7862bda114ca10e26ace0">getDependencies</a>().size();</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keyword">auto</span> initialMapping = <a class="code" href="../../d4/deb/namespaceefd.xhtml#a186bbb1cec68c992374b8795b10af1a8">IdentityMapping</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">mPQubits</a>);</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <span class="keywordflow">if</span> (nofDeps &gt; 0) {</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <span class="keyword">auto</span> phase1Output = phase1();</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        <span class="keyword">auto</span> phase2Output = phase2(phase1Output);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        initialMapping = phase3(qmod, phase2Output);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    }</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keywordflow">return</span> initialMapping;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;}</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5f6b74c5137321c921fffa96f4861ece">BoundedMappingTreeQAllocator::setNodeCandidatesGenerator</a></div><div class="line"><a name="l00633"></a><span class="lineno"><a class="line" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5f6b74c5137321c921fffa96f4861ece">  633</a></span>&#160;(<a class="code" href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a3268090f959df8d8b9cf537a0b9b0c48">NodeCandidatesGenerator::uRef</a> gen) {</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    mNCGenerator = std::move(gen);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;}</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a9f5be1ba40074a55390bc26aa7b0decd">BoundedMappingTreeQAllocator::setChildrenSelector</a></div><div class="line"><a name="l00638"></a><span class="lineno"><a class="line" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a9f5be1ba40074a55390bc26aa7b0decd">  638</a></span>&#160;(<a class="code" href="../../df/d1d/structefd_1_1CandidateSelector.xhtml#ad7017a903161ecd69cdd534df0a992c1">CandidateSelector::uRef</a> sel) {</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    mChildrenCSelector = std::move(sel);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;}</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a4e2427b05ecd90161f7599d7000b9a48">BoundedMappingTreeQAllocator::setPartialSolutionSelector</a></div><div class="line"><a name="l00643"></a><span class="lineno"><a class="line" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a4e2427b05ecd90161f7599d7000b9a48">  643</a></span>&#160;(<a class="code" href="../../df/d1d/structefd_1_1CandidateSelector.xhtml#ad7017a903161ecd69cdd534df0a992c1">CandidateSelector::uRef</a> sel) {</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    mPartialSolutionCSelector = std::move(sel);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;}</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a4a2aa01a56a8dfef34732ce4ea770f8b">BoundedMappingTreeQAllocator::setSwapCostEstimator</a></div><div class="line"><a name="l00648"></a><span class="lineno"><a class="line" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a4a2aa01a56a8dfef34732ce4ea770f8b">  648</a></span>&#160;(<a class="code" href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#abe38c8af290c82139205a708da02e74a">SwapCostEstimator::uRef</a> est) {</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    mCostEstimator = std::move(est);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;}</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5a344a404b977003c5de8b5938793e58">BoundedMappingTreeQAllocator::setLiveQubitsPreProcessor</a></div><div class="line"><a name="l00653"></a><span class="lineno"><a class="line" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5a344a404b977003c5de8b5938793e58">  653</a></span>&#160;(<a class="code" href="../../d0/d98/structefd_1_1LiveQubitsPreProcessor.xhtml#a6a959645b8a2757a18c48210c3943aa5">LiveQubitsPreProcessor::uRef</a> proc) {</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    mLQPProcessor = std::move(proc);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;}</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#ace98685f8339bfd4ef61a932f519879f">BoundedMappingTreeQAllocator::setMapSeqSelector</a></div><div class="line"><a name="l00658"></a><span class="lineno"><a class="line" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#ace98685f8339bfd4ef61a932f519879f">  658</a></span>&#160;(<a class="code" href="../../d6/d8e/structefd_1_1MapSeqSelector.xhtml#a1335e0e2c1dc9ce15535592f0ee3d9e0">MapSeqSelector::uRef</a> sel) {</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    mMSSelector = std::move(sel);</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;}</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a1e1de949ece0787b9c08a8c4a61f3135">BoundedMappingTreeQAllocator::setTokenSwapFinder</a></div><div class="line"><a name="l00663"></a><span class="lineno"><a class="line" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a1e1de949ece0787b9c08a8c4a61f3135">  663</a></span>&#160;(<a class="code" href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#a97cb7836de313ac5c3c0f22347944686">TokenSwapFinder::uRef</a> finder) {</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    mTSFinder = std::move(finder);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;}</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0f09008ab05184a9999f33383e74ceda">BoundedMappingTreeQAllocator::uRef</a></div><div class="line"><a name="l00668"></a><span class="lineno"><a class="line" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#abc580232e3e2cb1df4e5b3fbfcb49042">  668</a></span>&#160;<a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#abc580232e3e2cb1df4e5b3fbfcb49042">BoundedMappingTreeQAllocator::Create</a>(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">ArchGraph::sRef</a> ag) {</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0f09008ab05184a9999f33383e74ceda">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml">BoundedMappingTreeQAllocator</a>(ag));</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;}</div><div class="ttc" id="namespaceefd_1_1bmt_xhtml_a75ab4a9032ad7dc808fe170911a1198c"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a75ab4a9032ad7dc808fe170911a1198c">efd::bmt::TIMatrix</a></div><div class="ttdeci">std::vector&lt; TIVector &gt; TIMatrix</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00046">BoundedMappingTreeQAllocator.h:46</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a8c6eb9e95f5fad95ab54779a502ea54f"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a8c6eb9e95f5fad95ab54779a502ea54f">efd::SwapSeq</a></div><div class="ttdeci">std::vector&lt; Swap &gt; SwapSeq</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00023">Defs.h:23</a></div></div>
<div class="ttc" id="IntrinsicGateCostPass_8cpp_xhtml_a99fd7c5ea250372d9b17e42df7764318"><div class="ttname"><a href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; SwapCost(&quot;-swap-cost&quot;, &quot;Cost of using a swap function.&quot;, 7, false)</div></div>
<div class="ttc" id="classefd_1_1NodeVisitor_xhtml"><div class="ttname"><a href="../../d8/d5d/classefd_1_1NodeVisitor.xhtml">efd::NodeVisitor</a></div><div class="ttdoc">Interface class to be used as a visitor. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d8d/NodeVisitor_8h_source.xhtml#l00009">NodeVisitor.h:9</a></div></div>
<div class="ttc" id="classefd_1_1Timer_xhtml"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml">efd::Timer</a></div><div class="ttdoc">Tracks the elapsed time. One should use the methods start and stop in order to track the time of some...</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d27/Timer_8h_source.xhtml#l00014">Timer.h:14</a></div></div>
<div class="ttc" id="structefd_1_1Dep_xhtml"><div class="ttname"><a href="../../d9/d38/structefd_1_1Dep.xhtml">efd::Dep</a></div><div class="ttdoc">Structure for abstracting dependencies. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00017">DependencyBuilderPass.h:17</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1MappingSwapSequence_xhtml"><div class="ttname"><a href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml">efd::bmt::MappingSwapSequence</a></div><div class="ttdoc">Holds the sequence of Mappings and Swapsto be executed. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00060">BoundedMappingTreeQAllocator.h:60</a></div></div>
<div class="ttc" id="structefd_1_1CandidateSelector_xhtml_ad7017a903161ecd69cdd534df0a992c1"><div class="ttname"><a href="../../df/d1d/structefd_1_1CandidateSelector.xhtml#ad7017a903161ecd69cdd534df0a992c1">efd::CandidateSelector::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; CandidateSelector &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00105">BoundedMappingTreeQAllocator.h:105</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a0a2eeba04ab27694eb12df54191a004f"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0a2eeba04ab27694eb12df54191a004f">efd::BoundedMappingTreeQAllocator::mCostEstimator</a></div><div class="ttdeci">SwapCostEstimator::uRef mCostEstimator</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00176">BoundedMappingTreeQAllocator.h:176</a></div></div>
<div class="ttc" id="structefd_1_1NodeCandidatesGenerator_xhtml_a84e966a21bda946c2c006a816dd8a73f"><div class="ttname"><a href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a84e966a21bda946c2c006a816dd8a73f">efd::NodeCandidatesGenerator::signalProcessed</a></div><div class="ttdeci">virtual void signalProcessed(Node::Ref node)</div><div class="ttdoc">Signals the generator which node has been selected. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00065">BoundedMappingTreeQAllocator.cpp:65</a></div></div>
<div class="ttc" id="classefd_1_1NDList_xhtml_a5e3e2ab6234caa816599eb51766210b7"><div class="ttname"><a href="../../da/ddd/classefd_1_1NDList.xhtml#a5e3e2ab6234caa816599eb51766210b7">efd::NDList::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdoc">Creates a new instance of this node with the kind K_LIST. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00442">Nodes.cpp:442</a></div></div>
<div class="ttc" id="structefd_1_1Dependencies_xhtml_a774330d9946ed2211aa8222a7e2453a4"><div class="ttname"><a href="../../d1/dca/structefd_1_1Dependencies.xhtml#a774330d9946ed2211aa8222a7e2453a4">efd::Dependencies::size</a></div><div class="ttdeci">uint32_t size() const</div><div class="ttdoc">Forwards to the mDeps attribute. </div><div class="ttdef"><b>Definition:</b> <a href="../../da/dcd/DependencyBuilderPass_8cpp_source.xhtml#l00014">DependencyBuilderPass.cpp:14</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a4a2aa01a56a8dfef34732ce4ea770f8b"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a4a2aa01a56a8dfef34732ce4ea770f8b">efd::BoundedMappingTreeQAllocator::setSwapCostEstimator</a></div><div class="ttdeci">void setSwapCostEstimator(SwapCostEstimator::uRef est)</div><div class="ttdoc">Sets the implementation for estimating the swap cost in phase 2. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00648">BoundedMappingTreeQAllocator.cpp:648</a></div></div>
<div class="ttc" id="structefd_1_1DependencyBuilder_xhtml_a5e2b814aaeb7862bda114ca10e26ace0"><div class="ttname"><a href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml#a5e2b814aaeb7862bda114ca10e26ace0">efd::DependencyBuilder::getDependencies</a></div><div class="ttdeci">const DepsVector &amp; getDependencies(NDGateDecl::Ref ref=nullptr) const</div><div class="ttdoc">Gets the dependencies for some gate declaration. If it is a nullptr, then it is returned the dependen...</div><div class="ttdef"><b>Definition:</b> <a href="../../da/dcd/DependencyBuilderPass_8cpp_source.xhtml#l00083">DependencyBuilderPass.cpp:83</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml_a1388225779727295176780b9a68aedf2"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a1388225779727295176780b9a68aedf2">efd::ArchGraph::getNode</a></div><div class="ttdeci">Node::Ref getNode(uint32_t i) const</div><div class="ttdoc">Gets the node corresponding to the uid. </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d51/ArchGraph_8cpp_source.xhtml#l00029">ArchGraph.cpp:29</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a6c85c9bd21014b73497de741cc75f706"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a6c85c9bd21014b73497de741cc75f706">efd::Node::clone</a></div><div class="ttdeci">Node::uRef clone() const</div><div class="ttdoc">Clones the current node (deep copy). </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00114">Nodes.cpp:114</a></div></div>
<div class="ttc" id="structefd_1_1NodeCandidatesGenerator_xhtml_a07dcea8bfe5146473c125e8b720bb2ca"><div class="ttname"><a href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a07dcea8bfe5146473c125e8b720bb2ca">efd::NodeCandidatesGenerator::setQModule</a></div><div class="ttdeci">void setQModule(QModule::Ref qmod)</div><div class="ttdoc">Sets the QModule to be iterated. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00032">BoundedMappingTreeQAllocator.cpp:32</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1TracebackInfo_xhtml_aaa6086203a3b5b3e97ec8629f7b4a6b2"><div class="ttname"><a href="../../d7/db0/structefd_1_1bmt_1_1TracebackInfo.xhtml#aaa6086203a3b5b3e97ec8629f7b4a6b2">efd::bmt::TracebackInfo::mappingCost</a></div><div class="ttdeci">uint32_t mappingCost</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00035">BoundedMappingTreeQAllocator.h:35</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1MappingSeq_xhtml"><div class="ttname"><a href="../../dc/d18/structefd_1_1bmt_1_1MappingSeq.xhtml">efd::bmt::MappingSeq</a></div><div class="ttdoc">Keep track of the sequence of Mappings and its cost. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00052">BoundedMappingTreeQAllocator.h:52</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_ab813c60af1717cf50e92a28b274c24ef"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#ab813c60af1717cf50e92a28b274c24ef">efd::Node::apply</a></div><div class="ttdeci">virtual void apply(NodeVisitor *visitor)=0</div><div class="ttdoc">Used by visitor classes. </div></div>
<div class="ttc" id="classefd_1_1NDQOpGen_xhtml"><div class="ttname"><a href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">efd::NDQOpGen</a></div><div class="ttdoc">NDQOp specialized for generic gates. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00930">Nodes.h:930</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1TracebackInfo_xhtml"><div class="ttname"><a href="../../d7/db0/structefd_1_1bmt_1_1TracebackInfo.xhtml">efd::bmt::TracebackInfo</a></div><div class="ttdoc">Necessary information for getting the combinations in phase 2. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00032">BoundedMappingTreeQAllocator.h:32</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml">efd::BoundedMappingTreeQAllocator</a></div><div class="ttdoc">Subgraph Isomorphism based Qubit Allocator. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00161">BoundedMappingTreeQAllocator.h:161</a></div></div>
<div class="ttc" id="classefd_1_1Timer_xhtml_a0b9a3de677363a5d3f995ac03a3d0a5e"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml#a0b9a3de677363a5d3f995ac03a3d0a5e">efd::Timer::stop</a></div><div class="ttdeci">void stop()</div><div class="ttdoc">Stops the timer. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/dc2/Timer_8cpp_source.xhtml#l00015">Timer.cpp:15</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1NodeCandidate_xhtml_a5169b4baac5e7edc5b27d9661da03ee7"><div class="ttname"><a href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5169b4baac5e7edc5b27d9661da03ee7">efd::bmt::NodeCandidate::mDeps</a></div><div class="ttdeci">Dependencies mDeps</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00016">BoundedMappingTreeQAllocator.h:16</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1MappingSeq_xhtml_aa0ddfc8001f7f9132d62108a2d09189e"><div class="ttname"><a href="../../dc/d18/structefd_1_1bmt_1_1MappingSeq.xhtml#aa0ddfc8001f7f9132d62108a2d09189e">efd::bmt::MappingSeq::mappingCost</a></div><div class="ttdeci">uint32_t mappingCost</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00054">BoundedMappingTreeQAllocator.h:54</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a4e2427b05ecd90161f7599d7000b9a48"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a4e2427b05ecd90161f7599d7000b9a48">efd::BoundedMappingTreeQAllocator::setPartialSolutionSelector</a></div><div class="ttdeci">void setPartialSolutionSelector(CandidateSelector::uRef sel)</div><div class="ttdoc">Sets the implementation for selecting the partial solutions in phase 1. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00643">BoundedMappingTreeQAllocator.cpp:643</a></div></div>
<div class="ttc" id="structefd_1_1LiveQubitsPreProcessor_xhtml_a6a959645b8a2757a18c48210c3943aa5"><div class="ttname"><a href="../../d0/d98/structefd_1_1LiveQubitsPreProcessor.xhtml#a6a959645b8a2757a18c48210c3943aa5">efd::LiveQubitsPreProcessor::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; LiveQubitsPreProcessor &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00136">BoundedMappingTreeQAllocator.h:136</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1MappingSwapSequence_xhtml_aba54431cd6e6cbdc3fc32c2052f9079d"><div class="ttname"><a href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#aba54431cd6e6cbdc3fc32c2052f9079d">efd::bmt::MappingSwapSequence::swapSeqCollection</a></div><div class="ttdeci">SwapSeqVector swapSeqCollection</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00062">BoundedMappingTreeQAllocator.h:62</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpReset_xhtml"><div class="ttname"><a href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">efd::NDQOpReset</a></div><div class="ttdoc">NDQOp specialized for reset operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00630">Nodes.h:630</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_aac5a20e6db5d358cf72d4816441d0b0d"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">efd::MappingToString</a></div><div class="ttdeci">std::string MappingToString(Mapping m)</div><div class="ttdoc">Prints the mapping m to a string and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00077">QbitAllocator.cpp:77</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a4d7d13dd12213a9f247d1304472badbd"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">efd::QbitAllocator::mArchGraph</a></div><div class="ttdeci">ArchGraph::sRef mArchGraph</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00034">QbitAllocator.h:34</a></div></div>
<div class="ttc" id="structefd_1_1SwapCostEstimator_xhtml_a9c18a2822396045d1b8832afddaf74ea"><div class="ttname"><a href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a9c18a2822396045d1b8832afddaf74ea">efd::SwapCostEstimator::estimate</a></div><div class="ttdeci">uint32_t estimate(const Mapping &amp;fromM, const Mapping &amp;toM)</div><div class="ttdoc">Estimates the number of swaps to go from fromM to . </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00075">BoundedMappingTreeQAllocator.cpp:75</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml">efd::ArchGraph</a></div><div class="ttdoc">This is the base class for the architectures that this project will be supporting. </div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00010">ArchGraph.h:10</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a0d90e865c99ab35f5466662c249614b7"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0d90e865c99ab35f5466662c249614b7">efd::BoundedMappingTreeQAllocator::mTSFinder</a></div><div class="ttdeci">TokenSwapFinder::uRef mTSFinder</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00179">BoundedMappingTreeQAllocator.h:179</a></div></div>
<div class="ttc" id="namespaceefd_1_1bmt_xhtml_a2054849f7d8b1d3680c31d3101e12da7"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a2054849f7d8b1d3680c31d3101e12da7">efd::bmt::SwapSeqVector</a></div><div class="ttdeci">std::vector&lt; SwapSeq &gt; SwapSeqVector</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00057">BoundedMappingTreeQAllocator.h:57</a></div></div>
<div class="ttc" id="structefd_1_1DependencyBuilder_xhtml_a1dd2f459d6b2107cc199d697e9ecffdb"><div class="ttname"><a href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml#a1dd2f459d6b2107cc199d697e9ecffdb">efd::DependencyBuilder::getDeps</a></div><div class="ttdeci">const Dependencies getDeps(Node *ref) const</div><div class="ttdoc">Gets the dependencies for a specific instruction. </div><div class="ttdef"><b>Definition:</b> <a href="../../da/dcd/DependencyBuilderPass_8cpp_source.xhtml#l00093">DependencyBuilderPass.cpp:93</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a5715eee30034cab76a05ec768ff093c3"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5715eee30034cab76a05ec768ff093c3">efd::BoundedMappingTreeQAllocator::mChildrenCSelector</a></div><div class="ttdeci">CandidateSelector::uRef mChildrenCSelector</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00174">BoundedMappingTreeQAllocator.h:174</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml">efd::QModule</a></div><div class="ttdoc">Qasm module representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00013">QModule.h:13</a></div></div>
<div class="ttc" id="structefd_1_1Dep_xhtml_a87771188e9aacbd64ccd94e9b9524135"><div class="ttname"><a href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">efd::Dep::mTo</a></div><div class="ttdeci">uint32_t mTo</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00019">DependencyBuilderPass.h:19</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a4d48c40aef0cafc61f748a978264a5c3"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d48c40aef0cafc61f748a978264a5c3">efd::QbitAllocator::mPQubits</a></div><div class="ttdeci">uint32_t mPQubits</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00039">QbitAllocator.h:39</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml">efd::Opt</a></div><div class="ttdoc">Class used to declare the command line options available. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00012">CommandLine.h:12</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">efd::XbitToNumber</a></div><div class="ttdoc">Maps every quantum and classic bit (not register) to a number inside a vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d94/XbitToNumberPass_8h_source.xhtml#l00023">XbitToNumberPass.h:23</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="structefd_1_1NodeCandidatesGenerator_xhtml_a26193d1189aa8f667e5e86f3e9b18ffc"><div class="ttname"><a href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a26193d1189aa8f667e5e86f3e9b18ffc">efd::NodeCandidatesGenerator::initialize</a></div><div class="ttdeci">void initialize()</div><div class="ttdoc">Initializes the generator. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00054">BoundedMappingTreeQAllocator.cpp:54</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1NodeCandidate_xhtml_a5702bcb70d8ba1dbbc1d5a49961bc6a9"><div class="ttname"><a href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a5702bcb70d8ba1dbbc1d5a49961bc6a9">efd::bmt::NodeCandidate::mNode</a></div><div class="ttdeci">Node::Ref mNode</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00015">BoundedMappingTreeQAllocator.h:15</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a9f5be1ba40074a55390bc26aa7b0decd"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a9f5be1ba40074a55390bc26aa7b0decd">efd::BoundedMappingTreeQAllocator::setChildrenSelector</a></div><div class="ttdeci">void setChildrenSelector(CandidateSelector::uRef sel)</div><div class="ttdoc">Sets the implementation for selecting the children in phase 1. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00638">BoundedMappingTreeQAllocator.cpp:638</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpU_xhtml"><div class="ttname"><a href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">efd::NDQOpU</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00716">Nodes.h:716</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a494a2123de6024d1057cf773acda5f25"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">efd::Node::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; Node &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00042">Nodes.h:42</a></div></div>
<div class="ttc" id="structefd_1_1NodeCandidatesGenerator_xhtml_a62f8c7e4b7de827a780872a818467c92"><div class="ttname"><a href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a62f8c7e4b7de827a780872a818467c92">efd::NodeCandidatesGenerator::generate</a></div><div class="ttdeci">std::vector&lt; Node::Ref &gt; generate()</div><div class="ttdoc">Returns the next collection of candidates. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00036">BoundedMappingTreeQAllocator.cpp:36</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_adba643b0448e22fb00e5606262fe6f85"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#adba643b0448e22fb00e5606262fe6f85">efd::BoundedMappingTreeQAllocator::mXtoN</a></div><div class="ttdeci">XbitToNumber mXtoN</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00170">BoundedMappingTreeQAllocator.h:170</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a0f09008ab05184a9999f33383e74ceda"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a0f09008ab05184a9999f33383e74ceda">efd::BoundedMappingTreeQAllocator::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; BoundedMappingTreeQAllocator &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00164">BoundedMappingTreeQAllocator.h:164</a></div></div>
<div class="ttc" id="structefd_1_1NodeCandidatesGenerator_xhtml_a3268090f959df8d8b9cf537a0b9b0c48"><div class="ttname"><a href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a3268090f959df8d8b9cf537a0b9b0c48">efd::NodeCandidatesGenerator::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; NodeCandidatesGenerator &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00074">BoundedMappingTreeQAllocator.h:74</a></div></div>
<div class="ttc" id="structefd_1_1NodeCandidatesGenerator_xhtml_afa7628594a0cb61c69255fb831772f5f"><div class="ttname"><a href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#afa7628594a0cb61c69255fb831772f5f">efd::NodeCandidatesGenerator::finishedImpl</a></div><div class="ttdeci">virtual bool finishedImpl()=0</div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml_a8c9131ca43a772179c24fa4dc9701bb2"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">efd::ArchGraph::sRef</a></div><div class="ttdeci">std::shared_ptr&lt; ArchGraph &gt; sRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00014">ArchGraph.h:14</a></div></div>
<div class="ttc" id="namespaceefd_1_1bmt_xhtml_a6f54d1a0a8af4d9699d29a36d5ec979c"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a6f54d1a0a8af4d9699d29a36d5ec979c">efd::bmt::operator&lt;</a></div><div class="ttdeci">bool operator&lt;(const NodeCandidate &amp;lhs, const NodeCandidate &amp;rhs)</div><div class="ttdoc">LessThan operator that orders NodeCandidates. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00024">BoundedMappingTreeQAllocator.cpp:24</a></div></div>
<div class="ttc" id="CommandLine_8h_xhtml"><div class="ttname"><a href="../../d9/d41/CommandLine_8h.xhtml">CommandLine.h</a></div></div>
<div class="ttc" id="classefd_1_1TokenSwapFinder_xhtml_a97cb7836de313ac5c3c0f22347944686"><div class="ttname"><a href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#a97cb7836de313ac5c3c0f22347944686">efd::TokenSwapFinder::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; TokenSwapFinder &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d2d/TokenSwapFinder_8h_source.xhtml#l00012">TokenSwapFinder.h:12</a></div></div>
<div class="ttc" id="structefd_1_1SwapCostEstimator_xhtml_ac9ab4a482467ebe0e1be2d96c4e3df21"><div class="ttname"><a href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#ac9ab4a482467ebe0e1be2d96c4e3df21">efd::SwapCostEstimator::preprocess</a></div><div class="ttdeci">virtual void preprocess()=0</div></div>
<div class="ttc" id="classefd_1_1Node_xhtml"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml">efd::Node</a></div><div class="ttdoc">Base class for AST nodes. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00039">Nodes.h:39</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1NodeCandidate_xhtml"><div class="ttname"><a href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml">efd::bmt::NodeCandidate</a></div><div class="ttdoc">Used for ordering the nodes based on some weight. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00013">BoundedMappingTreeQAllocator.h:13</a></div></div>
<div class="ttc" id="classefd_1_1NDQOp_xhtml"><div class="ttname"><a href="../../dd/d94/classefd_1_1NDQOp.xhtml">efd::NDQOp</a></div><div class="ttdoc">Generic node for quantum operations. This is also the base node for the other quantum gates...</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00577">Nodes.h:577</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1TracebackInfo_xhtml_a84f0798e1cd922e8e5a0e35c975d2197"><div class="ttname"><a href="../../d7/db0/structefd_1_1bmt_1_1TracebackInfo.xhtml#a84f0798e1cd922e8e5a0e35c975d2197">efd::bmt::TracebackInfo::m</a></div><div class="ttdeci">Mapping m</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00033">BoundedMappingTreeQAllocator.h:33</a></div></div>
<div class="ttc" id="structefd_1_1SwapCostEstimator_xhtml_a3120ee9a6a6451b68678266f887341ec"><div class="ttname"><a href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a3120ee9a6a6451b68678266f887341ec">efd::SwapCostEstimator::mG</a></div><div class="ttdeci">Graph::Ref mG</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00124">BoundedMappingTreeQAllocator.h:124</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_ad83c1dbaa41519964485ea8e2437bcb7"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#ad83c1dbaa41519964485ea8e2437bcb7">efd::CreateISwap</a></div><div class="ttdeci">NDQOp::uRef CreateISwap(Node::uRef lhs, Node::uRef rhs)</div><div class="ttdoc">Creates a call to the intrinsic swap function. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d0c/Utils_8cpp_source.xhtml#l00181">Utils.cpp:181</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_aac0b28355a80a0f614898b673ae3c56c"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aac0b28355a80a0f614898b673ae3c56c">efd::BoundedMappingTreeQAllocator::mDBuilder</a></div><div class="ttdeci">DependencyBuilder mDBuilder</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00169">BoundedMappingTreeQAllocator.h:169</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpBarrier_xhtml"><div class="ttname"><a href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">efd::NDQOpBarrier</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00658">Nodes.h:658</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a3010278854a9674631baf4f871c43dc6"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a3010278854a9674631baf4f871c43dc6">efd::BoundedMappingTreeQAllocator::mPP</a></div><div class="ttdeci">bmt::PPartitionCollection mPP</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00171">BoundedMappingTreeQAllocator.h:171</a></div></div>
<div class="ttc" id="classefd_1_1Timer_xhtml_a12124caea02f8efea63a4ed320acb06f"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml#a12124caea02f8efea63a4ed320acb06f">efd::Timer::getMilliseconds</a></div><div class="ttdeci">uint64_t getMilliseconds()</div><div class="ttdoc">Gets the number of milliseconds stored in mDuration. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/dc2/Timer_8cpp_source.xhtml#l00039">Timer.cpp:39</a></div></div>
<div class="ttc" id="structefd_1_1MapSeqSelector_xhtml_a1335e0e2c1dc9ce15535592f0ee3d9e0"><div class="ttname"><a href="../../d6/d8e/structefd_1_1MapSeqSelector.xhtml#a1335e0e2c1dc9ce15535592f0ee3d9e0">efd::MapSeqSelector::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; MapSeqSelector &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00145">BoundedMappingTreeQAllocator.h:145</a></div></div>
<div class="ttc" id="Utils_8h_xhtml"><div class="ttname"><a href="../../d9/ded/Utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="structefd_1_1NodeCandidatesGenerator_xhtml_a501cff508d30432db61f05e918571708"><div class="ttname"><a href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a501cff508d30432db61f05e918571708">efd::NodeCandidatesGenerator::generateImpl</a></div><div class="ttdeci">virtual std::vector&lt; Node::Ref &gt; generateImpl()=0</div></div>
<div class="ttc" id="NodeVisitor_8h_xhtml"><div class="ttname"><a href="../../d0/d8d/NodeVisitor_8h.xhtml">NodeVisitor.h</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1MappingSeq_xhtml_af214238fc5a3f18f91bec5e8c0912d79"><div class="ttname"><a href="../../dc/d18/structefd_1_1bmt_1_1MappingSeq.xhtml#af214238fc5a3f18f91bec5e8c0912d79">efd::bmt::MappingSeq::mappingV</a></div><div class="ttdeci">MappingVector mappingV</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00053">BoundedMappingTreeQAllocator.h:53</a></div></div>
<div class="ttc" id="classefd_1_1NDIfStmt_xhtml"><div class="ttname"><a href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">efd::NDIfStmt</a></div><div class="ttdoc">Node for conditional statement. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00968">Nodes.h:968</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a5a344a404b977003c5de8b5938793e58"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5a344a404b977003c5de8b5938793e58">efd::BoundedMappingTreeQAllocator::setLiveQubitsPreProcessor</a></div><div class="ttdeci">void setLiveQubitsPreProcessor(LiveQubitsPreProcessor::uRef proc)</div><div class="ttdoc">Sets the implementation for fixing the Live Qubits problem in phase 2. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00653">BoundedMappingTreeQAllocator.cpp:653</a></div></div>
<div class="ttc" id="ApproxTSFinder_8h_xhtml"><div class="ttname"><a href="../../db/dfc/ApproxTSFinder_8h.xhtml">ApproxTSFinder.h</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_ae5c8859117a0d6ea5aeddd1a3fb060ec"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#ae5c8859117a0d6ea5aeddd1a3fb060ec">efd::QModule::insertStatementLast</a></div><div class="ttdeci">Iterator insertStatementLast(Node::uRef ref)</div><div class="ttdoc">Inserts ref at the back, and returns a iterator to this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00107">QModule.cpp:107</a></div></div>
<div class="ttc" id="classefd_1_1NodeRenameVisitor_xhtml_a366c12b342093952ced6c2087a177f77"><div class="ttname"><a href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a366c12b342093952ced6c2087a177f77">efd::NodeRenameVisitor::NodeRenameVisitor</a></div><div class="ttdeci">NodeRenameVisitor(Mapping &amp;m, XbitToNumber &amp;xtoN, ArchGraph::Ref archGraph)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00112">BoundedMappingTreeQAllocator.cpp:112</a></div></div>
<div class="ttc" id="classefd_1_1NDQOp_xhtml_af66ad886623f70ee24c756d424694dae"><div class="ttname"><a href="../../dd/d94/classefd_1_1NDQOp.xhtml#af66ad886623f70ee24c756d424694dae">efd::NDQOp::setQArgs</a></div><div class="ttdeci">void setQArgs(NDList::uRef ref)</div><div class="ttdoc">Sets the quantum arguments. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00913">Nodes.cpp:913</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1NodeCandidate_xhtml_a95a5d52f408f2ec23c7489a0803a5825"><div class="ttname"><a href="../../d0/d52/structefd_1_1bmt_1_1NodeCandidate.xhtml#a95a5d52f408f2ec23c7489a0803a5825">efd::bmt::NodeCandidate::mWeight</a></div><div class="ttdeci">uint32_t mWeight</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00014">BoundedMappingTreeQAllocator.h:14</a></div></div>
<div class="ttc" id="structefd_1_1Dep_xhtml_a79841bfc527c14f4c1faeb37e2c4c1ee"><div class="ttname"><a href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">efd::Dep::mFrom</a></div><div class="ttdeci">uint32_t mFrom</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00018">DependencyBuilderPass.h:18</a></div></div>
<div class="ttc" id="structefd_1_1SwapCostEstimator_xhtml_a63bbfd0654a51eb98a47188b05b778c3"><div class="ttname"><a href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a63bbfd0654a51eb98a47188b05b778c3">efd::SwapCostEstimator::estimateImpl</a></div><div class="ttdeci">virtual uint32_t estimateImpl(const Mapping &amp;fromM, const Mapping &amp;toM)=0</div></div>
<div class="ttc" id="PassCache_8h_xhtml"><div class="ttname"><a href="../../db/d82/PassCache_8h.xhtml">PassCache.h</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a5f6b74c5137321c921fffa96f4861ece"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5f6b74c5137321c921fffa96f4861ece">efd::BoundedMappingTreeQAllocator::setNodeCandidatesGenerator</a></div><div class="ttdeci">void setNodeCandidatesGenerator(NodeCandidatesGenerator::uRef gen)</div><div class="ttdoc">Sets the implementation for iterating the Nodes in phase 1. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00633">BoundedMappingTreeQAllocator.cpp:633</a></div></div>
<div class="ttc" id="structefd_1_1SwapCostEstimator_xhtml_abe38c8af290c82139205a708da02e74a"><div class="ttname"><a href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#abe38c8af290c82139205a708da02e74a">efd::SwapCostEstimator::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; SwapCostEstimator &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00114">BoundedMappingTreeQAllocator.h:114</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_abc580232e3e2cb1df4e5b3fbfcb49042"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#abc580232e3e2cb1df4e5b3fbfcb49042">efd::BoundedMappingTreeQAllocator::Create</a></div><div class="ttdeci">static uRef Create(ArchGraph::sRef ag)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00668">BoundedMappingTreeQAllocator.cpp:668</a></div></div>
<div class="ttc" id="structefd_1_1SwapCostEstimator_xhtml_a8315637f359d32ecad480e146f300b36"><div class="ttname"><a href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a8315637f359d32ecad480e146f300b36">efd::SwapCostEstimator::SwapCostEstimator</a></div><div class="ttdeci">SwapCostEstimator()</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00068">BoundedMappingTreeQAllocator.cpp:68</a></div></div>
<div class="ttc" id="namespaceefd_1_1bmt_xhtml_adcab493369b2583fc15a8f3581362620"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#adcab493369b2583fc15a8f3581362620">efd::bmt::MCandidateVCollection</a></div><div class="ttdeci">std::vector&lt; MCandidateVector &gt; MCandidateVCollection</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00043">BoundedMappingTreeQAllocator.h:43</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_ac697b995069bc303aa1ec480e001a8aa"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#ac697b995069bc303aa1ec480e001a8aa">efd::BoundedMappingTreeQAllocator::mMSSelector</a></div><div class="ttdeci">MapSeqSelector::uRef mMSSelector</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00178">BoundedMappingTreeQAllocator.h:178</a></div></div>
<div class="ttc" id="structefd_1_1SwapCostEstimator_xhtml_a961865eefa4ae383c6f96de88f709d1d"><div class="ttname"><a href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#a961865eefa4ae383c6f96de88f709d1d">efd::SwapCostEstimator::setGraph</a></div><div class="ttdeci">void setGraph(Graph::Ref g)</div><div class="ttdoc">Sets the Graph. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00070">BoundedMappingTreeQAllocator.cpp:70</a></div></div>
<div class="ttc" id="structefd_1_1NodeCandidatesGenerator_xhtml_a749790282a861d8ae533c15ed838f108"><div class="ttname"><a href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a749790282a861d8ae533c15ed838f108">efd::NodeCandidatesGenerator::NodeCandidatesGenerator</a></div><div class="ttdeci">NodeCandidatesGenerator()</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00030">BoundedMappingTreeQAllocator.cpp:30</a></div></div>
<div class="ttc" id="classefd_1_1Timer_xhtml_a04b2df0f873780111173bc5e2a1810aa"><div class="ttname"><a href="../../d4/d89/classefd_1_1Timer.xhtml#a04b2df0f873780111173bc5e2a1810aa">efd::Timer::start</a></div><div class="ttdeci">void start()</div><div class="ttdoc">Starts the timer. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/dc2/Timer_8cpp_source.xhtml#l00010">Timer.cpp:10</a></div></div>
<div class="ttc" id="classefd_1_1NDQOp_xhtml_af7ef43289355c5bb047a46419177c8ed"><div class="ttname"><a href="../../dd/d94/classefd_1_1NDQOp.xhtml#af7ef43289355c5bb047a46419177c8ed">efd::NDQOp::getQArgs</a></div><div class="ttdeci">NDList::Ref getQArgs() const</div><div class="ttdoc">Gets the quantum arguments. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00909">Nodes.cpp:909</a></div></div>
<div class="ttc" id="namespaceefd_1_1bmt_xhtml_a5b3384851faf32cfe58e9eaf0c44a2e7"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a5b3384851faf32cfe58e9eaf0c44a2e7">efd::bmt::MCandidateVector</a></div><div class="ttdeci">std::vector&lt; MappingCandidate &gt; MCandidateVector</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00042">BoundedMappingTreeQAllocator.h:42</a></div></div>
<div class="ttc" id="IntrinsicGateCostPass_8cpp_xhtml_a36846d9fb7f5b314db3aa16d72efe81f"><div class="ttname"><a href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; RevCost(&quot;-rev-cost&quot;, &quot;Cost of using a reverse edge.&quot;, 4, false)</div></div>
<div class="ttc" id="classefd_1_1NDIfStmt_xhtml_ae5c408d49862e644f1d299ab5b2f121d"><div class="ttname"><a href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml#ae5c408d49862e644f1d299ab5b2f121d">efd::NDIfStmt::getQOp</a></div><div class="ttdeci">NDQOp::Ref getQOp() const</div><div class="ttdoc">Gets the qop. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00543">Nodes.cpp:543</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a1e1de949ece0787b9c08a8c4a61f3135"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a1e1de949ece0787b9c08a8c4a61f3135">efd::BoundedMappingTreeQAllocator::setTokenSwapFinder</a></div><div class="ttdeci">void setTokenSwapFinder(TokenSwapFinder::uRef finder)</div><div class="ttdoc">Sets the implementation for finding the swap sequences in phase 3. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00663">BoundedMappingTreeQAllocator.cpp:663</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_aa6125ae88ccfbb49674c0d554379ec08"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#aa6125ae88ccfbb49674c0d554379ec08">efd::BoundedMappingTreeQAllocator::mNCGenerator</a></div><div class="ttdeci">NodeCandidatesGenerator::uRef mNCGenerator</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00173">BoundedMappingTreeQAllocator.h:173</a></div></div>
<div class="ttc" id="classefd_1_1NodeRenameVisitor_xhtml_af1522304814fbc95734f8c2d1a94f549"><div class="ttname"><a href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#af1522304814fbc95734f8c2d1a94f549">efd::NodeRenameVisitor::visit</a></div><div class="ttdeci">void visit(NDQOpMeasure::Ref ref) override</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00130">BoundedMappingTreeQAllocator.cpp:130</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a09fe8045d6640c9583f9dabfbd2db9ce"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a09fe8045d6640c9583f9dabfbd2db9ce">efd::QbitAllocator::mVQubits</a></div><div class="ttdeci">uint32_t mVQubits</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00038">QbitAllocator.h:38</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9a1414203994e495fe3ee8884d6e117bda"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a1414203994e495fe3ee8884d6e117bda">efd::ExitCode::EXIT_multi_deps</a></div></div>
<div class="ttc" id="structefd_1_1Dependencies_xhtml_a5c78bf4763aeb36f8dd32b35fd99bca8"><div class="ttname"><a href="../../d1/dca/structefd_1_1Dependencies.xhtml#a5c78bf4763aeb36f8dd32b35fd99bca8">efd::Dependencies::empty</a></div><div class="ttdeci">bool empty() const</div><div class="ttdoc">Forwards to the mDeps attribute. </div><div class="ttdef"><b>Definition:</b> <a href="../../da/dcd/DependencyBuilderPass_8cpp_source.xhtml#l00010">DependencyBuilderPass.cpp:10</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a18b0007f75e6b8d651b15754ff89f910"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a18b0007f75e6b8d651b15754ff89f910">efd::Fill</a></div><div class="ttdeci">void Fill(uint32_t archQ, Mapping &amp;mapping)</div><div class="ttdoc">Fills the unmapped qubits with the ones missing. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00062">QbitAllocator.cpp:62</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a186bbb1cec68c992374b8795b10af1a8"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a186bbb1cec68c992374b8795b10af1a8">efd::IdentityMapping</a></div><div class="ttdeci">Mapping IdentityMapping(uint32_t progQ)</div><div class="ttdoc">Returns an identity mapping. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00067">QbitAllocator.cpp:67</a></div></div>
<div class="ttc" id="structefd_1_1NodeCandidatesGenerator_xhtml_aae8b813abf257e7bf69303169c88bafc"><div class="ttname"><a href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#aae8b813abf257e7bf69303169c88bafc">efd::NodeCandidatesGenerator::finished</a></div><div class="ttdeci">bool finished()</div><div class="ttdoc">Returns whether we have finished processing the nodes. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00042">BoundedMappingTreeQAllocator.cpp:42</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a5b402c56e1e684dc46c4a627d8f71b5f"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a5b402c56e1e684dc46c4a627d8f71b5f">efd::BoundedMappingTreeQAllocator::mPartialSolutionCSelector</a></div><div class="ttdeci">CandidateSelector::uRef mPartialSolutionCSelector</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00175">BoundedMappingTreeQAllocator.h:175</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a2d5525abff76d4272fc8eb8020189a1a"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a2d5525abff76d4272fc8eb8020189a1a">efd::BoundedMappingTreeQAllocator::mLQPProcessor</a></div><div class="ttdeci">LiveQubitsPreProcessor::uRef mLQPProcessor</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00177">BoundedMappingTreeQAllocator.h:177</a></div></div>
<div class="ttc" id="classefd_1_1NodeRenameVisitor_xhtml_a222cfde4b0f189dfd4d73efc3a071904"><div class="ttname"><a href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml#a222cfde4b0f189dfd4d73efc3a071904">efd::NodeRenameVisitor::visitNDQOp</a></div><div class="ttdeci">void visitNDQOp(NDQOp::Ref qop)</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00117">BoundedMappingTreeQAllocator.cpp:117</a></div></div>
<div class="ttc" id="namespaceefd_1_1bmt_xhtml_af6fec08387d2e2051bc5f33a23bf9b1f"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#af6fec08387d2e2051bc5f33a23bf9b1f">efd::bmt::Vector</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Vector</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00039">BoundedMappingTreeQAllocator.h:39</a></div></div>
<div class="ttc" id="namespaceefd_1_1bmt_xhtml_aed26aa182d1884b63bcd51a2d94b1e0b"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#aed26aa182d1884b63bcd51a2d94b1e0b">efd::bmt::PPartition</a></div><div class="ttdeci">std::vector&lt; Node::Ref &gt; PPartition</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00066">BoundedMappingTreeQAllocator.h:66</a></div></div>
<div class="ttc" id="structefd_1_1SwapCostEstimator_xhtml_af213c604a655aedee2ca67fefb2992c8"><div class="ttname"><a href="../../db/d43/structefd_1_1SwapCostEstimator.xhtml#af213c604a655aedee2ca67fefb2992c8">efd::SwapCostEstimator::checkGraphSet</a></div><div class="ttdeci">void checkGraphSet()</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00080">BoundedMappingTreeQAllocator.cpp:80</a></div></div>
<div class="ttc" id="BoundedMappingTreeQAllocator_8h_xhtml"><div class="ttname"><a href="../../d6/daf/BoundedMappingTreeQAllocator_8h.xhtml">BoundedMappingTreeQAllocator.h</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_af8e947f977669e54d6aaf3a43815833c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af8e947f977669e54d6aaf3a43815833c">efd::CreateIRevCX</a></div><div class="ttdeci">NDQOp::uRef CreateIRevCX(Node::uRef lhs, Node::uRef rhs)</div><div class="ttdoc">Creates a call to the intrinsic reversal cnot function. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d0c/Utils_8cpp_source.xhtml#l00192">Utils.cpp:192</a></div></div>
<div class="ttc" id="namespaceefd_1_1bmt_xhtml_a2cca9e63ff880e5706b16091e81df342"><div class="ttname"><a href="../../d6/d1b/namespaceefd_1_1bmt.xhtml#a2cca9e63ff880e5706b16091e81df342">efd::bmt::TIVector</a></div><div class="ttdeci">std::vector&lt; TracebackInfo &gt; TIVector</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00045">BoundedMappingTreeQAllocator.h:45</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml">efd::Graph</a></div><div class="ttdoc">Graph representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d16/Graph_8h_source.xhtml#l00011">Graph.h:11</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_ace98685f8339bfd4ef61a932f519879f"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#ace98685f8339bfd4ef61a932f519879f">efd::BoundedMappingTreeQAllocator::setMapSeqSelector</a></div><div class="ttdeci">void setMapSeqSelector(MapSeqSelector::uRef sel)</div><div class="ttdoc">Sets the implementation for selecting the Mapping sequences in phase 2. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00658">BoundedMappingTreeQAllocator.cpp:658</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a0d1ee13f9fdf977893067cb4d0688e3f"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a0d1ee13f9fdf977893067cb4d0688e3f">efd::QModule::clearStatements</a></div><div class="ttdeci">void clearStatements()</div><div class="ttdoc">Removes all statements present int this module. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00131">QModule.cpp:131</a></div></div>
<div class="ttc" id="structefd_1_1NodeCandidatesGenerator_xhtml_a43228d164fad70f6099bc5eedb098f1c"><div class="ttname"><a href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a43228d164fad70f6099bc5eedb098f1c">efd::NodeCandidatesGenerator::initializeImpl</a></div><div class="ttdeci">virtual void initializeImpl()=0</div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">efd::ExitCode::EXIT_unreachable</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_a3d1f3d488b4ab5fa270373462f88bca6"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#a3d1f3d488b4ab5fa270373462f88bca6">efd::BoundedMappingTreeQAllocator::mMaxChildren</a></div><div class="ttdeci">uint32_t mMaxChildren</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00167">BoundedMappingTreeQAllocator.h:167</a></div></div>
<div class="ttc" id="structefd_1_1NodeCandidatesGenerator_xhtml_a484a8b4cf326cf97dc066fc5304c69b2"><div class="ttname"><a href="../../d1/d29/structefd_1_1NodeCandidatesGenerator.xhtml#a484a8b4cf326cf97dc066fc5304c69b2">efd::NodeCandidatesGenerator::mMod</a></div><div class="ttdeci">QModule::Ref mMod</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00094">BoundedMappingTreeQAllocator.h:94</a></div></div>
<div class="ttc" id="classefd_1_1NDList_xhtml_a381f5bae7577d37327a824973f81d494"><div class="ttname"><a href="../../da/ddd/classefd_1_1NDList.xhtml#a381f5bae7577d37327a824973f81d494">efd::NDList::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; NDList &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00334">Nodes.h:334</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1MappingSwapSequence_xhtml_a21abd76b910239ebc970bb6a5a1277b4"><div class="ttname"><a href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#a21abd76b910239ebc970bb6a5a1277b4">efd::bmt::MappingSwapSequence::cost</a></div><div class="ttdeci">uint32_t cost</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00063">BoundedMappingTreeQAllocator.h:63</a></div></div>
<div class="ttc" id="DefaultBMTQAllocatorImpl_8h_xhtml"><div class="ttname"><a href="../../db/d1c/DefaultBMTQAllocatorImpl_8h.xhtml">DefaultBMTQAllocatorImpl.h</a></div></div>
<div class="ttc" id="classefd_1_1NodeRenameVisitor_xhtml"><div class="ttname"><a href="../../d1/d38/classefd_1_1NodeRenameVisitor.xhtml">efd::NodeRenameVisitor</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d6/dab/BoundedMappingTreeQAllocator_8cpp_source.xhtml#l00089">BoundedMappingTreeQAllocator.cpp:89</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a3ab6f82f2df49bbde5c943bbe60c3cf3a8b04d5e3775d298e78455efc5ca404d5"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a3ab6f82f2df49bbde5c943bbe60c3cf3a8b04d5e3775d298e78455efc5ca404d5">efd::Allocator::first</a></div></div>
<div class="ttc" id="classefd_1_1PassT_xhtml_a392ca2f78dace7161b2ad952a869b886"><div class="ttname"><a href="../../db/d56/classefd_1_1PassT.xhtml#a392ca2f78dace7161b2ad952a869b886">efd::PassT&lt; Mapping &gt;::getData</a></div><div class="ttdeci">Mapping getData() const</div><div class="ttdoc">Gets the resulting data. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d29/Pass_8h_source.xhtml#l00076">Pass.h:76</a></div></div>
<div class="ttc" id="classefd_1_1BoundedMappingTreeQAllocator_xhtml_abc93b04e6465c6825d7be4355c012767"><div class="ttname"><a href="../../d1/dd6/classefd_1_1BoundedMappingTreeQAllocator.xhtml#abc93b04e6465c6825d7be4355c012767">efd::BoundedMappingTreeQAllocator::mMaxPartial</a></div><div class="ttdeci">uint32_t mMaxPartial</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00168">BoundedMappingTreeQAllocator.h:168</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1MappingSwapSequence_xhtml_ae19f8682528a945d122e4582f6fbebab"><div class="ttname"><a href="../../d6/da7/structefd_1_1bmt_1_1MappingSwapSequence.xhtml#ae19f8682528a945d122e4582f6fbebab">efd::bmt::MappingSwapSequence::mappingV</a></div><div class="ttdeci">MappingVector mappingV</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00061">BoundedMappingTreeQAllocator.h:61</a></div></div>
<div class="ttc" id="Timer_8h_xhtml"><div class="ttname"><a href="../../dd/d27/Timer_8h.xhtml">Timer.h</a></div></div>
<div class="ttc" id="Defs_8h_xhtml"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml">Defs.h</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_ae645e4b0ccb9c25c534883843484f06a"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">efd::XbitToNumber::getQUId</a></div><div class="ttdeci">uint32_t getQUId(std::string id, NDGateDecl::Ref gate=nullptr) const</div><div class="ttdoc">Returns an uint32_t number representing the qubit in this specific gate (if any). ...</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00030">XbitToNumberPass.cpp:30</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a12c2040f25d8e3a7b9e1c2024c618cb6"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a></div><div class="ttdeci">#define INF</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00048">Defs.h:48</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpMeasure_xhtml"><div class="ttname"><a href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">efd::NDQOpMeasure</a></div><div class="ttdoc">NDQOp specialized for measure operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00681">Nodes.h:681</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml">efd::QbitAllocator</a></div><div class="ttdoc">Base abstract class that allocates the qbits used in the program to the qbits that are in the physica...</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00012">QbitAllocator.h:12</a></div></div>
<div class="ttc" id="structefd_1_1bmt_1_1TracebackInfo_xhtml_ad43ef483f450c2884662be8596af8485"><div class="ttname"><a href="../../d7/db0/structefd_1_1bmt_1_1TracebackInfo.xhtml#ad43ef483f450c2884662be8596af8485">efd::bmt::TracebackInfo::swapEstimatedCost</a></div><div class="ttdeci">uint32_t swapEstimatedCost</div><div class="ttdef"><b>Definition:</b> <a href="../../d6/daf/BoundedMappingTreeQAllocator_8h_source.xhtml#l00036">BoundedMappingTreeQAllocator.h:36</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a12a4775008cb8b6242cedc3621d98f9c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">efd::Mapping</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Mapping</div><div class="ttdoc">Defines the type used for mapping the qubits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00011">Defs.h:11</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpCX_xhtml"><div class="ttname"><a href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">efd::NDQOpCX</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00744">Nodes.h:744</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_adb4ffc373d7273aefb15d2f9dcd4aeb4"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">efd::InvertMapping</a></div><div class="ttdeci">InverseMap InvertMapping(uint32_t archQ, Mapping mapping, bool fill=true)</div><div class="ttdoc">Generates an assignment mapping (maps the architecture&amp;#39;s qubits to the logical ones) of size archQ...</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00025">QbitAllocator.cpp:25</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
