<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/Allocators/DynprogQAllocator.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li><li class="navelem"><a class="el" href="../../dir_06974191db7fbe66527a95ceac77ccfb.xhtml">Allocators</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">DynprogQAllocator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d4/d00/DynprogQAllocator_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d4/da3/DynprogQAllocator_8h.xhtml">enfield/Transform/Allocators/DynprogQAllocator.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/d82/PassCache_8h.xhtml">enfield/Transform/PassCache.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/d2d/BFSPathFinder_8h.xhtml">enfield/Support/BFSPathFinder.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/d41/CommandLine_8h.xhtml">enfield/Support/CommandLine.h</a>&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../de/d31/ExpTSFinder_8h.xhtml">enfield/Support/ExpTSFinder.h</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">   13</a></span>&#160;<span class="keyword">const</span> uint32_t <a class="code" href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">UNREACH</a> = std::numeric_limits&lt;uint32_t&gt;::max();</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="../../df/d2f/structVal.xhtml">   15</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../df/d2f/structVal.xhtml">Val</a> {</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="../../df/d2f/structVal.xhtml#a5ffa77ec211d52104a418e69b9d1fcba">   16</a></span>&#160;    uint32_t <a class="code" href="../../df/d2f/structVal.xhtml#a5ffa77ec211d52104a418e69b9d1fcba">pId</a>;</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="../../df/d2f/structVal.xhtml#a22760f2794c5b45a26a532716edbb231">   17</a></span>&#160;    <a class="code" href="../../df/d2f/structVal.xhtml">Val</a>* <a class="code" href="../../df/d2f/structVal.xhtml#a22760f2794c5b45a26a532716edbb231">parent</a>;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">   18</a></span>&#160;    uint32_t <a class="code" href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">cost</a>;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;};</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../d7/d65/structPermVal.xhtml">   21</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d7/d65/structPermVal.xhtml">PermVal</a> {</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="../../d7/d65/structPermVal.xhtml#ad52c08a9d92f747c54f0c744c8d59a15">   22</a></span>&#160;    uint32_t <a class="code" href="../../d7/d65/structPermVal.xhtml#ad52c08a9d92f747c54f0c744c8d59a15">idx</a>;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d7/d65/structPermVal.xhtml#a5468c28e9f01d2c98e9919eea12eaa56">   23</a></span>&#160;    std::vector&lt;uint32_t&gt; <a class="code" href="../../d7/d65/structPermVal.xhtml#a5468c28e9f01d2c98e9919eea12eaa56">perm</a>;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;};</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> uint32_t min(uint32_t a, uint32_t b) {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">if</span> (a == <a class="code" href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">UNREACH</a> &amp;&amp; b == <a class="code" href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">UNREACH</a>)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">UNREACH</a>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">if</span> (a == <a class="code" href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">UNREACH</a>) <span class="keywordflow">return</span> b;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">if</span> (b == <a class="code" href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">UNREACH</a>) <span class="keywordflow">return</span> a;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">return</span> (a &lt; b) ? a : b;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="../../df/d2f/structVal.xhtml">Val</a> minVal(<a class="code" href="../../df/d2f/structVal.xhtml">Val</a>&amp; a, <a class="code" href="../../df/d2f/structVal.xhtml">Val</a>&amp; b) {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    uint32_t cost = min(a.<a class="code" href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">cost</a>, b.<a class="code" href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">cost</a>);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">if</span> (cost == a.<a class="code" href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">cost</a>) <span class="keywordflow">return</span> a;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">return</span> b;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#a86570ec425a36664f1864144ffb3f2f8">   42</a></span>&#160;uint32_t <a class="code" href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#a86570ec425a36664f1864144ffb3f2f8">efd::DynprogQAllocator::getIntermediateV</a>(uint32_t u, uint32_t v) {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">auto</span>&amp; succ = <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;succ(u);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; w : succ) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; z : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;succ(w))</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">if</span> (z == v) <span class="keywordflow">return</span> w;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; z : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;pred(w))</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keywordflow">if</span> (z == v) <span class="keywordflow">return</span> w;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">UNREACH</a>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#af93bfbe212eea6cf7dede9b348bb07d7">   55</a></span>&#160;<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml">efd::StdSolution</a> <a class="code" href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#af93bfbe212eea6cf7dede9b348bb07d7">efd::DynprogQAllocator::buildStdSolution</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod) {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">auto</span> &amp;deps = PassCache::Get&lt;DependencyBuilderWrapperPass&gt;(mMod)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        -&gt;getData()</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        .getDependencies();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml">ExpTSFinder</a> tsp;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    tsp.<a class="code" href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#aaaa4a52dc3dcc0d13112c784d89cd8ee">setGraph</a>(mArchGraph.get());</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">auto</span> permutations = tsp.<a class="code" href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml#a8d2b03e37f848cb9170f7b102e3538f7">mInverseMaps</a>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    uint32_t archQ = mArchGraph-&gt;size();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> uint32_t SWAP_COST = <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a>.getVal();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> uint32_t REV_COST = <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a>.getVal();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> uint32_t LCX_COST = <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a37e324531f1d9e6e8b4304b6043309a9">LCXCost</a>.getVal();</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    uint32_t permN = permutations.size();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    uint32_t depN = deps.size();</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">auto</span> finder = <a class="code" href="../../d8/d45/classefd_1_1BFSPathFinder.xhtml#a795602a2f10b312f8917cf0ed4122834">BFSPathFinder::Create</a>();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// std::vector&lt;std::vector&lt;uint32_t&gt;*&gt; permIdMap(permN, nullptr);</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// for (auto &amp;pair : PermMap)</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">//     permIdMap[pair.second.idx] = &amp;pair.second.perm;</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// Map with the minimum number of vals at time &#39;i&#39;.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="../../df/d2f/structVal.xhtml">Val</a> vals[permN][depN + 1];</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; permN; ++i)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        vals[i][0] = { i, <span class="keyword">nullptr</span>, 0 };</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; permN; ++i)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">for</span> (uint32_t j = 1; j &lt;= depN; ++j)</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            vals[i][j] = { i, <span class="keyword">nullptr</span>, <a class="code" href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">UNREACH</a> };</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 1; i &lt;= depN; ++i) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">if</span> (deps[i-1].size() &gt; 1) {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Trying to allocate qbits to a gate with more than one dependency.&quot;</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                &lt;&lt; <span class="stringliteral">&quot; Gate: `&quot;</span> &lt;&lt; deps[i-1].mCallPoint-&gt;toString(<span class="keyword">false</span>) &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a1414203994e495fe3ee8884d6e117bda">ExitCode::EXIT_multi_deps</a>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml">efd::Dep</a> dep = deps[i-1].mDeps[0];</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">for</span> (uint32_t tgt = 0; tgt &lt; permN; ++tgt) {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="comment">// Check if target tgtPermutation has the dependency required.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keyword">auto</span>&amp; tgtPerm = permutations[tgt];</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="comment">// Arch qubit interaction (u, v)</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            uint32_t u = tgtPerm[dep.<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">mFrom</a>], v = tgtPerm[dep.<a class="code" href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">mTo</a>];</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="comment">// We don&#39;t use this configuration if (u, v) is neither a norma edge</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="comment">// nor a reverse edge of the physical graph nor is at a 2-edge distance</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="comment">// (u -&gt; w -&gt; v).</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordtype">bool</span> hasEdge = mArchGraph-&gt;hasEdge(u, v);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordtype">bool</span> isReverse = mArchGraph-&gt;isReverseEdge(u, v);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordtype">bool</span> is2Dist = finder-&gt;find(mArchGraph.get(), u, v).size() == 3;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">if</span> (!hasEdge &amp;&amp; !isReverse &amp;&amp; !is2Dist)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <a class="code" href="../../df/d2f/structVal.xhtml">Val</a> minimum { tgt, <span class="keyword">nullptr</span>, <a class="code" href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">UNREACH</a> };</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">for</span> (uint32_t src = 0; src &lt; permN; ++src) {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <a class="code" href="../../df/d2f/structVal.xhtml">Val</a>&amp; srcVal = vals[src][i-1];</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">if</span> (srcVal.<a class="code" href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">cost</a> == <a class="code" href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">UNREACH</a>)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                uint32_t finalCost = srcVal.<a class="code" href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">cost</a>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keywordflow">if</span> (tgt != src) {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keyword">auto</span> srcInverseMap = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(archQ, permutations[src]);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keyword">auto</span> tgtInverseMap = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(archQ, tgtPerm);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    finalCost += tsp.<a class="code" href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#a032fb3829d5f2625dc44f1cd5fe8d6c6">find</a>(srcInverseMap, tgtInverseMap).size() * SWAP_COST;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="keywordflow">if</span> (!hasEdge) {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="comment">// Increase cost if using reverse edge.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="keywordflow">if</span> (isReverse)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        finalCost += REV_COST;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="comment">// Else, increase cost if using long cnot gate.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (is2Dist)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                        finalCost += LCX_COST;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <a class="code" href="../../df/d2f/structVal.xhtml">Val</a> thisVal { tgt, &amp;srcVal, finalCost };</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                minimum = minVal(minimum, thisVal);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            vals[tgt][i] = minimum;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Get the minimum cost setup.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="../../df/d2f/structVal.xhtml">Val</a>* val = &amp;vals[0][depN];</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; permN; ++i) {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        uint32_t minCost = min(val-&gt;<a class="code" href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">cost</a>, vals[i][depN].<a class="code" href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">cost</a>);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        val = (minCost == val-&gt;<a class="code" href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">cost</a>) ? val : &amp;vals[i][depN];</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml">StdSolution</a> solution;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    solution.<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a7b03dbe2bf5d8e702502d090171291fa">mCost</a> = val-&gt;<a class="code" href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">cost</a>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    solution.<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a082156f51e901afbeb81eaa13d02a4bf">mOpSeqs</a>.assign(depN, std::pair&lt;Node::Ref, StdSolution::OpVector&gt;());</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// Get the target mappings for each dependency (with its id).</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    std::vector&lt;std::pair&lt;uint32_t, Mapping&gt;&gt; mappings(depN);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = depN-1; i &gt;= 0; --i) {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">if</span> (val-&gt;<a class="code" href="../../df/d2f/structVal.xhtml#a22760f2794c5b45a26a532716edbb231">parent</a> == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Nullptr reached too soon.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        mappings[i] = std::make_pair(val-&gt;<a class="code" href="../../df/d2f/structVal.xhtml#a5ffa77ec211d52104a418e69b9d1fcba">pId</a>, permutations[val-&gt;<a class="code" href="../../df/d2f/structVal.xhtml#a5ffa77ec211d52104a418e69b9d1fcba">pId</a>]);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        val = val-&gt;<a class="code" href="../../df/d2f/structVal.xhtml#a22760f2794c5b45a26a532716edbb231">parent</a>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span> (depN == 0) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; archQ; ++i)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            solution.<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a77fa5f099eb22c0a13ee6183d152c446">mInitial</a>.push_back(i);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        solution.<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a7b03dbe2bf5d8e702502d090171291fa">mCost</a> = 0;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        solution.<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a77fa5f099eb22c0a13ee6183d152c446">mInitial</a> = mappings[0].second;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        solution.<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a082156f51e901afbeb81eaa13d02a4bf">mOpSeqs</a>[0].first = deps[0].mCallPoint;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; depN; ++i) {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            uint32_t srcId = mappings[i-1].first, tgtId = mappings[i].first;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keyword">auto</span>&amp; ops = solution.<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a082156f51e901afbeb81eaa13d02a4bf">mOpSeqs</a>[i];</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keyword">auto</span>&amp; src = mappings[i-1].second;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keyword">auto</span>&amp; tgt = mappings[i].second;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="keywordflow">if</span> (srcId != tgtId) {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <span class="keyword">auto</span> srcInverseMap = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(archQ, src);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                <span class="keyword">auto</span> tgtInverseMap = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(archQ, tgt);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <span class="keyword">auto</span> swaps = tsp.<a class="code" href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#a032fb3829d5f2625dc44f1cd5fe8d6c6">find</a>(srcInverseMap, tgtInverseMap);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span> swp : swaps) {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    uint32_t u = swp.u, v = swp.v;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <span class="keywordflow">if</span> (mArchGraph-&gt;isReverseEdge(u, v))</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        std::swap(u, v);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    ops.second.push_back({ <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">Operation::K_OP_SWAP</a>, srcInverseMap[u], srcInverseMap[v] });</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    std::swap(srcInverseMap[u], srcInverseMap[v]);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keyword">auto</span> dep = deps[i][0];</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            uint32_t a = dep.mFrom, b = dep.mTo;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            uint32_t u = tgt[a], v = tgt[b];</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keyword">auto</span> inv = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(mArchGraph-&gt;size(), tgt);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml">Operation</a> operation;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">if</span> (mArchGraph-&gt;hasEdge(u, v))</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                operation = { <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">Operation::K_OP_CNOT</a>, a, b };</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mArchGraph-&gt;isReverseEdge(u, v))</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                operation = { <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">Operation::K_OP_REV</a>, a, b };</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keywordflow">else</span> {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="keyword">auto</span> path = finder-&gt;find(mArchGraph.get(), u, v);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="keywordflow">if</span> (path.size() != 3) {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Can&#39;t apply a long cnot. Actual path size: `&quot;</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        &lt;&lt; path.size() &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                operation = { <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a20b669183f13598bd8a76a795be32afb">Operation::K_OP_LCNOT</a>, a, b };</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                operation.mW = inv[path[1]];</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            ops.first = deps[i].mCallPoint;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            ops.second.push_back(operation);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">return</span> solution;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#ad6d4854485eda9f77f95171f9bc1abc7">  230</a></span>&#160;<a class="code" href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#ad6d4854485eda9f77f95171f9bc1abc7">efd::DynprogQAllocator::DynprogQAllocator</a>(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">ArchGraph::sRef</a> pGraph) </div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    : <a class="code" href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml">StdSolutionQAllocator</a>(pGraph) {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<a class="code" href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#a7f6b070ad267b22b7a23e11288205e36">efd::DynprogQAllocator::uRef</a> <a class="code" href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#a9d0403d14c147e7c6672d708670796ae">efd::DynprogQAllocator::Create</a></div><div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#a9d0403d14c147e7c6672d708670796ae">  235</a></span>&#160;(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">ArchGraph::sRef</a> archGraph) {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#a7f6b070ad267b22b7a23e11288205e36">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml">DynprogQAllocator</a>(archGraph));</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;}</div><div class="ttc" id="classefd_1_1BFSPathFinder_xhtml_a795602a2f10b312f8917cf0ed4122834"><div class="ttname"><a href="../../d8/d45/classefd_1_1BFSPathFinder.xhtml#a795602a2f10b312f8917cf0ed4122834">efd::BFSPathFinder::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdoc">Creates one instance of this finder. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d3a/BFSPathFinder_8cpp_source.xhtml#l00059">BFSPathFinder.cpp:59</a></div></div>
<div class="ttc" id="IntrinsicGateCostPass_8cpp_xhtml_a99fd7c5ea250372d9b17e42df7764318"><div class="ttname"><a href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; SwapCost(&quot;-swap-cost&quot;, &quot;Cost of using a swap function.&quot;, 7, false)</div></div>
<div class="ttc" id="structefd_1_1Dep_xhtml"><div class="ttname"><a href="../../d9/d38/structefd_1_1Dep.xhtml">efd::Dep</a></div><div class="ttdoc">Structure for abstracting dependencies. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00017">DependencyBuilderPass.h:17</a></div></div>
<div class="ttc" id="structPermVal_xhtml_ad52c08a9d92f747c54f0c744c8d59a15"><div class="ttname"><a href="../../d7/d65/structPermVal.xhtml#ad52c08a9d92f747c54f0c744c8d59a15">PermVal::idx</a></div><div class="ttdeci">uint32_t idx</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00022">DynprogQAllocator.cpp:22</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">efd::Operation::K_OP_REV</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00016">StdSolutionQAllocator.h:16</a></div></div>
<div class="ttc" id="structVal_xhtml"><div class="ttname"><a href="../../df/d2f/structVal.xhtml">Val</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00015">DynprogQAllocator.cpp:15</a></div></div>
<div class="ttc" id="classefd_1_1DynprogQAllocator_xhtml_ad6d4854485eda9f77f95171f9bc1abc7"><div class="ttname"><a href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#ad6d4854485eda9f77f95171f9bc1abc7">efd::DynprogQAllocator::DynprogQAllocator</a></div><div class="ttdeci">DynprogQAllocator(ArchGraph::sRef archGraph)</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00230">DynprogQAllocator.cpp:230</a></div></div>
<div class="ttc" id="structVal_xhtml_a22760f2794c5b45a26a532716edbb231"><div class="ttname"><a href="../../df/d2f/structVal.xhtml#a22760f2794c5b45a26a532716edbb231">Val::parent</a></div><div class="ttdeci">Val * parent</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00017">DynprogQAllocator.cpp:17</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="classefd_1_1TokenSwapFinder_xhtml_a032fb3829d5f2625dc44f1cd5fe8d6c6"><div class="ttname"><a href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#a032fb3829d5f2625dc44f1cd5fe8d6c6">efd::TokenSwapFinder::find</a></div><div class="ttdeci">SwapSeq find(const InverseMap &amp;from, const InverseMap &amp;to)</div><div class="ttdoc">Finds a swap sequence to reach to from from. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/dfb/TokenSwapFinder_8cpp_source.xhtml#l00019">TokenSwapFinder.cpp:19</a></div></div>
<div class="ttc" id="structefd_1_1StdSolution_xhtml_a77fa5f099eb22c0a13ee6183d152c446"><div class="ttname"><a href="../../db/d36/structefd_1_1StdSolution.xhtml#a77fa5f099eb22c0a13ee6183d152c446">efd::StdSolution::mInitial</a></div><div class="ttdeci">Mapping mInitial</div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00036">StdSolutionQAllocator.h:36</a></div></div>
<div class="ttc" id="DynprogQAllocator_8h_xhtml"><div class="ttname"><a href="../../d4/da3/DynprogQAllocator_8h.xhtml">DynprogQAllocator.h</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a4d7d13dd12213a9f247d1304472badbd"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">efd::QbitAllocator::mArchGraph</a></div><div class="ttdeci">ArchGraph::sRef mArchGraph</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00034">QbitAllocator.h:34</a></div></div>
<div class="ttc" id="classefd_1_1ExpTSFinder_xhtml"><div class="ttname"><a href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml">efd::ExpTSFinder</a></div><div class="ttdoc">Brute force solution to the Token Swap Finder. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/d31/ExpTSFinder_8h_source.xhtml#l00017">ExpTSFinder.h:17</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml">efd::QModule</a></div><div class="ttdoc">Qasm module representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00013">QModule.h:13</a></div></div>
<div class="ttc" id="structefd_1_1Dep_xhtml_a87771188e9aacbd64ccd94e9b9524135"><div class="ttname"><a href="../../d9/d38/structefd_1_1Dep.xhtml#a87771188e9aacbd64ccd94e9b9524135">efd::Dep::mTo</a></div><div class="ttdeci">uint32_t mTo</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00019">DependencyBuilderPass.h:19</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml">efd::Operation</a></div><div class="ttdoc">Struct used to describe the operation chosen for each solving each dependency. </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00012">StdSolutionQAllocator.h:12</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3a20b669183f13598bd8a76a795be32afb"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a20b669183f13598bd8a76a795be32afb">efd::Operation::K_OP_LCNOT</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00017">StdSolutionQAllocator.h:17</a></div></div>
<div class="ttc" id="structVal_xhtml_a71d45d5e04854745eadd25c28449e045"><div class="ttname"><a href="../../df/d2f/structVal.xhtml#a71d45d5e04854745eadd25c28449e045">Val::cost</a></div><div class="ttdeci">uint32_t cost</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00018">DynprogQAllocator.cpp:18</a></div></div>
<div class="ttc" id="structefd_1_1StdSolution_xhtml"><div class="ttname"><a href="../../db/d36/structefd_1_1StdSolution.xhtml">efd::StdSolution</a></div><div class="ttdoc">The solution for the allocation problem. </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00031">StdSolutionQAllocator.h:31</a></div></div>
<div class="ttc" id="structPermVal_xhtml_a5468c28e9f01d2c98e9919eea12eaa56"><div class="ttname"><a href="../../d7/d65/structPermVal.xhtml#a5468c28e9f01d2c98e9919eea12eaa56">PermVal::perm</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; perm</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00023">DynprogQAllocator.cpp:23</a></div></div>
<div class="ttc" id="structefd_1_1StdSolution_xhtml_a7b03dbe2bf5d8e702502d090171291fa"><div class="ttname"><a href="../../db/d36/structefd_1_1StdSolution.xhtml#a7b03dbe2bf5d8e702502d090171291fa">efd::StdSolution::mCost</a></div><div class="ttdeci">uint32_t mCost</div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00038">StdSolutionQAllocator.h:38</a></div></div>
<div class="ttc" id="DynprogQAllocator_8cpp_xhtml_a0d146162f9e8a865b915f60c5e6d653a"><div class="ttname"><a href="../../d4/d00/DynprogQAllocator_8cpp.xhtml#a0d146162f9e8a865b915f60c5e6d653a">UNREACH</a></div><div class="ttdeci">const uint32_t UNREACH</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00013">DynprogQAllocator.cpp:13</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml_a8c9131ca43a772179c24fa4dc9701bb2"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">efd::ArchGraph::sRef</a></div><div class="ttdeci">std::shared_ptr&lt; ArchGraph &gt; sRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00014">ArchGraph.h:14</a></div></div>
<div class="ttc" id="CommandLine_8h_xhtml"><div class="ttname"><a href="../../d9/d41/CommandLine_8h.xhtml">CommandLine.h</a></div></div>
<div class="ttc" id="classefd_1_1StdSolutionQAllocator_xhtml"><div class="ttname"><a href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml">efd::StdSolutionQAllocator</a></div><div class="ttdoc">An abstract allocator that builds the solution based on a StdSolution. </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00045">StdSolutionQAllocator.h:45</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">efd::Operation::K_OP_SWAP</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00018">StdSolutionQAllocator.h:18</a></div></div>
<div class="ttc" id="BFSPathFinder_8h_xhtml"><div class="ttname"><a href="../../d7/d2d/BFSPathFinder_8h.xhtml">BFSPathFinder.h</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">efd::Operation::K_OP_CNOT</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00015">StdSolutionQAllocator.h:15</a></div></div>
<div class="ttc" id="classefd_1_1TokenSwapFinder_xhtml_aaaa4a52dc3dcc0d13112c784d89cd8ee"><div class="ttname"><a href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#aaaa4a52dc3dcc0d13112c784d89cd8ee">efd::TokenSwapFinder::setGraph</a></div><div class="ttdeci">void setGraph(Graph::Ref graph)</div><div class="ttdoc">Sets the Graph. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/dfb/TokenSwapFinder_8cpp_source.xhtml#l00014">TokenSwapFinder.cpp:14</a></div></div>
<div class="ttc" id="classefd_1_1DynprogQAllocator_xhtml_a86570ec425a36664f1864144ffb3f2f8"><div class="ttname"><a href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#a86570ec425a36664f1864144ffb3f2f8">efd::DynprogQAllocator::getIntermediateV</a></div><div class="ttdeci">uint32_t getIntermediateV(uint32_t u, uint32_t v)</div><div class="ttdoc">Gets the intermediate vertex between &amp;#39;u&amp;#39; and &amp;#39;v&amp;#39;, if there exists one. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00042">DynprogQAllocator.cpp:42</a></div></div>
<div class="ttc" id="structefd_1_1Dep_xhtml_a79841bfc527c14f4c1faeb37e2c4c1ee"><div class="ttname"><a href="../../d9/d38/structefd_1_1Dep.xhtml#a79841bfc527c14f4c1faeb37e2c4c1ee">efd::Dep::mFrom</a></div><div class="ttdeci">uint32_t mFrom</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00018">DependencyBuilderPass.h:18</a></div></div>
<div class="ttc" id="structVal_xhtml_a5ffa77ec211d52104a418e69b9d1fcba"><div class="ttname"><a href="../../df/d2f/structVal.xhtml#a5ffa77ec211d52104a418e69b9d1fcba">Val::pId</a></div><div class="ttdeci">uint32_t pId</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00016">DynprogQAllocator.cpp:16</a></div></div>
<div class="ttc" id="PassCache_8h_xhtml"><div class="ttname"><a href="../../db/d82/PassCache_8h.xhtml">PassCache.h</a></div></div>
<div class="ttc" id="classefd_1_1DynprogQAllocator_xhtml"><div class="ttname"><a href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml">efd::DynprogQAllocator</a></div><div class="ttdoc">Implementation of DepSolverQAllocator that uses dynamic programming to obtain an optimal solution...</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/da3/DynprogQAllocator_8h_source.xhtml#l00014">DynprogQAllocator.h:14</a></div></div>
<div class="ttc" id="ExpTSFinder_8h_xhtml"><div class="ttname"><a href="../../de/d31/ExpTSFinder_8h.xhtml">ExpTSFinder.h</a></div></div>
<div class="ttc" id="IntrinsicGateCostPass_8cpp_xhtml_a36846d9fb7f5b314db3aa16d72efe81f"><div class="ttname"><a href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; RevCost(&quot;-rev-cost&quot;, &quot;Cost of using a reverse edge.&quot;, 4, false)</div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9a1414203994e495fe3ee8884d6e117bda"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9a1414203994e495fe3ee8884d6e117bda">efd::ExitCode::EXIT_multi_deps</a></div></div>
<div class="ttc" id="classefd_1_1DynprogQAllocator_xhtml_af93bfbe212eea6cf7dede9b348bb07d7"><div class="ttname"><a href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#af93bfbe212eea6cf7dede9b348bb07d7">efd::DynprogQAllocator::buildStdSolution</a></div><div class="ttdeci">StdSolution buildStdSolution(QModule::Ref qmod) override</div><div class="ttdoc">Executes the allocation algorithm after the preprocessing. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00055">DynprogQAllocator.cpp:55</a></div></div>
<div class="ttc" id="IntrinsicGateCostPass_8cpp_xhtml_a37e324531f1d9e6e8b4304b6043309a9"><div class="ttname"><a href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a37e324531f1d9e6e8b4304b6043309a9">LCXCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; LCXCost(&quot;-lcx-cost&quot;, &quot;Cost of using long cnot gate.&quot;, 10, false)</div></div>
<div class="ttc" id="classefd_1_1DynprogQAllocator_xhtml_a7f6b070ad267b22b7a23e11288205e36"><div class="ttname"><a href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#a7f6b070ad267b22b7a23e11288205e36">efd::DynprogQAllocator::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; DynprogQAllocator &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/da3/DynprogQAllocator_8h_source.xhtml#l00017">DynprogQAllocator.h:17</a></div></div>
<div class="ttc" id="structPermVal_xhtml"><div class="ttname"><a href="../../d7/d65/structPermVal.xhtml">PermVal</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00021">DynprogQAllocator.cpp:21</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">efd::ExitCode::EXIT_unreachable</a></div></div>
<div class="ttc" id="classefd_1_1ExpTSFinder_xhtml_a8d2b03e37f848cb9170f7b102e3538f7"><div class="ttname"><a href="../../d1/d42/classefd_1_1ExpTSFinder.xhtml#a8d2b03e37f848cb9170f7b102e3538f7">efd::ExpTSFinder::mInverseMaps</a></div><div class="ttdeci">std::vector&lt; InverseMap &gt; mInverseMaps</div><div class="ttdef"><b>Definition:</b> <a href="../../de/d31/ExpTSFinder_8h_source.xhtml#l00032">ExpTSFinder.h:32</a></div></div>
<div class="ttc" id="structefd_1_1StdSolution_xhtml_a082156f51e901afbeb81eaa13d02a4bf"><div class="ttname"><a href="../../db/d36/structefd_1_1StdSolution.xhtml#a082156f51e901afbeb81eaa13d02a4bf">efd::StdSolution::mOpSeqs</a></div><div class="ttdeci">OpSequences mOpSeqs</div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00037">StdSolutionQAllocator.h:37</a></div></div>
<div class="ttc" id="classefd_1_1DynprogQAllocator_xhtml_a9d0403d14c147e7c6672d708670796ae"><div class="ttname"><a href="../../d1/d93/classefd_1_1DynprogQAllocator.xhtml#a9d0403d14c147e7c6672d708670796ae">efd::DynprogQAllocator::Create</a></div><div class="ttdeci">static uRef Create(ArchGraph::sRef archGraph)</div><div class="ttdoc">Create a new instance of this class. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d00/DynprogQAllocator_8cpp_source.xhtml#l00235">DynprogQAllocator.cpp:235</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_adb4ffc373d7273aefb15d2f9dcd4aeb4"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">efd::InvertMapping</a></div><div class="ttdeci">InverseMap InvertMapping(uint32_t archQ, Mapping mapping, bool fill=true)</div><div class="ttdoc">Generates an assignment mapping (maps the architecture&amp;#39;s qubits to the logical ones) of size archQ...</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00025">QbitAllocator.cpp:25</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
