<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/Allocators/GreedyCktQAllocator.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li><li class="navelem"><a class="el" href="../../dir_06974191db7fbe66527a95ceac77ccfb.xhtml">Allocators</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">GreedyCktQAllocator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d0/d2e/GreedyCktQAllocator_8h.xhtml">enfield/Transform/Allocators/GreedyCktQAllocator.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d3/d1b/WeightedSIMappingFinder_8h.xhtml">enfield/Transform/Allocators/Simple/WeightedSIMappingFinder.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d8/d9b/CircuitGraphBuilderPass_8h.xhtml">enfield/Transform/CircuitGraphBuilderPass.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/d82/PassCache_8h.xhtml">enfield/Transform/PassCache.h</a>&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/d2d/BFSPathFinder_8h.xhtml">enfield/Support/BFSPathFinder.h</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/d73/Defs_8h.xhtml">enfield/Support/Defs.h</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">using namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0">   12</a></span>&#160;<span class="keyword">enum</span> <a class="code" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0">PropKind</a> { <a class="code" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0acac7222d09b600e052fdda2132a1a58f">K_SWP</a>, <a class="code" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0afce681a1f146b06d22468a204574ec66">K_FRZ</a> } <a class="code" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#a42598fa8630db250f981a396b4a0f231">type</a>;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="../../d5/d5b/structAllocProps.xhtml">   14</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d5/d5b/structAllocProps.xhtml">AllocProps</a> {</div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="../../d5/d5b/structAllocProps.xhtml#af241694c0924ed211112c664d3e79744">   15</a></span>&#160;    <a class="code" href="../../d9/dbc/structefd_1_1CircuitGraph_1_1CircuitNode.xhtml#a83679503f90a0bda804bc7d462ce44b9">CircuitGraph::CircuitNode::sRef</a> <a class="code" href="../../d5/d5b/structAllocProps.xhtml#af241694c0924ed211112c664d3e79744">cnode</a>;</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">   16</a></span>&#160;    uint32_t <a class="code" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">cost</a>;</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="../../d5/d5b/structAllocProps.xhtml#a5c846c2bbdc24aff26ada7549231496e">   17</a></span>&#160;    std::vector&lt;uint32_t&gt; <a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5c846c2bbdc24aff26ada7549231496e">path</a>;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="../../d5/d5b/structAllocProps.xhtml#a404edad7a7ce38f9df7b53019ae2162d">   19</a></span>&#160;    <a class="code" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0">PropKind</a> <a class="code" href="../../d5/d5b/structAllocProps.xhtml#a404edad7a7ce38f9df7b53019ae2162d">type</a>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keyword">union </span>{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keyword">struct </span>{</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d5/d5b/structAllocProps.xhtml#afaf27463cbfa80fe2688c7178654fe8b">   23</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="../../d5/d5b/structAllocProps.xhtml#afaf27463cbfa80fe2688c7178654fe8b">mvTgtSrc</a>;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        } swp;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keyword">struct </span>{</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="../../d5/d5b/structAllocProps.xhtml#aee612f4f21264416222c245a9b9c34b5">   27</a></span>&#160;            uint32_t from, <a class="code" href="../../d5/d5b/structAllocProps.xhtml#aee612f4f21264416222c245a9b9c34b5">to</a>;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        } frz;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    } u;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;};</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a43d04eb453f7a7f2787697278c282922">   32</a></span>&#160;<a class="code" href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a43d04eb453f7a7f2787697278c282922">GreedyCktQAllocator::GreedyCktQAllocator</a>(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">ArchGraph::sRef</a> ag) : <a class="code" href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml">StdSolutionQAllocator</a>(ag) {}</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a6ebbecc168db815f46ddfb5df9f8de76">   34</a></span>&#160;<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml">StdSolution</a> <a class="code" href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a6ebbecc168db815f46ddfb5df9f8de76">GreedyCktQAllocator::buildStdSolution</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod) {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keyword">auto</span> depPass = PassCache::Get&lt;DependencyBuilderWrapperPass&gt;(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a85958f7018c9dc1b6710420712399065">mMod</a>);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">auto</span> depBuilder = depPass-&gt;getData();</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">auto</span>&amp; depsVector = depBuilder.getDependencies();</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">auto</span> cgbpass = PassCache::Get&lt;CircuitGraphBuilderPass&gt;(qmod);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">auto</span> cgraph = cgbpass-&gt;getData();</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">auto</span> it = cgraph.build_iterator();</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">auto</span> xbitNumber = cgraph.size();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">auto</span> qubitNumber = cgraph.getQSize();</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="../../d8/d45/classefd_1_1BFSPathFinder.xhtml">BFSPathFinder</a> bfs;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">auto</span> mapfinder = <a class="code" href="../../d3/d4f/classefd_1_1WeightedSIMappingFinder.xhtml#a75ebcbce80487bf331c26b2c2cfa9689">WeightedSIMappingFinder::Create</a>();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">auto</span> mapping = mapfinder-&gt;find(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>.get(), depsVector);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">auto</span> inv = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;size(), mapping);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml">StdSolution</a> sol { mapping, <a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a93e644d8ca0ea8e13989dd0e8dae5e57">StdSolution::OpSequences</a>(depsVector.size()), 0 };</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    std::vector&lt;Node::uRef&gt; allocatedStatements;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    std::map&lt;Node::Ref, uint32_t&gt; reached;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::vector&lt;bool&gt; marked(xbitNumber, <span class="keyword">false</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    std::vector&lt;bool&gt; frozen(qubitNumber, <span class="keyword">false</span>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    uint32_t t = 0;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; xbitNumber; ++i) {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        it.next(i);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">while</span> (allocatedStatements.size() &lt; qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a13a07a303d5913d73fecc7babaeba7ac">getNumberOfStmts</a>()) {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordtype">bool</span> changed, redo = <span class="keyword">false</span>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            changed = <span class="keyword">false</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; xbitNumber; ++i) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keyword">auto</span> cnode = it[i];</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keywordflow">if</span> (cnode-&gt;isGateNode() &amp;&amp; cnode-&gt;numberOfXbits() &lt;= 1) {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                    allocatedStatements.push_back(cnode-&gt;node()-&gt;clone());</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    it.next(i);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    changed = <span class="keyword">true</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            redo = redo || changed;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        } <span class="keywordflow">while</span> (changed);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">if</span> (redo) <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        redo = <span class="keyword">false</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="comment">// Reach gates with non-marked xbitNumber and mark them.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; xbitNumber; ++i) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keyword">auto</span> cnode = it[i];</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keyword">auto</span> node = cnode-&gt;node();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">if</span> (cnode-&gt;isGateNode() &amp;&amp; !marked[i]) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                marked[i] = <span class="keyword">true</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keywordflow">if</span> (reached.find(node) == reached.end())</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    reached[node] = cnode-&gt;numberOfXbits();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                --reached[node];</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        std::set&lt;CircuitGraph::CircuitNode::sRef&gt; allocatable;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="comment">// Advance the xbitNumber&#39; cgraph and unmark them.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; xbitNumber; ++i) {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keyword">auto</span> cnode = it[i];</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keyword">auto</span> node = cnode-&gt;node();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">if</span> (cnode-&gt;isGateNode() &amp;&amp; !reached[node]) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                allocatable.insert(cnode);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">if</span> (allocatable.empty()) {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Every step has to process at least one gate.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="comment">// Removing instructions that don&#39;t use only one qubit, but do not have any dependencies</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> cnode : allocatable) {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keyword">auto</span> node = cnode-&gt;node();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keyword">auto</span> dep = depBuilder.getDeps(node);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordflow">if</span> (dep.size() == 0) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                redo = <span class="keyword">true</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                allocatedStatements.push_back(node-&gt;clone());</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="keywordflow">for</span> (uint32_t i : cnode-&gt;getXbitsId()) {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="keywordflow">if</span> (i &lt; qubitNumber) frozen[i] = <span class="keyword">true</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    marked[i] = <span class="keyword">false</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    it.next(i);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">if</span> (redo) <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <a class="code" href="../../d5/d5b/structAllocProps.xhtml">AllocProps</a> best;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#af241694c0924ed211112c664d3e79744">cnode</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">cost</a> = _undef;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> cnode : allocatable) {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="comment">// Calculate cost for allocating cnode-&gt;node;</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keyword">auto</span> node = cnode-&gt;node();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keyword">auto</span> dep = depBuilder.getDeps(node);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">if</span> (dep.size() &gt; 1) {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Can only allocate gates with at most one depenency.&quot;</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    &lt;&lt; <span class="stringliteral">&quot; Gate: `&quot;</span> &lt;&lt; dep.mCallPoint-&gt;toString(<span class="keyword">false</span>) &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            uint32_t a = dep[0].mFrom, b = dep[0].mTo;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            uint32_t u = mapping[a], v = mapping[b];</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <a class="code" href="../../d5/d5b/structAllocProps.xhtml">AllocProps</a> props;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#af241694c0924ed211112c664d3e79744">cnode</a> = cnode;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">cost</a> = 0;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5c846c2bbdc24aff26ada7549231496e">path</a> = {};</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="comment">// If either &#39;a&#39; or &#39;b&#39; is not frozen, we can search for a vertice nearby (each of them)</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="comment">// in order not to o any swaps.</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordtype">bool</span> hasEdge = <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(u, v);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordtype">bool</span> hasReverseEdge = <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(v, u);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">if</span> (hasEdge) {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a404edad7a7ce38f9df7b53019ae2162d">type</a> = <a class="code" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0acac7222d09b600e052fdda2132a1a58f">K_SWP</a>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!hasEdge &amp;&amp; hasReverseEdge) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a404edad7a7ce38f9df7b53019ae2162d">type</a> = <a class="code" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0acac7222d09b600e052fdda2132a1a58f">K_SWP</a>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">cost</a> = <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a>.getVal();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keywordtype">bool</span> foundFrozen = <span class="keyword">false</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keywordflow">if</span> (!frozen[a]) {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    uint32_t v = mapping[b];</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    <span class="keywordflow">for</span> (uint32_t u : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;adj(v)) {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        uint32_t newA = inv[u];</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        <span class="keywordflow">if</span> (!frozen[newA]) {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                            props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a404edad7a7ce38f9df7b53019ae2162d">type</a> = <a class="code" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0afce681a1f146b06d22468a204574ec66">K_FRZ</a>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                            props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ad2999f9dd3f34d74d2906ba9a06a56e0">u</a>.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5f313ffd1976ef56d04b1992424aef96">frz</a>.from = a;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                            props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ad2999f9dd3f34d74d2906ba9a06a56e0">u</a>.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5f313ffd1976ef56d04b1992424aef96">frz</a>.to = newA;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                            <span class="keywordflow">if</span> (!<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(u, v))</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">cost</a> = <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a>.getVal();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                            foundFrozen = <span class="keyword">true</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keywordflow">if</span> (!foundFrozen &amp;&amp; !frozen[b]) {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    uint32_t u = mapping[a];</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="keywordflow">for</span> (uint32_t v : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;adj(u)) {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        uint32_t newB = inv[v];</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        <span class="keywordflow">if</span> (!frozen[newB]) {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                            props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a404edad7a7ce38f9df7b53019ae2162d">type</a> = <a class="code" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0afce681a1f146b06d22468a204574ec66">K_FRZ</a>;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                            props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ad2999f9dd3f34d74d2906ba9a06a56e0">u</a>.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5f313ffd1976ef56d04b1992424aef96">frz</a>.from = b;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                            props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ad2999f9dd3f34d74d2906ba9a06a56e0">u</a>.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5f313ffd1976ef56d04b1992424aef96">frz</a>.to = newB;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                            <span class="keywordflow">if</span> (!<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(u, v))</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">cost</a> = <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a>.getVal();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                            foundFrozen = <span class="keyword">true</span>;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                        }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="keywordflow">if</span> (!foundFrozen) {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a404edad7a7ce38f9df7b53019ae2162d">type</a> = <a class="code" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0acac7222d09b600e052fdda2132a1a58f">K_SWP</a>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    <span class="keyword">auto</span> bfspath = bfs.<a class="code" href="../../d8/d45/classefd_1_1BFSPathFinder.xhtml#a4a91e28940313cb585654f5214187cac">find</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>.get(), u, v);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    uint32_t pathsize = bfspath.size();</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5c846c2bbdc24aff26ada7549231496e">path</a> = bfspath;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">cost</a> = (bfspath.size() - 2) * <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a>.getVal();</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <span class="keywordtype">bool</span> hasEdgeFromU = <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(bfspath[0], bfspath[1]);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    <span class="keywordtype">bool</span> hasEdgeToV = <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(bfspath[pathsize - 2], bfspath[pathsize - 1]);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    <span class="keywordflow">if</span> (hasEdgeFromU)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ad2999f9dd3f34d74d2906ba9a06a56e0">u</a>.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ab177e7b316436244163889048cc7fe2d">swp</a>.mvTgtSrc = <span class="keyword">true</span>;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!hasEdgeFromU &amp;&amp; hasEdgeToV)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                        props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ad2999f9dd3f34d74d2906ba9a06a56e0">u</a>.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ab177e7b316436244163889048cc7fe2d">swp</a>.mvTgtSrc = <span class="keyword">false</span>;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!hasEdgeFromU &amp;&amp; !hasEdgeToV)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">cost</a> += <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a>.getVal();</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                }</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">if</span> (best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">cost</a> &gt; props.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">cost</a>)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                best = props;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">if</span> (best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#af241694c0924ed211112c664d3e79744">cnode</a>.get() == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;There must be a &#39;best&#39; node.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="comment">// Allocate best node;</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="comment">// Setting the &#39;stop&#39; flag;</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keyword">auto</span>&amp; ops = sol.mOpSeqs[t++];</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keyword">auto</span> node = best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#af241694c0924ed211112c664d3e79744">cnode</a>-&gt;node();</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keyword">auto</span> newNode = node-&gt;clone();</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        ops.first = newNode.get();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        allocatedStatements.push_back(std::move(newNode));</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">if</span> (best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a404edad7a7ce38f9df7b53019ae2162d">type</a> == <a class="code" href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0acac7222d09b600e052fdda2132a1a58f">K_SWP</a>) {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keywordflow">if</span> (best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ad2999f9dd3f34d74d2906ba9a06a56e0">u</a>.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ab177e7b316436244163889048cc7fe2d">swp</a>.mvTgtSrc)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                std::reverse(best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5c846c2bbdc24aff26ada7549231496e">path</a>.begin(), best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5c846c2bbdc24aff26ada7549231496e">path</a>.end());</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordflow">if</span> (best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5c846c2bbdc24aff26ada7549231496e">path</a>.size() &gt; 2) {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5c846c2bbdc24aff26ada7549231496e">path</a>.begin() + 2, end = best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5c846c2bbdc24aff26ada7549231496e">path</a>.end();</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                        it != end; ++it) {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                    uint32_t u = *(it - 2), v = *(it - 1);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    uint32_t a = inv[u], b = inv[v];</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                    frozen[a] = <span class="keyword">true</span>;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    frozen[b] = <span class="keyword">true</span>;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    ops.second.push_back({ <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">Operation::K_OP_SWAP</a>, a, b });</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    std::swap(mapping[a], mapping[b]);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                    std::swap(inv[u], inv[v]);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            uint32_t a = best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ad2999f9dd3f34d74d2906ba9a06a56e0">u</a>.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5f313ffd1976ef56d04b1992424aef96">frz</a>.from, newA = best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#ad2999f9dd3f34d74d2906ba9a06a56e0">u</a>.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a5f313ffd1976ef56d04b1992424aef96">frz</a>.to;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            uint32_t u = mapping[a], v = mapping[newA];</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            std::swap(sol.mInitial[a], sol.mInitial[newA]);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            std::swap(mapping[a], mapping[newA]);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            std::swap(inv[u], inv[v]);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keyword">auto</span> dep = depBuilder.getDeps(node)[0];</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        uint32_t a = dep.mFrom, b = dep.mTo;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        frozen[a] = <span class="keyword">true</span>;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        frozen[b] = <span class="keyword">true</span>;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(mapping[a], mapping[b])) {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            ops.second.push_back({ <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">Operation::K_OP_CNOT</a>, a, b });</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            ops.second.push_back({ <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">Operation::K_OP_REV</a>, a, b });</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        }</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">for</span> (uint32_t i : best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#af241694c0924ed211112c664d3e79744">cnode</a>-&gt;getXbitsId()) {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            marked[i] = <span class="keyword">false</span>;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            it.next(i);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        }</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        sol.mCost += best.<a class="code" href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">cost</a>;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    }</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a0d1ee13f9fdf977893067cb4d0688e3f">clearStatements</a>();</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; node : allocatedStatements) {</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#ae5c8859117a0d6ea5aeddd1a3fb060ec">insertStatementLast</a>(std::move(node));</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">return</span> sol;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;}</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno"><a class="line" href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a5b9a882ff8dcb862fa06d656f04b0b0b">  307</a></span>&#160;<a class="code" href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a882da38eb4d5f9838ba3487642fbd8c0">GreedyCktQAllocator::uRef</a> <a class="code" href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a5b9a882ff8dcb862fa06d656f04b0b0b">GreedyCktQAllocator::Create</a>(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">ArchGraph::sRef</a> ag) {</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a882da38eb4d5f9838ba3487642fbd8c0">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a43d04eb453f7a7f2787697278c282922">GreedyCktQAllocator</a>(ag));</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div><div class="ttc" id="IntrinsicGateCostPass_8cpp_xhtml_a99fd7c5ea250372d9b17e42df7764318"><div class="ttname"><a href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; SwapCost(&quot;-swap-cost&quot;, &quot;Cost of using a swap function.&quot;, 7, false)</div></div>
<div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="structefd_1_1StdSolution_xhtml_a93e644d8ca0ea8e13989dd0e8dae5e57"><div class="ttname"><a href="../../db/d36/structefd_1_1StdSolution.xhtml#a93e644d8ca0ea8e13989dd0e8dae5e57">efd::StdSolution::OpSequences</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; Node::Ref, OpVector &gt; &gt; OpSequences</div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00033">StdSolutionQAllocator.h:33</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">efd::Operation::K_OP_REV</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00016">StdSolutionQAllocator.h:16</a></div></div>
<div class="ttc" id="classefd_1_1GreedyCktQAllocator_xhtml_a882da38eb4d5f9838ba3487642fbd8c0"><div class="ttname"><a href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a882da38eb4d5f9838ba3487642fbd8c0">efd::GreedyCktQAllocator::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; GreedyCktQAllocator &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d2e/GreedyCktQAllocator_8h_source.xhtml#l00010">GreedyCktQAllocator.h:10</a></div></div>
<div class="ttc" id="GreedyCktQAllocator_8cpp_xhtml_ae3a7c6bf09f773fbd5752ca2541e9bf0"><div class="ttname"><a href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0">PropKind</a></div><div class="ttdeci">PropKind</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00012">GreedyCktQAllocator.cpp:12</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="structAllocProps_xhtml_af241694c0924ed211112c664d3e79744"><div class="ttname"><a href="../../d5/d5b/structAllocProps.xhtml#af241694c0924ed211112c664d3e79744">AllocProps::cnode</a></div><div class="ttdeci">CircuitGraph::CircuitNode::sRef cnode</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00015">GreedyCktQAllocator.cpp:15</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a13a07a303d5913d73fecc7babaeba7ac"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a13a07a303d5913d73fecc7babaeba7ac">efd::QModule::getNumberOfStmts</a></div><div class="ttdeci">uint32_t getNumberOfStmts() const</div><div class="ttdoc">Return the number of statements. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00182">QModule.cpp:182</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a4d7d13dd12213a9f247d1304472badbd"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">efd::QbitAllocator::mArchGraph</a></div><div class="ttdeci">ArchGraph::sRef mArchGraph</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00034">QbitAllocator.h:34</a></div></div>
<div class="ttc" id="GreedyCktQAllocator_8cpp_xhtml_ae3a7c6bf09f773fbd5752ca2541e9bf0afce681a1f146b06d22468a204574ec66"><div class="ttname"><a href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0afce681a1f146b06d22468a204574ec66">K_FRZ</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00012">GreedyCktQAllocator.cpp:12</a></div></div>
<div class="ttc" id="structAllocProps_xhtml_a404edad7a7ce38f9df7b53019ae2162d"><div class="ttname"><a href="../../d5/d5b/structAllocProps.xhtml#a404edad7a7ce38f9df7b53019ae2162d">AllocProps::type</a></div><div class="ttdeci">PropKind type</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00019">GreedyCktQAllocator.cpp:19</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml">efd::QModule</a></div><div class="ttdoc">Qasm module representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00013">QModule.h:13</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="structefd_1_1StdSolution_xhtml"><div class="ttname"><a href="../../db/d36/structefd_1_1StdSolution.xhtml">efd::StdSolution</a></div><div class="ttdoc">The solution for the allocation problem. </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00031">StdSolutionQAllocator.h:31</a></div></div>
<div class="ttc" id="structAllocProps_xhtml_ab177e7b316436244163889048cc7fe2d"><div class="ttname"><a href="../../d5/d5b/structAllocProps.xhtml#ab177e7b316436244163889048cc7fe2d">AllocProps::swp</a></div><div class="ttdeci">struct AllocProps::@0::@1 swp</div></div>
<div class="ttc" id="structAllocProps_xhtml_a5c846c2bbdc24aff26ada7549231496e"><div class="ttname"><a href="../../d5/d5b/structAllocProps.xhtml#a5c846c2bbdc24aff26ada7549231496e">AllocProps::path</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; path</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00017">GreedyCktQAllocator.cpp:17</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a85958f7018c9dc1b6710420712399065"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a85958f7018c9dc1b6710420712399065">efd::QbitAllocator::mMod</a></div><div class="ttdeci">QModule::Ref mMod</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00036">QbitAllocator.h:36</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml_a8c9131ca43a772179c24fa4dc9701bb2"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">efd::ArchGraph::sRef</a></div><div class="ttdeci">std::shared_ptr&lt; ArchGraph &gt; sRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00014">ArchGraph.h:14</a></div></div>
<div class="ttc" id="structAllocProps_xhtml_afaf27463cbfa80fe2688c7178654fe8b"><div class="ttname"><a href="../../d5/d5b/structAllocProps.xhtml#afaf27463cbfa80fe2688c7178654fe8b">AllocProps::mvTgtSrc</a></div><div class="ttdeci">bool mvTgtSrc</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00023">GreedyCktQAllocator.cpp:23</a></div></div>
<div class="ttc" id="classefd_1_1StdSolutionQAllocator_xhtml"><div class="ttname"><a href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml">efd::StdSolutionQAllocator</a></div><div class="ttdoc">An abstract allocator that builds the solution based on a StdSolution. </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00045">StdSolutionQAllocator.h:45</a></div></div>
<div class="ttc" id="WeightedSIMappingFinder_8h_xhtml"><div class="ttname"><a href="../../d3/d1b/WeightedSIMappingFinder_8h.xhtml">WeightedSIMappingFinder.h</a></div></div>
<div class="ttc" id="structefd_1_1CircuitGraph_1_1CircuitNode_xhtml_a83679503f90a0bda804bc7d462ce44b9"><div class="ttname"><a href="../../d9/dbc/structefd_1_1CircuitGraph_1_1CircuitNode.xhtml#a83679503f90a0bda804bc7d462ce44b9">efd::CircuitGraph::CircuitNode::sRef</a></div><div class="ttdeci">std::shared_ptr&lt; CircuitNode &gt; sRef</div><div class="ttdef"><b>Definition:</b> <a href="../../df/da6/CircuitGraph_8h_source.xhtml#l00045">CircuitGraph.h:45</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">efd::Operation::K_OP_SWAP</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00018">StdSolutionQAllocator.h:18</a></div></div>
<div class="ttc" id="classefd_1_1GreedyCktQAllocator_xhtml_a5b9a882ff8dcb862fa06d656f04b0b0b"><div class="ttname"><a href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a5b9a882ff8dcb862fa06d656f04b0b0b">efd::GreedyCktQAllocator::Create</a></div><div class="ttdeci">static uRef Create(ArchGraph::sRef ag)</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00307">GreedyCktQAllocator.cpp:307</a></div></div>
<div class="ttc" id="BFSPathFinder_8h_xhtml"><div class="ttname"><a href="../../d7/d2d/BFSPathFinder_8h.xhtml">BFSPathFinder.h</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">efd::Operation::K_OP_CNOT</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00015">StdSolutionQAllocator.h:15</a></div></div>
<div class="ttc" id="classefd_1_1WeightedSIMappingFinder_xhtml_a75ebcbce80487bf331c26b2c2cfa9689"><div class="ttname"><a href="../../d3/d4f/classefd_1_1WeightedSIMappingFinder.xhtml#a75ebcbce80487bf331c26b2c2cfa9689">efd::WeightedSIMappingFinder::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdoc">Creates an instance of this class. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/ddd/WeightedSIMappingFinder_8cpp_source.xhtml#l00030">WeightedSIMappingFinder.cpp:30</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_ae5c8859117a0d6ea5aeddd1a3fb060ec"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#ae5c8859117a0d6ea5aeddd1a3fb060ec">efd::QModule::insertStatementLast</a></div><div class="ttdeci">Iterator insertStatementLast(Node::uRef ref)</div><div class="ttdoc">Inserts ref at the back, and returns a iterator to this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00107">QModule.cpp:107</a></div></div>
<div class="ttc" id="GreedyCktQAllocator_8cpp_xhtml_ae3a7c6bf09f773fbd5752ca2541e9bf0acac7222d09b600e052fdda2132a1a58f"><div class="ttname"><a href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#ae3a7c6bf09f773fbd5752ca2541e9bf0acac7222d09b600e052fdda2132a1a58f">K_SWP</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00012">GreedyCktQAllocator.cpp:12</a></div></div>
<div class="ttc" id="PassCache_8h_xhtml"><div class="ttname"><a href="../../db/d82/PassCache_8h.xhtml">PassCache.h</a></div></div>
<div class="ttc" id="CircuitGraphBuilderPass_8h_xhtml"><div class="ttname"><a href="../../d8/d9b/CircuitGraphBuilderPass_8h.xhtml">CircuitGraphBuilderPass.h</a></div></div>
<div class="ttc" id="classefd_1_1GreedyCktQAllocator_xhtml_a43d04eb453f7a7f2787697278c282922"><div class="ttname"><a href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a43d04eb453f7a7f2787697278c282922">efd::GreedyCktQAllocator::GreedyCktQAllocator</a></div><div class="ttdeci">GreedyCktQAllocator(ArchGraph::sRef ag)</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00032">GreedyCktQAllocator.cpp:32</a></div></div>
<div class="ttc" id="IntrinsicGateCostPass_8cpp_xhtml_a36846d9fb7f5b314db3aa16d72efe81f"><div class="ttname"><a href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; RevCost(&quot;-rev-cost&quot;, &quot;Cost of using a reverse edge.&quot;, 4, false)</div></div>
<div class="ttc" id="structAllocProps_xhtml"><div class="ttname"><a href="../../d5/d5b/structAllocProps.xhtml">AllocProps</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00014">GreedyCktQAllocator.cpp:14</a></div></div>
<div class="ttc" id="classefd_1_1GreedyCktQAllocator_xhtml_a6ebbecc168db815f46ddfb5df9f8de76"><div class="ttname"><a href="../../d4/d23/classefd_1_1GreedyCktQAllocator.xhtml#a6ebbecc168db815f46ddfb5df9f8de76">efd::GreedyCktQAllocator::buildStdSolution</a></div><div class="ttdeci">StdSolution buildStdSolution(QModule::Ref qmod) override</div><div class="ttdoc">Executes the allocation algorithm after the preprocessing. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00034">GreedyCktQAllocator.cpp:34</a></div></div>
<div class="ttc" id="structAllocProps_xhtml_a945b5963e13fc1d0d5f716793ded0f2a"><div class="ttname"><a href="../../d5/d5b/structAllocProps.xhtml#a945b5963e13fc1d0d5f716793ded0f2a">AllocProps::cost</a></div><div class="ttdeci">uint32_t cost</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00016">GreedyCktQAllocator.cpp:16</a></div></div>
<div class="ttc" id="structAllocProps_xhtml_a5f313ffd1976ef56d04b1992424aef96"><div class="ttname"><a href="../../d5/d5b/structAllocProps.xhtml#a5f313ffd1976ef56d04b1992424aef96">AllocProps::frz</a></div><div class="ttdeci">struct AllocProps::@0::@2 frz</div></div>
<div class="ttc" id="GreedyCktQAllocator_8cpp_xhtml_a42598fa8630db250f981a396b4a0f231"><div class="ttname"><a href="../../d4/dd0/GreedyCktQAllocator_8cpp.xhtml#a42598fa8630db250f981a396b4a0f231">type</a></div><div class="ttdeci">enum PropKind type</div></div>
<div class="ttc" id="classefd_1_1BFSPathFinder_xhtml_a4a91e28940313cb585654f5214187cac"><div class="ttname"><a href="../../d8/d45/classefd_1_1BFSPathFinder.xhtml#a4a91e28940313cb585654f5214187cac">efd::BFSPathFinder::find</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; find(Graph::Ref g, uint32_t u, uint32_t v) override</div><div class="ttdoc">Searches for a path from u to v in the graph g. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d3a/BFSPathFinder_8cpp_source.xhtml#l00011">BFSPathFinder.cpp:11</a></div></div>
<div class="ttc" id="GreedyCktQAllocator_8h_xhtml"><div class="ttname"><a href="../../d0/d2e/GreedyCktQAllocator_8h.xhtml">GreedyCktQAllocator.h</a></div></div>
<div class="ttc" id="structAllocProps_xhtml_ad2999f9dd3f34d74d2906ba9a06a56e0"><div class="ttname"><a href="../../d5/d5b/structAllocProps.xhtml#ad2999f9dd3f34d74d2906ba9a06a56e0">AllocProps::u</a></div><div class="ttdeci">union AllocProps::@0 u</div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a0d1ee13f9fdf977893067cb4d0688e3f"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a0d1ee13f9fdf977893067cb4d0688e3f">efd::QModule::clearStatements</a></div><div class="ttdeci">void clearStatements()</div><div class="ttdoc">Removes all statements present int this module. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00131">QModule.cpp:131</a></div></div>
<div class="ttc" id="structAllocProps_xhtml_aee612f4f21264416222c245a9b9c34b5"><div class="ttname"><a href="../../d5/d5b/structAllocProps.xhtml#aee612f4f21264416222c245a9b9c34b5">AllocProps::to</a></div><div class="ttdeci">uint32_t to</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dd0/GreedyCktQAllocator_8cpp_source.xhtml#l00027">GreedyCktQAllocator.cpp:27</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">efd::ExitCode::EXIT_unreachable</a></div></div>
<div class="ttc" id="classefd_1_1BFSPathFinder_xhtml"><div class="ttname"><a href="../../d8/d45/classefd_1_1BFSPathFinder.xhtml">efd::BFSPathFinder</a></div><div class="ttdoc">Finds swaps for one restriction only. </div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d2d/BFSPathFinder_8h_source.xhtml#l00008">BFSPathFinder.h:8</a></div></div>
<div class="ttc" id="Defs_8h_xhtml"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml">Defs.h</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_adb4ffc373d7273aefb15d2f9dcd4aeb4"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">efd::InvertMapping</a></div><div class="ttdeci">InverseMap InvertMapping(uint32_t archQ, Mapping mapping, bool fill=true)</div><div class="ttdoc">Generates an assignment mapping (maps the architecture&amp;#39;s qubits to the logical ones) of size archQ...</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00025">QbitAllocator.cpp:25</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
