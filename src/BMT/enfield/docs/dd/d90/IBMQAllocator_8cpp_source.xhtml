<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/Allocators/IBMQAllocator.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li><li class="navelem"><a class="el" href="../../dir_06974191db7fbe66527a95ceac77ccfb.xhtml">Allocators</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">IBMQAllocator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../dd/d90/IBMQAllocator_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d3/d48/IBMQAllocator_8h.xhtml">enfield/Transform/Allocators/IBMQAllocator.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/d82/PassCache_8h.xhtml">enfield/Transform/PassCache.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/d2d/BFSPathFinder_8h.xhtml">enfield/Support/BFSPathFinder.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;chrono&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">using namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">static</span> <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;uint32_t&gt;</a> <a class="code" href="../../d2/dd0/RandomMappingFinder_8cpp.xhtml#ab50b9b5b3a7f5889217bc562d1f78f76">Seed</a></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;(<span class="stringliteral">&quot;seed&quot;</span>, <span class="stringliteral">&quot;Seed to be used in random algorithms.&quot;</span>,</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;std::chrono::system_clock::now().time_since_epoch().count(), <span class="keyword">false</span>);</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">static</span> <a class="code" href="../../de/d50/classefd_1_1Opt.xhtml">Opt&lt;uint32_t&gt;</a> Trials</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;(<span class="stringliteral">&quot;trials&quot;</span>, <span class="stringliteral">&quot;Number of times that IBMQAllocator should try.&quot;</span>, 20, <span class="keyword">false</span>);</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#a8009f7b0d940b68fb44cffa677d93031">   16</a></span>&#160;<a class="code" href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#a8009f7b0d940b68fb44cffa677d93031">IBMQAllocator::IBMQAllocator</a>(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">ArchGraph::sRef</a> archGraph) : <a class="code" href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml">StdSolutionQAllocator</a>(archGraph) {}</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#a29fe580f25181032f04112dd8ac96d7c">   18</a></span>&#160;<a class="code" href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#adb5c5d952160981d92c8828c5564d8ca">IBMQAllocator::uRef</a> <a class="code" href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#a29fe580f25181032f04112dd8ac96d7c">IBMQAllocator::Create</a>(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">ArchGraph::sRef</a> archGraph) {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#adb5c5d952160981d92c8828c5564d8ca">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#a8009f7b0d940b68fb44cffa677d93031">IBMQAllocator</a>(archGraph));</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;IBMQAllocator::AllocationResult IBMQAllocator::tryAllocateLayer</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a0275945f2cb203058ead872f748857e9">Layer</a>&amp; layer, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> current, std::set&lt;uint32_t&gt; qubitsSet, <a class="code" href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml">DependencyBuilder</a>&amp; depData) {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    AllocationResult result { current, <span class="keyword">true</span>, {}, <span class="keyword">false</span> };</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a> inv = <a class="code" href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">InvertMapping</a>(mPQubits, current);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    std::default_random_engine generator(<a class="code" href="../../d2/dd0/RandomMappingFinder_8cpp.xhtml#ab50b9b5b3a7f5889217bc562d1f78f76">Seed</a>.getVal());</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    std::normal_distribution&lt;double&gt; distribution(0.0, (<span class="keywordtype">double</span>) (1 / (<span class="keywordtype">double</span>) mPQubits));</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    std::vector&lt;Dep&gt; deps;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> node : layer) {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keyword">auto</span> _deps = depData.<a class="code" href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml#a1dd2f459d6b2107cc199d697e9ecffdb">getDeps</a>(node);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">if</span> (_deps.size() &gt; 1) {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Not suporting gates with more than 1 dependency (&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                &lt;&lt; node-&gt;toString(<span class="keyword">false</span>) &lt;&lt; <span class="stringliteral">&quot;).&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (_deps.size() == 1) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            deps.push_back(_deps[0]);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    uint32_t dist = 0;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> dep : deps) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        uint32_t u = current[dep.mFrom], v = current[dep.mTo];</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        dist += mDist[u][v];</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span> (dist == deps.size()) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        result.isTrivialLayer = deps.empty();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        result.success = <span class="keyword">true</span>; </div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    uint32_t bestD = _undef;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> bestMap;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a34cc9c5a785980981ec56b06c3105b31">StdSolution::OpVector</a> bestOpv;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordtype">bool</span> found = <span class="keyword">false</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    uint32_t trials = Trials.getVal();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; trials; ++i) {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">auto</span> trialMap = current;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">auto</span> trialAssign = inv;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a34cc9c5a785980981ec56b06c3105b31">StdSolution::OpVector</a> trialOpv;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        std::vector&lt;std::vector&lt;double&gt;&gt; rDist(mPQubits, std::vector&lt;double&gt;(mPQubits, _undef));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; mPQubits; ++i)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">for</span> (uint32_t j = 0; j &lt; mPQubits; ++j) {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="keywordtype">double</span> scale = 1 + distribution(generator);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                rDist[i][j] = scale * mDist[i][j] * mDist[i][j];</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                rDist[j][i] = rDist[i][j];</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        uint32_t d = 1;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        uint32_t maxD = (2 * mPQubits) + 1;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">while</span> (d &lt; maxD) {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            std::set&lt;uint32_t&gt; qubitSet = qubitsSet;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keyword">auto</span> optMap = trialMap;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keyword">auto</span> optInverseMap = trialAssign;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml">Operation</a> optOp;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            std::pair&lt;uint32_t, uint32_t&gt; optEdge;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keywordflow">while</span> (!qubitSet.empty()) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keywordtype">double</span> minCost = 0;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span> dep : deps) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    minCost += rDist[trialMap[dep.mFrom]][trialMap[dep.mTo]];</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keywordtype">bool</span> progress = <span class="keyword">false</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">for</span> (uint32_t u = 0, endU = <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;size(); u &lt; endU; ++u) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    <span class="keywordflow">for</span> (uint32_t v : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;adj(u)) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                        <span class="keywordtype">bool</span> hasU = qubitSet.find(u) != qubitSet.end();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                        <span class="keywordtype">bool</span> hasV = qubitSet.find(v) != qubitSet.end();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        <span class="keywordflow">if</span> (hasU &amp;&amp; hasV) {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                            <span class="comment">// 1. Try a swap on (u, v)</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                            <span class="keyword">auto</span> _map = trialMap;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                            <span class="keyword">auto</span> _inv = trialAssign;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                            std::swap(_map[_inv[u]], _map[_inv[v]]);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                            std::swap(_inv[u], _inv[v]);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                            <span class="comment">// 2. Compute cost again</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                            <span class="keywordtype">double</span> _cost = 0;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                            <span class="keywordflow">for</span> (<span class="keyword">auto</span> dep : deps) {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                _cost += rDist[_map[dep.mFrom]][_map[dep.mTo]];</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                            }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                            <span class="comment">// 3. Check if it is better than what we had.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                            <span class="comment">//     3.1 If it is, update the minCost and other values.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                            <span class="keywordflow">if</span> (minCost &gt; _cost) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                progress = <span class="keyword">true</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                minCost = _cost;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                optMap = _map;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                optInverseMap = _inv;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                optEdge = std::make_pair(u, v);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                optOp = { <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">Operation::K_OP_SWAP</a>, _inv[u], _inv[v] };</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                            }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">if</span> (progress) {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    qubitSet.erase(optEdge.first);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    qubitSet.erase(optEdge.second);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    trialMap = optMap;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    trialAssign = optInverseMap;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    trialOpv.push_back(optOp);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            uint32_t dist = 0;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> dep : deps) {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                uint32_t u = trialMap[dep.mFrom], v = trialMap[dep.mTo];</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                dist += mDist[u][v];</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">if</span> (dist == deps.size()) {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            ++d;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        uint32_t dist = 0;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> dep : deps) {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            uint32_t u = trialMap[dep.mFrom], v = trialMap[dep.mTo];</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            dist += mDist[u][v];</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">if</span> (dist == deps.size() &amp;&amp; d &lt; bestD) {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            found = <span class="keyword">true</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            bestMap = trialMap;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            bestOpv = trialOpv;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            bestD = d;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">if</span> (found) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        result.success = <span class="keyword">true</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        result.opv = bestOpv;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        result.map = bestMap;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        result.success = <span class="keyword">false</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#a0608e1348e994a8c793f4326f157d266">  171</a></span>&#160;<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml">StdSolution</a> <a class="code" href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#a0608e1348e994a8c793f4326f157d266">IBMQAllocator::buildStdSolution</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod) {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    std::srand(<a class="code" href="../../d2/dd0/RandomMappingFinder_8cpp.xhtml#ab50b9b5b3a7f5889217bc562d1f78f76">Seed</a>.getVal());</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml">StdSolution</a> sol;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    sol.<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a7b03dbe2bf5d8e702502d090171291fa">mCost</a> = 0;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">auto</span> dbwPass = PassCache::Get&lt;DependencyBuilderWrapperPass&gt;(qmod);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">auto</span> depData = dbwPass-&gt;getData();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">auto</span> lbPass = PassCache::Get&lt;LayersBuilderPass&gt;(qmod);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">auto</span> layers = lbPass-&gt;getData();</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="../../d8/d45/classefd_1_1BFSPathFinder.xhtml">BFSPathFinder</a> bfs;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    mPQubits = <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;size();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    mLQubits = depData.mXbitToNumber.getQSize();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    mDist.assign(mPQubits, std::vector&lt;uint32_t&gt;(mPQubits, _undef));</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; mPQubits; ++i) {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">for</span> (uint32_t j = 0; j &lt; mPQubits; ++j) {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            mDist[i][j] = bfs.<a class="code" href="../../d8/d45/classefd_1_1BFSPathFinder.xhtml#a4a91e28940313cb585654f5214187cac">find</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>.get(), i, j).size() - 1;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> current(mPQubits, 0);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::vector&lt;bool&gt; allocated(mPQubits, <span class="keyword">false</span>);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, u = 0, endU = <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;size(); u &lt; endU &amp;&amp; i &lt; mPQubits; ++u) {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">if</span> (!allocated[u]) { current[i++] = u; allocated[u] = <span class="keyword">true</span>; }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">for</span> (uint32_t v : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;succ(u)) {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">if</span> (!allocated[v]) { current[i++] = v; allocated[v] = <span class="keyword">true</span>; }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">if</span> (i &gt;= mPQubits) <span class="keywordflow">break</span>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    std::set&lt;uint32_t&gt; qubitsSet;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; mLQubits; ++i)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        qubitsSet.insert(i);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    std::vector&lt;Node::uRef&gt; newStatements;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordtype">bool</span> firstLayer = <span class="keyword">true</span>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = layers.size(); i &lt; e; ++i) {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keyword">auto</span>&amp; layer = layers[i];</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keyword">auto</span> result = tryAllocateLayer(layer, current, qubitsSet, depData);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">if</span> (result.success) {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            current = result.map;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keywordflow">if</span> (firstLayer) {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                sol.mInitial = current;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                result.opv.clear();</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                firstLayer = <span class="keyword">false</span>;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            uint32_t opsSeqIdx = sol.mOpSeqs.size();</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = layer.begin(), end = layer.end(); it != end; ++it) {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="keyword">auto</span> node = *it;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                <span class="keyword">auto</span> deps = depData.getDeps(node);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                <span class="keyword">auto</span> clone = node-&gt;clone();</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <span class="keywordflow">if</span> (deps.size() == 1) {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    <span class="keyword">auto</span> dep = deps[0];</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    uint32_t u = result.map[dep.mFrom], v = result.map[dep.mTo];</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml">Operation</a> op;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(u, v)) {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        op = { <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">Operation::K_OP_CNOT</a>, dep.mFrom, dep.mTo };</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(v, u)) {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                        op = { <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">Operation::K_OP_REV</a>, dep.mFrom, dep.mTo };</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        sol.mCost += <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a>.getVal();</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;If we found one configuration, it should not reach this point.&quot;</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                            &lt;&lt; std::endl;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    sol.mOpSeqs.push_back(std::make_pair(clone.get(), <a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a34cc9c5a785980981ec56b06c3105b31">StdSolution::OpVector</a>{ op }));</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                newStatements.push_back(std::move(clone));</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keywordflow">if</span> (sol.mOpSeqs.size() != opsSeqIdx) {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                sol.mCost += (<a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a>.getVal() * result.opv.size());</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                sol.mOpSeqs[opsSeqIdx].second.insert(sol.mOpSeqs[opsSeqIdx].second.begin(),</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                                     result.opv.begin(), result.opv.end());</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!result.opv.empty()) {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Swap operations but there were no dependencies to satisfy.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;Serializing this layer!&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> node : layer) {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <a class="code" href="../../d4/deb/namespaceefd.xhtml#a0275945f2cb203058ead872f748857e9">Layer</a> sublayer { node };</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                <span class="keyword">auto</span> result = tryAllocateLayer(sublayer, current, qubitsSet, depData);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                <span class="keywordflow">if</span> (!result.success) {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Could not allocate sublayer &quot;</span> &lt;&lt; node-&gt;toString(<span class="keyword">false</span>)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                        &lt;&lt; <span class="stringliteral">&quot; on mapping: &quot;</span> &lt;&lt; <a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">MappingToString</a>(current) &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                current = result.map;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                <span class="keywordflow">if</span> (firstLayer) {</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    sol.mInitial = current;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    result.opv.clear();</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    firstLayer = <span class="keyword">false</span>;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                <span class="keyword">auto</span> deps = depData.getDeps(node);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                <span class="keyword">auto</span> clone = node-&gt;clone();</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                <a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml#a34cc9c5a785980981ec56b06c3105b31">StdSolution::OpVector</a> opVector;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                <span class="keywordflow">if</span> (!result.opv.empty()) {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    opVector = result.opv;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                <span class="keywordflow">if</span> (deps.size() == 1) {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                    <span class="keyword">auto</span> dep = deps[0];</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    uint32_t u = result.map[dep.mFrom], v = result.map[dep.mTo];</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml">Operation</a> op;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(u, v)) {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                        op = { <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">Operation::K_OP_CNOT</a>, dep.mFrom, dep.mTo };</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">mArchGraph</a>-&gt;hasEdge(v, u)) {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                        op = { <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">Operation::K_OP_REV</a>, dep.mFrom, dep.mTo };</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                        sol.mCost += <a class="code" href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a>.getVal();</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;If we found one configuration, it should not reach this point.&quot;</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                            &lt;&lt; std::endl;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                    opVector.push_back(op);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                }</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                <span class="keywordflow">if</span> (!opVector.empty()) {</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                    sol.mOpSeqs.push_back(std::make_pair(clone.get(), opVector));</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                newStatements.push_back(std::move(clone));</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                <span class="keywordflow">if</span> (result.isTrivialLayer) <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            }</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        }</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">if</span> (firstLayer) {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;No first layer found.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a0d1ee13f9fdf977893067cb4d0688e3f">clearStatements</a>();</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; node : newStatements) {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#ae5c8859117a0d6ea5aeddd1a3fb060ec">insertStatementLast</a>(std::move(node));</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    }</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keywordflow">return</span> sol;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;}</div><div class="ttc" id="IntrinsicGateCostPass_8cpp_xhtml_a99fd7c5ea250372d9b17e42df7764318"><div class="ttname"><a href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a99fd7c5ea250372d9b17e42df7764318">SwapCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; SwapCost(&quot;-swap-cost&quot;, &quot;Cost of using a swap function.&quot;, 7, false)</div></div>
<div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">efd::Operation::K_OP_REV</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00016">StdSolutionQAllocator.h:16</a></div></div>
<div class="ttc" id="classefd_1_1IBMQAllocator_xhtml_adb5c5d952160981d92c8828c5564d8ca"><div class="ttname"><a href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#adb5c5d952160981d92c8828c5564d8ca">efd::IBMQAllocator::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; IBMQAllocator &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d3/d48/IBMQAllocator_8h_source.xhtml#l00013">IBMQAllocator.h:13</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_aac5a20e6db5d358cf72d4816441d0b0d"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">efd::MappingToString</a></div><div class="ttdeci">std::string MappingToString(Mapping m)</div><div class="ttdoc">Prints the mapping m to a string and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00077">QbitAllocator.cpp:77</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a4d7d13dd12213a9f247d1304472badbd"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a4d7d13dd12213a9f247d1304472badbd">efd::QbitAllocator::mArchGraph</a></div><div class="ttdeci">ArchGraph::sRef mArchGraph</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00034">QbitAllocator.h:34</a></div></div>
<div class="ttc" id="structefd_1_1DependencyBuilder_xhtml_a1dd2f459d6b2107cc199d697e9ecffdb"><div class="ttname"><a href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml#a1dd2f459d6b2107cc199d697e9ecffdb">efd::DependencyBuilder::getDeps</a></div><div class="ttdeci">const Dependencies getDeps(Node *ref) const</div><div class="ttdoc">Gets the dependencies for a specific instruction. </div><div class="ttdef"><b>Definition:</b> <a href="../../da/dcd/DependencyBuilderPass_8cpp_source.xhtml#l00093">DependencyBuilderPass.cpp:93</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml">efd::QModule</a></div><div class="ttdoc">Qasm module representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00013">QModule.h:13</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a0275945f2cb203058ead872f748857e9"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a0275945f2cb203058ead872f748857e9">efd::Layer</a></div><div class="ttdeci">std::vector&lt; Node::Ref &gt; Layer</div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d33/LayersBuilderPass_8h_source.xhtml#l00011">LayersBuilderPass.h:11</a></div></div>
<div class="ttc" id="structefd_1_1DependencyBuilder_xhtml"><div class="ttname"><a href="../../d1/d76/structefd_1_1DependencyBuilder.xhtml">efd::DependencyBuilder</a></div><div class="ttdoc">Keep track of the dependencies of each qbit for the whole program, as well as the dependencies for ev...</div><div class="ttdef"><b>Definition:</b> <a href="../../d9/dcf/DependencyBuilderPass_8h_source.xhtml#l00058">DependencyBuilderPass.h:58</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml">efd::Operation</a></div><div class="ttdoc">Struct used to describe the operation chosen for each solving each dependency. </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00012">StdSolutionQAllocator.h:12</a></div></div>
<div class="ttc" id="classefd_1_1Opt_xhtml"><div class="ttname"><a href="../../de/d50/classefd_1_1Opt.xhtml">efd::Opt</a></div><div class="ttdoc">Class used to declare the command line options available. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d41/CommandLine_8h_source.xhtml#l00012">CommandLine.h:12</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="structefd_1_1StdSolution_xhtml"><div class="ttname"><a href="../../db/d36/structefd_1_1StdSolution.xhtml">efd::StdSolution</a></div><div class="ttdoc">The solution for the allocation problem. </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00031">StdSolutionQAllocator.h:31</a></div></div>
<div class="ttc" id="structefd_1_1StdSolution_xhtml_a7b03dbe2bf5d8e702502d090171291fa"><div class="ttname"><a href="../../db/d36/structefd_1_1StdSolution.xhtml#a7b03dbe2bf5d8e702502d090171291fa">efd::StdSolution::mCost</a></div><div class="ttdeci">uint32_t mCost</div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00038">StdSolutionQAllocator.h:38</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml_a8c9131ca43a772179c24fa4dc9701bb2"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">efd::ArchGraph::sRef</a></div><div class="ttdeci">std::shared_ptr&lt; ArchGraph &gt; sRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00014">ArchGraph.h:14</a></div></div>
<div class="ttc" id="classefd_1_1StdSolutionQAllocator_xhtml"><div class="ttname"><a href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml">efd::StdSolutionQAllocator</a></div><div class="ttdoc">An abstract allocator that builds the solution based on a StdSolution. </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00045">StdSolutionQAllocator.h:45</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">efd::Operation::K_OP_SWAP</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00018">StdSolutionQAllocator.h:18</a></div></div>
<div class="ttc" id="BFSPathFinder_8h_xhtml"><div class="ttname"><a href="../../d7/d2d/BFSPathFinder_8h.xhtml">BFSPathFinder.h</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">efd::Operation::K_OP_CNOT</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00015">StdSolutionQAllocator.h:15</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_ae5c8859117a0d6ea5aeddd1a3fb060ec"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#ae5c8859117a0d6ea5aeddd1a3fb060ec">efd::QModule::insertStatementLast</a></div><div class="ttdeci">Iterator insertStatementLast(Node::uRef ref)</div><div class="ttdoc">Inserts ref at the back, and returns a iterator to this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00107">QModule.cpp:107</a></div></div>
<div class="ttc" id="classefd_1_1IBMQAllocator_xhtml_a8009f7b0d940b68fb44cffa677d93031"><div class="ttname"><a href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#a8009f7b0d940b68fb44cffa677d93031">efd::IBMQAllocator::IBMQAllocator</a></div><div class="ttdeci">IBMQAllocator(ArchGraph::sRef archGraph)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d90/IBMQAllocator_8cpp_source.xhtml#l00016">IBMQAllocator.cpp:16</a></div></div>
<div class="ttc" id="PassCache_8h_xhtml"><div class="ttname"><a href="../../db/d82/PassCache_8h.xhtml">PassCache.h</a></div></div>
<div class="ttc" id="IBMQAllocator_8h_xhtml"><div class="ttname"><a href="../../d3/d48/IBMQAllocator_8h.xhtml">IBMQAllocator.h</a></div></div>
<div class="ttc" id="classefd_1_1IBMQAllocator_xhtml_a0608e1348e994a8c793f4326f157d266"><div class="ttname"><a href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#a0608e1348e994a8c793f4326f157d266">efd::IBMQAllocator::buildStdSolution</a></div><div class="ttdeci">StdSolution buildStdSolution(QModule::Ref qmod) override</div><div class="ttdoc">Executes the allocation algorithm after the preprocessing. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d90/IBMQAllocator_8cpp_source.xhtml#l00171">IBMQAllocator.cpp:171</a></div></div>
<div class="ttc" id="structefd_1_1StdSolution_xhtml_a34cc9c5a785980981ec56b06c3105b31"><div class="ttname"><a href="../../db/d36/structefd_1_1StdSolution.xhtml#a34cc9c5a785980981ec56b06c3105b31">efd::StdSolution::OpVector</a></div><div class="ttdeci">std::vector&lt; Operation &gt; OpVector</div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00032">StdSolutionQAllocator.h:32</a></div></div>
<div class="ttc" id="IntrinsicGateCostPass_8cpp_xhtml_a36846d9fb7f5b314db3aa16d72efe81f"><div class="ttname"><a href="../../d0/df5/IntrinsicGateCostPass_8cpp.xhtml#a36846d9fb7f5b314db3aa16d72efe81f">RevCost</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; RevCost(&quot;-rev-cost&quot;, &quot;Cost of using a reverse edge.&quot;, 4, false)</div></div>
<div class="ttc" id="classefd_1_1BFSPathFinder_xhtml_a4a91e28940313cb585654f5214187cac"><div class="ttname"><a href="../../d8/d45/classefd_1_1BFSPathFinder.xhtml#a4a91e28940313cb585654f5214187cac">efd::BFSPathFinder::find</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; find(Graph::Ref g, uint32_t u, uint32_t v) override</div><div class="ttdoc">Searches for a path from u to v in the graph g. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d3a/BFSPathFinder_8cpp_source.xhtml#l00011">BFSPathFinder.cpp:11</a></div></div>
<div class="ttc" id="RandomMappingFinder_8cpp_xhtml_ab50b9b5b3a7f5889217bc562d1f78f76"><div class="ttname"><a href="../../d2/dd0/RandomMappingFinder_8cpp.xhtml#ab50b9b5b3a7f5889217bc562d1f78f76">Seed</a></div><div class="ttdeci">efd::Opt&lt; uint32_t &gt; Seed(&quot;seed&quot;, &quot;Seed to be used in random algorithms.&quot;, std::chrono::system_clock::now().time_since_epoch().count(), false)</div></div>
<div class="ttc" id="classefd_1_1IBMQAllocator_xhtml_a29fe580f25181032f04112dd8ac96d7c"><div class="ttname"><a href="../../d3/d6c/classefd_1_1IBMQAllocator.xhtml#a29fe580f25181032f04112dd8ac96d7c">efd::IBMQAllocator::Create</a></div><div class="ttdeci">static uRef Create(ArchGraph::sRef archGraph)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d90/IBMQAllocator_8cpp_source.xhtml#l00018">IBMQAllocator.cpp:18</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a0d1ee13f9fdf977893067cb4d0688e3f"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a0d1ee13f9fdf977893067cb4d0688e3f">efd::QModule::clearStatements</a></div><div class="ttdeci">void clearStatements()</div><div class="ttdoc">Removes all statements present int this module. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00131">QModule.cpp:131</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a1f91f26f141eb5b2dd549121451a786c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">efd::InverseMap</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; InverseMap</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00012">Defs.h:12</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">efd::ExitCode::EXIT_unreachable</a></div></div>
<div class="ttc" id="classefd_1_1BFSPathFinder_xhtml"><div class="ttname"><a href="../../d8/d45/classefd_1_1BFSPathFinder.xhtml">efd::BFSPathFinder</a></div><div class="ttdoc">Finds swaps for one restriction only. </div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d2d/BFSPathFinder_8h_source.xhtml#l00008">BFSPathFinder.h:8</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a12c2040f25d8e3a7b9e1c2024c618cb6"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a></div><div class="ttdeci">#define INF</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00048">Defs.h:48</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a12a4775008cb8b6242cedc3621d98f9c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">efd::Mapping</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Mapping</div><div class="ttdoc">Defines the type used for mapping the qubits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00011">Defs.h:11</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_adb4ffc373d7273aefb15d2f9dcd4aeb4"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#adb4ffc373d7273aefb15d2f9dcd4aeb4">efd::InvertMapping</a></div><div class="ttdeci">InverseMap InvertMapping(uint32_t archQ, Mapping mapping, bool fill=true)</div><div class="ttdoc">Generates an assignment mapping (maps the architecture&amp;#39;s qubits to the logical ones) of size archQ...</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00025">QbitAllocator.cpp:25</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
