<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Support/Graph.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_f0dc79bace318df7ec0fa0bdb179ed95.xhtml">Support</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Graph.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../dd/dea/Graph_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/d16/Graph_8h.xhtml">enfield/Support/Graph.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// ----------------------------- Graph -------------------------------</span></div><div class="line"><a name="l00008"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a27001651c245166a96a452540681ddf7">    8</a></span>&#160;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a27001651c245166a96a452540681ddf7">efd::Graph::Graph</a>(<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a09270723d927f7e7b7ec9c8843a7801f">Kind</a> k, uint32_t n, <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#ab6f268ad08bb51da9462e3157a3e5414">Type</a> ty) : mK(k), mN(n), mTy(ty) {</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;    <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#adc1626661d16a480de7a76f95ef53815">mSuccessors</a>.assign(n, std::set&lt;uint32_t&gt;());</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;    <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a7b62326c46ff962cf00a46c9c42909d0">mPredecessors</a>.assign(n, std::set&lt;uint32_t&gt;());</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;}</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#aa78c4e02a93d7e7f665daffc84f2396e">   13</a></span>&#160;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a27001651c245166a96a452540681ddf7">efd::Graph::Graph</a>(uint32_t n, <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#ab6f268ad08bb51da9462e3157a3e5414">Type</a> ty) : mK(K_GRAPH), mN(n), mTy(ty) {</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#adc1626661d16a480de7a76f95ef53815">mSuccessors</a>.assign(n, std::set&lt;uint32_t&gt;());</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a7b62326c46ff962cf00a46c9c42909d0">mPredecessors</a>.assign(n, std::set&lt;uint32_t&gt;());</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;}</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#ab47a77bae3a7ad42e41b1b255cf65d0a">   18</a></span>&#160;std::string <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#ab47a77bae3a7ad42e41b1b255cf65d0a">efd::Graph::vertexToString</a>(uint32_t i)<span class="keyword"> const </span>{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a>(i);</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a8082556444e5ba4d05519a4674b9352a">   22</a></span>&#160;std::string <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a8082556444e5ba4d05519a4674b9352a">efd::Graph::edgeToString</a>(uint32_t i, uint32_t j, std::string op)<span class="keyword"> const </span>{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">return</span> vertexToString(i) + <span class="stringliteral">&quot; &quot;</span> + op + <span class="stringliteral">&quot; &quot;</span> + vertexToString(j);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;}</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a07d44c7ac04a5b4e283e80498d0ba5b3">   26</a></span>&#160;uint32_t <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a07d44c7ac04a5b4e283e80498d0ba5b3">efd::Graph::inDegree</a>(uint32_t i)<span class="keyword"> const </span>{</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">return</span> mPredecessors[i].size();</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;}</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a50404ab95f921078eb31a9a7ebc7329d">   30</a></span>&#160;uint32_t <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a50404ab95f921078eb31a9a7ebc7329d">efd::Graph::outDegree</a>(uint32_t i)<span class="keyword"> const </span>{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> mSuccessors[i].size();</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">   34</a></span>&#160;uint32_t <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">efd::Graph::size</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> mN;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a64836ad3c96e79e02179787ce3bd42c9">   38</a></span>&#160;std::set&lt;uint32_t&gt;&amp; <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a64836ad3c96e79e02179787ce3bd42c9">efd::Graph::succ</a>(uint32_t i) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> mSuccessors[i];</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#ac63b24166d3aa01848e0bd2ad9d46f2e">   42</a></span>&#160;std::set&lt;uint32_t&gt;&amp; <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#ac63b24166d3aa01848e0bd2ad9d46f2e">efd::Graph::pred</a>(uint32_t i) {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> mPredecessors[i];</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">   46</a></span>&#160;std::set&lt;uint32_t&gt; <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">efd::Graph::adj</a>(uint32_t i)<span class="keyword"> const </span>{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::set&lt;uint32_t&gt; adj;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">auto</span>&amp; succ = mSuccessors[i];</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">auto</span>&amp; pred = mPredecessors[i];</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    adj.insert(pred.begin(), pred.end());</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    adj.insert(succ.begin(), succ.end());</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> adj;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">   57</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">efd::Graph::hasEdge</a>(uint32_t i, uint32_t j) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    std::set&lt;uint32_t&gt;&amp; succ = this-&gt;succ(i);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> succ.find(j) != succ.end();</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a3ecb9d2571e0ca6798a8de8a9efa08ed">   62</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3ecb9d2571e0ca6798a8de8a9efa08ed">efd::Graph::putEdge</a>(uint32_t i, uint32_t j) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    mSuccessors[i].insert(j);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    mPredecessors[j].insert(i);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">if</span> (!isDirectedGraph()) {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        mSuccessors[j].insert(i);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        mPredecessors[i].insert(j);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a108a708923dcec909a20bd52417127b8">   72</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a108a708923dcec909a20bd52417127b8">efd::Graph::isWeighted</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> mK == K_WEIGHTED;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a731fcd6c93e77379a962cdb3016c37c5">   76</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a731fcd6c93e77379a962cdb3016c37c5">efd::Graph::isArch</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> mK == K_ARCH;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a9010eb5a297272371c090f47098e2ccf">   80</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a9010eb5a297272371c090f47098e2ccf">efd::Graph::isDirectedGraph</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> mTy == Directed;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#ad9e36f52aa2c0bb99f5bd11dd96d7fd6">   84</a></span>&#160;std::string <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#ad9e36f52aa2c0bb99f5bd11dd96d7fd6">efd::Graph::dotify</a>(std::string name)<span class="keyword"> const </span>{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordtype">bool</span> isDirected = isDirectedGraph();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    std::string edgeOp, graphTy, dot;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">if</span> (isDirected) { edgeOp = <span class="stringliteral">&quot;-&gt;&quot;</span>; graphTy = <span class="stringliteral">&quot;digraph&quot;</span>; }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">else</span> { edgeOp = <span class="stringliteral">&quot;--&quot;</span>; graphTy = <span class="stringliteral">&quot;graph&quot;</span>; }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    dot = graphTy + <span class="stringliteral">&quot; &quot;</span> + name + <span class="stringliteral">&quot; {\n&quot;</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; mN; ++i) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        dot += <span class="stringliteral">&quot;    &quot;</span> + vertexToString(i) + <span class="stringliteral">&quot;;\n&quot;</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keyword">auto</span> adjacent = mSuccessors[i];</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">if</span> (!isDirected) adjacent = adj(i);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">for</span> (uint32_t j : adjacent) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">if</span> (isDirected || (!isDirected &amp;&amp; j &gt;= i))</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                dot += <span class="stringliteral">&quot;    &quot;</span> + edgeToString(i, j, edgeOp) + <span class="stringliteral">&quot;;\n&quot;</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    dot += <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> dot;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a1227d7d45a1f6dccf51f4756dc9a285d">  107</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a1227d7d45a1f6dccf51f4756dc9a285d">efd::Graph::ClassOf</a>(<span class="keyword">const</span> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">Graph</a>* g) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#add08c62648ff4d53d62768d609891fbb">  111</a></span>&#160;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a96bf734b412e954a67c9d86f07d5f65a">efd::Graph::uRef</a> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#add08c62648ff4d53d62768d609891fbb">efd::Graph::Create</a>(uint32_t n, <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#ab6f268ad08bb51da9462e3157a3e5414">Type</a> ty) {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">return</span> std::unique_ptr&lt;Graph&gt;(<span class="keyword">new</span> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">Graph</a>(K_GRAPH, n, ty));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">static</span> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a96bf734b412e954a67c9d86f07d5f65a">efd::Graph::uRef</a> ReadFromIn(std::istream&amp; in, <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#ab6f268ad08bb51da9462e3157a3e5414">efd::Graph::Type</a> ty) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    uint32_t n;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    in &gt;&gt; n;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    std::unique_ptr&lt;efd::Graph&gt; graph(<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#add08c62648ff4d53d62768d609891fbb">efd::Graph::Create</a>(n, ty));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">for</span> (uint32_t u, v; in &gt;&gt; u &gt;&gt; v;)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        graph-&gt;putEdge(u, v);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">return</span> graph;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#ab77c276fa0b13ac8ba7249750063ab03">  126</a></span>&#160;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a96bf734b412e954a67c9d86f07d5f65a">efd::Graph::uRef</a> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#ab77c276fa0b13ac8ba7249750063ab03">efd::Graph::Read</a>(std::string filepath, <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#ab6f268ad08bb51da9462e3157a3e5414">Type</a> ty) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    std::ifstream in(filepath.c_str());</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> ReadFromIn(in, ty);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="../../db/db3/classefd_1_1Graph.xhtml#a191e21dc0b9c917c905ce9ac6d151e6e">  131</a></span>&#160;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a96bf734b412e954a67c9d86f07d5f65a">efd::Graph::uRef</a> <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a191e21dc0b9c917c905ce9ac6d151e6e">efd::Graph::ReadString</a>(std::string graphStr, <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#ab6f268ad08bb51da9462e3157a3e5414">Type</a> ty) {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    std::stringstream in(graphStr);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">return</span> ReadFromIn(in, ty);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div><div class="ttc" id="classefd_1_1Graph_xhtml_a9010eb5a297272371c090f47098e2ccf"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a9010eb5a297272371c090f47098e2ccf">efd::Graph::isDirectedGraph</a></div><div class="ttdeci">bool isDirectedGraph() const</div><div class="ttdoc">Returns true if this is a directed graph. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00080">Graph.cpp:80</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a64836ad3c96e79e02179787ce3bd42c9"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a64836ad3c96e79e02179787ce3bd42c9">efd::Graph::succ</a></div><div class="ttdeci">std::set&lt; uint32_t &gt; &amp; succ(uint32_t i)</div><div class="ttdoc">Return the set of succesors of some vertex i. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00038">Graph.cpp:38</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a3ecb9d2571e0ca6798a8de8a9efa08ed"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a3ecb9d2571e0ca6798a8de8a9efa08ed">efd::Graph::putEdge</a></div><div class="ttdeci">void putEdge(uint32_t i, uint32_t j)</div><div class="ttdoc">Inserts an edge (i, j) in the successor&amp;#39;s list and an edge (j, i) in the predecessor&amp;#39;s list...</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00062">Graph.cpp:62</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_add08c62648ff4d53d62768d609891fbb"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#add08c62648ff4d53d62768d609891fbb">efd::Graph::Create</a></div><div class="ttdeci">static uRef Create(uint32_t n, Type ty=Undirected)</div><div class="ttdoc">Encapsulates the creation of a new Graph. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00111">Graph.cpp:111</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_ab47a77bae3a7ad42e41b1b255cf65d0a"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#ab47a77bae3a7ad42e41b1b255cf65d0a">efd::Graph::vertexToString</a></div><div class="ttdeci">virtual std::string vertexToString(uint32_t i) const</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00018">Graph.cpp:18</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_aa85ea20ad74d6a7df7a52c13a9fabe2d"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">efd::Graph::size</a></div><div class="ttdeci">uint32_t size() const</div><div class="ttdoc">Return the number of vertices. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00034">Graph.cpp:34</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a3531989ad03fb1b38b43c7554d0d378e"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">efd::Graph::adj</a></div><div class="ttdeci">std::set&lt; uint32_t &gt; adj(uint32_t i) const</div><div class="ttdoc">Return the set of adjacent vertices of some vertex i. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00046">Graph.cpp:46</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a09270723d927f7e7b7ec9c8843a7801f"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a09270723d927f7e7b7ec9c8843a7801f">efd::Graph::Kind</a></div><div class="ttdeci">Kind</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d16/Graph_8h_source.xhtml#l00017">Graph.h:17</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a07d44c7ac04a5b4e283e80498d0ba5b3"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a07d44c7ac04a5b4e283e80498d0ba5b3">efd::Graph::inDegree</a></div><div class="ttdeci">uint32_t inDegree(uint32_t i) const</div><div class="ttdoc">Return the degree entering the vertex i. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00026">Graph.cpp:26</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a27001651c245166a96a452540681ddf7"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a27001651c245166a96a452540681ddf7">efd::Graph::Graph</a></div><div class="ttdeci">Graph(Kind k, uint32_t n, Type ty=Undirected)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00008">Graph.cpp:8</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_aace719bbdaaef0e8787f8a0032a676d8"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#aace719bbdaaef0e8787f8a0032a676d8">efd::Graph::hasEdge</a></div><div class="ttdeci">bool hasEdge(uint32_t i, uint32_t j)</div><div class="ttdoc">Returns true whether it has an edge (i, j). </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00057">Graph.cpp:57</a></div></div>
<div class="ttc" id="Graph_8h_xhtml"><div class="ttname"><a href="../../d7/d16/Graph_8h.xhtml">Graph.h</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_ab77c276fa0b13ac8ba7249750063ab03"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#ab77c276fa0b13ac8ba7249750063ab03">efd::Graph::Read</a></div><div class="ttdeci">static uRef Read(std::string filepath, Type ty=Undirected)</div><div class="ttdoc">Parses the file filename into a Graph representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00126">Graph.cpp:126</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_ac63b24166d3aa01848e0bd2ad9d46f2e"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#ac63b24166d3aa01848e0bd2ad9d46f2e">efd::Graph::pred</a></div><div class="ttdeci">std::set&lt; uint32_t &gt; &amp; pred(uint32_t i)</div><div class="ttdoc">Return the set of predecessors of some vertex i. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00042">Graph.cpp:42</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a8082556444e5ba4d05519a4674b9352a"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a8082556444e5ba4d05519a4674b9352a">efd::Graph::edgeToString</a></div><div class="ttdeci">virtual std::string edgeToString(uint32_t i, uint32_t j, std::string op) const</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00022">Graph.cpp:22</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_ab6f268ad08bb51da9462e3157a3e5414"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#ab6f268ad08bb51da9462e3157a3e5414">efd::Graph::Type</a></div><div class="ttdeci">Type</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d16/Graph_8h_source.xhtml#l00023">Graph.h:23</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a96bf734b412e954a67c9d86f07d5f65a"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a96bf734b412e954a67c9d86f07d5f65a">efd::Graph::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; Graph &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d16/Graph_8h_source.xhtml#l00014">Graph.h:14</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a1227d7d45a1f6dccf51f4756dc9a285d"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a1227d7d45a1f6dccf51f4756dc9a285d">efd::Graph::ClassOf</a></div><div class="ttdeci">static bool ClassOf(const Graph *g)</div><div class="ttdoc">Returns true if g is of this type. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00107">Graph.cpp:107</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a7b62326c46ff962cf00a46c9c42909d0"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a7b62326c46ff962cf00a46c9c42909d0">efd::Graph::mPredecessors</a></div><div class="ttdeci">std::vector&lt; std::set&lt; uint32_t &gt; &gt; mPredecessors</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d16/Graph_8h_source.xhtml#l00031">Graph.h:31</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a191e21dc0b9c917c905ce9ac6d151e6e"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a191e21dc0b9c917c905ce9ac6d151e6e">efd::Graph::ReadString</a></div><div class="ttdeci">static uRef ReadString(std::string graphStr, Type ty=Undirected)</div><div class="ttdoc">Parses the string graphStr into a Graph representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00131">Graph.cpp:131</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_adc1626661d16a480de7a76f95ef53815"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#adc1626661d16a480de7a76f95ef53815">efd::Graph::mSuccessors</a></div><div class="ttdeci">std::vector&lt; std::set&lt; uint32_t &gt; &gt; mSuccessors</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d16/Graph_8h_source.xhtml#l00030">Graph.h:30</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a108a708923dcec909a20bd52417127b8"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a108a708923dcec909a20bd52417127b8">efd::Graph::isWeighted</a></div><div class="ttdeci">bool isWeighted() const</div><div class="ttdoc">Returns true if this is a weighted graph. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00072">Graph.cpp:72</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml">efd::Graph</a></div><div class="ttdoc">Graph representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d16/Graph_8h_source.xhtml#l00011">Graph.h:11</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a731fcd6c93e77379a962cdb3016c37c5"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a731fcd6c93e77379a962cdb3016c37c5">efd::Graph::isArch</a></div><div class="ttdeci">bool isArch() const</div><div class="ttdoc">Returns true if this is an architecture graph. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00076">Graph.cpp:76</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a76fb98cd4a35566d53c2f0513c5d12d1"><div class="ttname"><a href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a></div><div class="ttdeci">string to_string(efd::EnumString&lt; T, first, last &gt; &amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d62/EnumString_8h_source.xhtml#l00053">EnumString.h:53</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a50404ab95f921078eb31a9a7ebc7329d"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a50404ab95f921078eb31a9a7ebc7329d">efd::Graph::outDegree</a></div><div class="ttdeci">uint32_t outDegree(uint32_t i) const</div><div class="ttdoc">Return the degree leaving the vertex i. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00030">Graph.cpp:30</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_ad9e36f52aa2c0bb99f5bd11dd96d7fd6"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#ad9e36f52aa2c0bb99f5bd11dd96d7fd6">efd::Graph::dotify</a></div><div class="ttdeci">std::string dotify(std::string name=&quot;Dump&quot;) const</div><div class="ttdoc">Converts itself to a &amp;#39;dot&amp;#39; graph representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00084">Graph.cpp:84</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
