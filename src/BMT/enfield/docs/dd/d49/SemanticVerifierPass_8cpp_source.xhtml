<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/SemanticVerifierPass.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">SemanticVerifierPass.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../dd/d49/SemanticVerifierPass_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d7/d69/SemanticVerifierPass_8h.xhtml">enfield/Transform/SemanticVerifierPass.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d8/d9b/CircuitGraphBuilderPass_8h.xhtml">enfield/Transform/CircuitGraphBuilderPass.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d6/d94/XbitToNumberPass_8h.xhtml">enfield/Transform/XbitToNumberPass.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d6/da6/FlattenPass_8h.xhtml">enfield/Transform/FlattenPass.h</a>&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d4/d61/InlineAllPass_8h.xhtml">enfield/Transform/InlineAllPass.h</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/d82/PassCache_8h.xhtml">enfield/Transform/PassCache.h</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/ded/Utils_8h.xhtml">enfield/Transform/Utils.h</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d0/d8d/NodeVisitor_8h.xhtml">enfield/Analysis/NodeVisitor.h</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/d73/Defs_8h.xhtml">enfield/Support/Defs.h</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d5/dfc/RTTI_8h.xhtml">enfield/Support/RTTI.h</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">using namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keyword">struct </span>SemanticCNOT {</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        uint32_t u, v;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> SemanticCNOT&amp; rhs) {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;            <span class="keywordflow">return</span> u == rhs.u &amp;&amp; v == rhs.v;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        }</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> SemanticCNOT&amp; rhs) {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        }</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    };</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a> {</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml">   33</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml">SemanticVerifierVisitor</a> : <span class="keyword">public</span> <a class="code" href="../../d8/d5d/classefd_1_1NodeVisitor.xhtml">NodeVisitor</a> {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            uint32_t mQubitsSrc;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            uint32_t mQubitsTgt;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            uint32_t mXbitsSrc;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">XbitToNumber</a>&amp; mXtoNSrc;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">XbitToNumber</a>&amp; mXtoNTgt;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <a class="code" href="../../d7/d0b/classefd_1_1CircuitGraph_1_1Iterator.xhtml">CircuitGraph::Iterator</a>&amp; mIt;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> mMap;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a> mInverseMap;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            std::map&lt;Node::Ref, uint32_t&gt; mReached;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            std::vector&lt;bool&gt; mMarked;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keyword">inline</span> uint32_t getTgtUId(uint32_t srcUId);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keyword">inline</span> uint32_t getSrcUId(uint32_t tgtUId);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keyword">inline</span> uint32_t getRealTgtCUId(uint32_t baseUId);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keyword">inline</span> uint32_t getRealSrcCUId(uint32_t baseUId);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keywordtype">void</span> updatedReachedCktNodes();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordtype">void</span> advanceCktNodes(std::vector&lt;uint32_t&gt; xbitsToUpdate);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordtype">void</span> postprocessing(std::vector&lt;uint32_t&gt; xbitsToUpdate);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordtype">void</span> visitNDQOp(<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a> qop, <a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ifstmt = <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#af2e365593beb3100fac2c26a4d56395c">SemanticVerifierVisitor</a>(<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">XbitToNumber</a>&amp; xtonsrc,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                    <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">XbitToNumber</a>&amp; xtontgt,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                    <a class="code" href="../../d7/d0b/classefd_1_1CircuitGraph_1_1Iterator.xhtml">CircuitGraph::Iterator</a>&amp; it,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> initial);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">visit</a>(<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">NDQOpMeasure::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">visit</a>(<a class="code" href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">NDQOpReset::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">visit</a>(<a class="code" href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">NDQOpU::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">visit</a>(<a class="code" href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">NDQOpCX::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">visit</a>(<a class="code" href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">NDQOpBarrier::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">visit</a>(<a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">NDQOpGen::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">visit</a>(<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">   71</a></span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    };</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#af2e365593beb3100fac2c26a4d56395c">   75</a></span>&#160;<a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#af2e365593beb3100fac2c26a4d56395c">SemanticVerifierVisitor::SemanticVerifierVisitor</a>(<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">XbitToNumber</a>&amp; xtonsrc,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                                 <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">XbitToNumber</a>&amp; xtontgt,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                                 <a class="code" href="../../d7/d0b/classefd_1_1CircuitGraph_1_1Iterator.xhtml">CircuitGraph::Iterator</a>&amp; iterator,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                                 <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> initial) :</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    mQubitsSrc(xtonsrc.getQSize()),</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    mQubitsTgt(xtontgt.getQSize()),</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    mXbitsSrc(xtonsrc.getQSize() + xtonsrc.getCSize()),</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    mXtoNSrc(xtonsrc),</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    mXtoNTgt(xtontgt),</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    mIt(iterator),</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    mMap(initial),</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    mMarked(mXbitsSrc, false),</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    mSuccess(true) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    </div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    mInverseMap.assign(mQubitsTgt, 0);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; mQubitsTgt; ++i) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        mInverseMap[mMap[i]] = i;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; mXbitsSrc; ++i) {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        mIt.<a class="code" href="../../d7/d0b/classefd_1_1CircuitGraph_1_1Iterator.xhtml#a53e088602bfc10b1de2a681b93cff134">next</a>(i);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    postprocessing({});</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;uint32_t SemanticVerifierVisitor::getRealTgtCUId(uint32_t baseUId) {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> mQubitsTgt + baseUId;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;uint32_t SemanticVerifierVisitor::getRealSrcCUId(uint32_t baseUId) {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> mQubitsSrc + baseUId;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;uint32_t SemanticVerifierVisitor::getTgtUId(uint32_t srcUId) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">if</span> (srcUId &lt; mQubitsSrc) <span class="keywordflow">return</span> mMap[srcUId];</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">return</span> (srcUId - mQubitsSrc) + mQubitsTgt;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;uint32_t SemanticVerifierVisitor::getSrcUId(uint32_t tgtUId) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span> (tgtUId &lt; mQubitsTgt) <span class="keywordflow">return</span> mInverseMap[tgtUId];</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> (tgtUId - mQubitsTgt) + mQubitsSrc;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keywordtype">void</span> SemanticVerifierVisitor::updatedReachedCktNodes() {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; mXbitsSrc; ++i) {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keyword">auto</span> circuitNode = mIt[i];</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keyword">auto</span> node = circuitNode-&gt;node();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">if</span> (circuitNode-&gt;isGateNode() &amp;&amp; !mMarked[i]) {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            mMarked[i] = <span class="keyword">true</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">if</span> (mReached.find(node) == mReached.end())</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                mReached[node] = circuitNode-&gt;numberOfXbits();</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            --mReached[node];</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keywordtype">void</span> SemanticVerifierVisitor::advanceCktNodes(std::vector&lt;uint32_t&gt; xbitsToUpdate) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">for</span> (uint32_t x : xbitsToUpdate) {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        mIt.<a class="code" href="../../d7/d0b/classefd_1_1CircuitGraph_1_1Iterator.xhtml#a53e088602bfc10b1de2a681b93cff134">next</a>(x);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        mMarked[x] = <span class="keyword">false</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keywordtype">void</span> SemanticVerifierVisitor::postprocessing(std::vector&lt;uint32_t&gt; xbitsToUpdate) {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    advanceCktNodes(xbitsToUpdate);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    updatedReachedCktNodes();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keywordtype">void</span> SemanticVerifierVisitor::visitNDQOp(<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a> tgtQOp, <a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> tgtIfStmt) {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// Checking all quantum arguments from the current node.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    std::vector&lt;uint32_t&gt; tgtOpQubits;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    std::vector&lt;uint32_t&gt; tgtOpCbits;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">auto</span> tgtQArgs = tgtQOp-&gt;<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml#af7ef43289355c5bb047a46419177c8ed">getQArgs</a>();</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    uint32_t tgtQArgsChildrem = tgtQArgs-&gt;<a class="code" href="../../da/ddd/classefd_1_1NDList.xhtml#a7d1b691a45689241a8138539a2be8596">getChildNumber</a>();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; tgtQArgsChildrem; ++i) {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keyword">auto</span> qarg = tgtQArgs-&gt;getChild(i);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        tgtOpQubits.push_back(mXtoNTgt.<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">getQUId</a>(qarg-&gt;toString(<span class="keyword">false</span>)));</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">if</span> (tgtIfStmt != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> cbit : mXtoNTgt.<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#aa3dc820bf243cb3f06c6e6155e853888">getRegUIds</a>(tgtIfStmt-&gt;<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml#a5ec6f243aee6d4fe8988885ea9c449de">getCondId</a>()-&gt;<a class="code" href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">getVal</a>()))</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            tgtOpCbits.push_back(getRealTgtCUId(cbit));</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Checking all quantum arguments from the circuit node.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    std::vector&lt;uint32_t&gt; srcOpQubits;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    std::vector&lt;uint32_t&gt; srcOpCbits;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">auto</span> srcCNode = mIt[getSrcUId(tgtOpQubits[0])];</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">if</span> (!srcCNode-&gt;isGateNode()) { <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <span class="keyword">false</span>; <span class="keywordflow">return</span>; }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">auto</span> srcNode = srcCNode-&gt;node();</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a> srcQOp = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">if</span> (tgtIfStmt != <span class="keyword">nullptr</span> &amp;&amp; tgtIfStmt-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a23e33e714f48070d9e8c090cd396d956">getKind</a>() == srcNode-&gt;getKind()) {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keyword">auto</span> srcIfStmt = <span class="keyword">static_cast&lt;</span><a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt</a>*<span class="keyword">&gt;</span>(srcNode);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        srcQOp = srcIfStmt-&gt;getQOp();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> cbit : mXtoNSrc.<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#aa3dc820bf243cb3f06c6e6155e853888">getRegUIds</a>(srcIfStmt-&gt;getCondId()-&gt;getVal()))</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            srcOpCbits.push_back(getTgtUId(getRealSrcCUId(cbit)));</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tgtIfStmt == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        srcQOp = dynCast&lt;NDQOp&gt;(srcNode);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">if</span> (srcQOp == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">// Either the current node \em tgtQOp is a NDIfStmt and the circuit one is not or</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="comment">// the other way around.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">auto</span> srcQArgs = srcQOp-&gt;<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml#af7ef43289355c5bb047a46419177c8ed">getQArgs</a>();</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    uint32_t srcQArgsChildrem = srcQArgs-&gt;<a class="code" href="../../da/ddd/classefd_1_1NDList.xhtml#a7d1b691a45689241a8138539a2be8596">getChildNumber</a>();</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; srcQArgsChildrem; ++i) {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        uint32_t qubit = mXtoNSrc.<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">getQUId</a>(srcQArgs-&gt;getChild(i)-&gt;toString(<span class="keyword">false</span>));</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        srcOpQubits.push_back(getTgtUId(qubit));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// All qubits involved in the current circuit node must also be involved in the current node.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">for</span> (uint32_t q : srcOpQubits) {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            std::find(tgtOpQubits.begin(), tgtOpQubits.end(), q) != tgtOpQubits.end();</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// All qubits and cbits have reached this node (and they are not null).</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">auto</span> firstSrcCNode = mIt[getSrcUId(srcOpQubits[0])];</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">auto</span> firstSrcNode = firstSrcCNode-&gt;node();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; firstSrcCNode-&gt;isGateNode() &amp;&amp; !mReached[firstSrcNode];</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">// All used qubits have reached the same node (there is no instruction that is dependent</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// of others that is being executed before its dependencies) </span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; srcQArgsChildrem; ++i) {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; mIt[getSrcUId(srcOpQubits[i])]-&gt;node() == firstSrcNode;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">if</span> (srcOpCbits.size() != tgtOpCbits.size())</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a>) <span class="keywordflow">return</span>;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="comment">// If this operation deals with more than one qubit, we assume it deals with exactly two</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// qubits, and that it is a CNOT gate.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">if</span> (srcOpQubits.size() &gt; 1) {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../d4/deb/namespaceefd.xhtml#ab9c1264648ba0395505dc5b54358c0a9">IsCNOTGateCall</a>(srcQOp)) {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            <span class="comment">// Both CNOTs and REV_CNOTS have the same semantic.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="comment">// The only difference is in the way they are implemented. </span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            SemanticCNOT srcCNOT { srcOpQubits[0], srcOpQubits[1] };</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            SemanticCNOT tgtCNOT { tgtOpQubits[0], tgtOpQubits[1] };</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="../../d4/deb/namespaceefd.xhtml#ab9c1264648ba0395505dc5b54358c0a9">IsCNOTGateCall</a>(tgtQOp)) {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                <span class="keyword">auto</span> tgtQOpGen = dynCast&lt;NDQOpGen&gt;(tgtQOp);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                <span class="comment">// Checking for intrinsics.</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                <span class="keywordflow">if</span> (tgtQOpGen &amp;&amp; tgtQOpGen-&gt;isIntrinsic() &amp;&amp;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                        tgtQOpGen-&gt;getIntrinsicKind() == <a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml#a287cbca5c6c5fbf565ac32f435030eaca407b48bc476412424a62cc5eaee7184e">NDQOpGen::K_INTRINSIC_LCX</a>) {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        tgtCNOT.u = tgtOpQubits[0];</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        tgtCNOT.v = tgtOpQubits[2];</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="comment">// Check if, semanticaly, CNOTs are applied to the same qubits in the same order.</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; srcCNOT == tgtCNOT;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (instanceOf&lt;NDQOpBarrier&gt;(srcQOp)) {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="keyword">auto</span> src = dynCast&lt;NDQOpBarrier&gt;(srcQOp);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keyword">auto</span> tgt = dynCast&lt;NDQOpBarrier&gt;(tgtQOp);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = src-&gt;getQArgs()-&gt;getChildNumber() == tgt-&gt;getQArgs()-&gt;getChildNumber();</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            std::string str = (srcQOp == <span class="keyword">nullptr</span>) ? <span class="stringliteral">&quot;nullptr&quot;</span> : srcQOp-&gt;<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml#ad05708f36f7c1c126e9f0fbba80a4b0f">toString</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <a class="code" href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;Node is neither CNOT nor Barrier. Actual: `&quot;</span> &lt;&lt; str &lt;&lt; <span class="stringliteral">&quot;`.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <a class="code" href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">ExitWith</a>(<a class="code" href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">ExitCode::EXIT_unreachable</a>);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        }</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">if</span> (tgtIfStmt != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; firstSrcCNode-&gt;node()-&gt;getKind() == tgtIfStmt-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a23e33e714f48070d9e8c090cd396d956">getKind</a>();</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; firstSrcCNode-&gt;node()-&gt;getKind() == tgtQOp-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a23e33e714f48070d9e8c090cd396d956">getKind</a>();</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="comment">// Checking all real arguments.</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keyword">auto</span> tgtArgs = tgtQOp-&gt;<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml#a38dbbb3a5ca8faaeb9973512f04c6f64">getArgs</a>();</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keyword">auto</span> srcArgs = srcQOp-&gt;<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml#a38dbbb3a5ca8faaeb9973512f04c6f64">getArgs</a>();</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; tgtArgs-&gt;equals(srcArgs);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a>) {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        std::vector&lt;uint32_t&gt; all;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        std::vector&lt;uint32_t&gt; toBeAdvanced;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        all.insert(all.begin(), srcOpQubits.begin(), srcOpQubits.end());</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        all.insert(all.begin(), srcOpCbits.begin(), srcOpCbits.end());</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> q : all) {</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            toBeAdvanced.push_back(getSrcUId(q));</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        postprocessing(toBeAdvanced);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">  287</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">SemanticVerifierVisitor::visit</a>(<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">NDQOpMeasure::Ref</a> ref) {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    uint32_t tgtQUId = mXtoNTgt.<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">getQUId</a>(ref-&gt;<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml#a96d21c24df543013ac4e88f537d40c9b">getQBit</a>()-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">toString</a>(<span class="keyword">false</span>));</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    uint32_t tgtCUId = getRealTgtCUId(mXtoNTgt.<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae9f84f1119a80e918cc3b3fd916a5922">getCUId</a>(ref-&gt;<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml#addcc5fd8d95d5790f75b643e88e76c7e">getCBit</a>()-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">toString</a>(<span class="keyword">false</span>)));</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keyword">auto</span> srcCNode = mIt[getSrcUId(tgtQUId)];</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">auto</span> srcNode = dynCast&lt;NDQOpMeasure&gt;(srcCNode-&gt;node());</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">if</span> (srcNode != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        uint32_t srcQUId = mXtoNSrc.<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">getQUId</a>(srcNode-&gt;getQBit()-&gt;toString(<span class="keyword">false</span>));</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        uint32_t srcCUId = getRealSrcCUId(mXtoNSrc.<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae9f84f1119a80e918cc3b3fd916a5922">getCUId</a>(srcNode-&gt;getCBit()-&gt;toString(<span class="keyword">false</span>)));</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; tgtQUId == getTgtUId(srcQUId);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; tgtCUId == getTgtUId(srcCUId);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; srcCNode-&gt;isGateNode();</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; !mReached[srcNode];</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; mIt[srcQUId]-&gt;node() == mIt[srcCUId]-&gt;node();</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> = <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a> &amp;&amp; srcNode-&gt;getKind() == ref-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a23e33e714f48070d9e8c090cd396d956">getKind</a>();</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">mSuccess</a>) postprocessing({ srcQUId, srcCUId });</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno"><a class="line" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#ae1228fede9dcbfb9eba1fdaaf6492dfd">  310</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">SemanticVerifierVisitor::visit</a>(<a class="code" href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">NDQOpReset::Ref</a> ref) {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    visitNDQOp(ref);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno"><a class="line" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#aa67183a1197a4c437e2396163c6c42f7">  314</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">SemanticVerifierVisitor::visit</a>(<a class="code" href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">NDQOpU::Ref</a> ref) {</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    visitNDQOp(ref);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;}</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#ab4b4ab35602acb617b9e5e4764bff627">  318</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">SemanticVerifierVisitor::visit</a>(<a class="code" href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">NDQOpCX::Ref</a> ref) {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    visitNDQOp(ref);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;}</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno"><a class="line" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a7695bfc013734c2f50f9e9401b9cad1e">  322</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">SemanticVerifierVisitor::visit</a>(<a class="code" href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">NDQOpBarrier::Ref</a> ref) {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    visitNDQOp(ref);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;}</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno"><a class="line" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#aac99d7008eb2d9cdb13825e99072928b">  326</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">SemanticVerifierVisitor::visit</a>(<a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">NDQOpGen::Ref</a> ref) {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">if</span> (ref-&gt;<a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml#a00f1b64c13766964893ec0cdb42bafdf">isIntrinsic</a>() &amp;&amp; ref-&gt;<a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml#abbd4435ec926c38719e8af49bb89af6d">getIntrinsicKind</a>() == <a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml#a287cbca5c6c5fbf565ac32f435030eaca06d08c07a567eac8a58914ef691dc9f8">NDQOpGen::K_INTRINSIC_SWAP</a>) {</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keyword">auto</span> qargs = ref-&gt;<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml#af7ef43289355c5bb047a46419177c8ed">getQArgs</a>();</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        uint32_t u = mXtoNTgt.<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">getQUId</a>(qargs-&gt;getChild(0)-&gt;toString(<span class="keyword">false</span>));</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        uint32_t v = mXtoNTgt.<a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">getQUId</a>(qargs-&gt;getChild(1)-&gt;toString(<span class="keyword">false</span>));</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        uint32_t a = mInverseMap[u];</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        uint32_t b = mInverseMap[v];</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        std::swap(mMap[a], mMap[b]);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        std::swap(mInverseMap[u], mInverseMap[v]);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        visitNDQOp(ref);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;}</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno"><a class="line" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a1e81c7a66c34071d5f8d882dddbb053a">  343</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">SemanticVerifierVisitor::visit</a>(<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ref) {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="comment">// NOTE: if, one day, we have &#39;swap&#39; nodes inside if statements, we</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="comment">// should call &#39;ref-&gt;getQOp()-&gt;apply()&#39; here.</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    visitNDQOp(ref-&gt;<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml#ae5c408d49862e644f1d299ab5b2f121d">getQOp</a>(), ref);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno"><a class="line" href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a9405f056dece69c89fd116d2870e5808">  349</a></span>&#160;<a class="code" href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a9405f056dece69c89fd116d2870e5808">SemanticVerifierPass::SemanticVerifierPass</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a85ca5b04a1d4d196b30004c3e1acaf7e">QModule::uRef</a> src, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> initial)</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    : mSrc(<a class="code" href="../../d8/dcc/namespacestd.xhtml">std</a>::move(src)), mInitial(initial) {</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <a class="code" href="../../db/d56/classefd_1_1PassT.xhtml#a5b6a7296f64c3ae0dd8ad9f528b11ed0">mData</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno"><a class="line" href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a508cc5a952508151456eb9796cc42e51">  354</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a508cc5a952508151456eb9796cc42e51">SemanticVerifierPass::run</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule</a>* tgt) {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    PassCache::Run&lt;FlattenPass&gt;(mSrc.get());</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keyword">auto</span> inlinePass = <a class="code" href="../../d5/de3/classefd_1_1InlineAllPass.xhtml#a39637a556c08bf458f9bf20812d11470">InlineAllPass::Create</a>(mBasis);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="../../d1/df9/classefd_1_1PassCache.xhtml#acb82213b8e43f26fdca8266be3cc4c7c">PassCache::Run</a>(mSrc.get(), inlinePass.get());</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keyword">auto</span> cktpass = PassCache::Get&lt;CircuitGraphBuilderPass&gt;(mSrc.get());</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keyword">auto</span>&amp; ckt = cktpass-&gt;getData();</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keyword">auto</span> xtonpassSrc = PassCache::Get&lt;XbitToNumberWrapperPass&gt;(mSrc.get());</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">auto</span> xtonpassTgt = PassCache::Get&lt;XbitToNumberWrapperPass&gt;(tgt);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="../../db/d56/classefd_1_1PassT.xhtml#a5b6a7296f64c3ae0dd8ad9f528b11ed0">mData</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keyword">auto</span> it = ckt.build_iterator();</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <a class="code" href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml">SemanticVerifierVisitor</a> visitor(xtonpassSrc-&gt;getData(),</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                    xtonpassTgt-&gt;getData(),</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                    it,</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                    mInitial);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = tgt-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#ac00e1eb93f94c00db1e6a661d8f95d9d">stmt_begin</a>(), end = tgt-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a23d45e3b6c65d5fa14b199da8b0617c7">stmt_end</a>();</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            it != end &amp;&amp; <a class="code" href="../../db/d56/classefd_1_1PassT.xhtml#a5b6a7296f64c3ae0dd8ad9f528b11ed0">mData</a>; ++it) {</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        (*it)-&gt;apply(&amp;visitor);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <a class="code" href="../../db/d56/classefd_1_1PassT.xhtml#a5b6a7296f64c3ae0dd8ad9f528b11ed0">mData</a> = <a class="code" href="../../db/d56/classefd_1_1PassT.xhtml#a5b6a7296f64c3ae0dd8ad9f528b11ed0">mData</a> &amp;&amp; visitor.mSuccess;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    }</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = ckt.size(); i &lt; e; ++i) {</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="keywordflow">if</span> (!it[i]-&gt;isOutputNode()) { <a class="code" href="../../db/d56/classefd_1_1PassT.xhtml#a5b6a7296f64c3ae0dd8ad9f528b11ed0">mData</a> = <span class="keyword">false</span>; <span class="keywordflow">break</span>; }</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;}</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a6fb9f958bc8fa5cd2f89c5d55063ddaa">  385</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a6fb9f958bc8fa5cd2f89c5d55063ddaa">SemanticVerifierPass::setInlineAll</a>(std::vector&lt;std::string&gt; basis) {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    mBasis = basis;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;}</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#ab98adda73b3133ef1fed5952a350ca15">  389</a></span>&#160;<a class="code" href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a9e6835f24f7765ada488f4981620baee">SemanticVerifierPass::uRef</a> <a class="code" href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#ab98adda73b3133ef1fed5952a350ca15">SemanticVerifierPass::Create</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a85ca5b04a1d4d196b30004c3e1acaf7e">QModule::uRef</a> src, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> initial) {</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a9e6835f24f7765ada488f4981620baee">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a9405f056dece69c89fd116d2870e5808">SemanticVerifierPass</a>(std::move(src), initial));</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;}</div><div class="ttc" id="classefd_1_1NodeVisitor_xhtml"><div class="ttname"><a href="../../d8/d5d/classefd_1_1NodeVisitor.xhtml">efd::NodeVisitor</a></div><div class="ttdoc">Interface class to be used as a visitor. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d8d/NodeVisitor_8h_source.xhtml#l00009">NodeVisitor.h:9</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_af3487901a239a99750dc5dcdc3a8c868"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af3487901a239a99750dc5dcdc3a8c868">efd::ExitWith</a></div><div class="ttdeci">void ExitWith(ExitCode e)</div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d72/Defs_8cpp_source.xhtml#l00045">Defs.cpp:45</a></div></div>
<div class="ttc" id="classefd_1_1PassCache_xhtml_acb82213b8e43f26fdca8266be3cc4c7c"><div class="ttname"><a href="../../d1/df9/classefd_1_1PassCache.xhtml#acb82213b8e43f26fdca8266be3cc4c7c">efd::PassCache::Run</a></div><div class="ttdeci">static void Run(QModule::Ref qmod)</div><div class="ttdoc">Runs the pass T in qmod. </div><div class="ttdef"><b>Definition:</b> <a href="../../db/d82/PassCache_8h_source.xhtml#l00047">PassCache.h:47</a></div></div>
<div class="ttc" id="XbitToNumberPass_8h_xhtml"><div class="ttname"><a href="../../d6/d94/XbitToNumberPass_8h.xhtml">XbitToNumberPass.h</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpMeasure_xhtml_a96d21c24df543013ac4e88f537d40c9b"><div class="ttname"><a href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml#a96d21c24df543013ac4e88f537d40c9b">efd::NDQOpMeasure::getQBit</a></div><div class="ttdeci">Node::Ref getQBit() const</div><div class="ttdoc">Gets the qbit node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l01017">Nodes.cpp:1017</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a23e33e714f48070d9e8c090cd396d956"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a23e33e714f48070d9e8c090cd396d956">efd::Node::getKind</a></div><div class="ttdeci">Kind getKind() const</div><div class="ttdoc">Returns the kind of this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00054">Nodes.cpp:54</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00046">Defs.h:46</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpGen_xhtml_a287cbca5c6c5fbf565ac32f435030eaca407b48bc476412424a62cc5eaee7184e"><div class="ttname"><a href="../../d2/dff/classefd_1_1NDQOpGen.xhtml#a287cbca5c6c5fbf565ac32f435030eaca407b48bc476412424a62cc5eaee7184e">efd::NDQOpGen::K_INTRINSIC_LCX</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00938">Nodes.h:938</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpGen_xhtml"><div class="ttname"><a href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">efd::NDQOpGen</a></div><div class="ttdoc">NDQOp specialized for generic gates. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00930">Nodes.h:930</a></div></div>
<div class="ttc" id="FlattenPass_8h_xhtml"><div class="ttname"><a href="../../d6/da6/FlattenPass_8h.xhtml">FlattenPass.h</a></div></div>
<div class="ttc" id="classefd_1_1SemanticVerifierVisitor_xhtml"><div class="ttname"><a href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml">efd::SemanticVerifierVisitor</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d49/SemanticVerifierPass_8cpp_source.xhtml#l00033">SemanticVerifierPass.cpp:33</a></div></div>
<div class="ttc" id="classefd_1_1SemanticVerifierPass_xhtml_a6fb9f958bc8fa5cd2f89c5d55063ddaa"><div class="ttname"><a href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a6fb9f958bc8fa5cd2f89c5d55063ddaa">efd::SemanticVerifierPass::setInlineAll</a></div><div class="ttdeci">void setInlineAll(std::vector&lt; std::string &gt; basis={})</div><div class="ttdoc">Flags the verifier to inline all gates, but those inside the basis vector, before mapping...</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d49/SemanticVerifierPass_8cpp_source.xhtml#l00385">SemanticVerifierPass.cpp:385</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpReset_xhtml"><div class="ttname"><a href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">efd::NDQOpReset</a></div><div class="ttdoc">NDQOp specialized for reset operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00630">Nodes.h:630</a></div></div>
<div class="ttc" id="classefd_1_1NDQOp_xhtml_ad05708f36f7c1c126e9f0fbba80a4b0f"><div class="ttname"><a href="../../dd/d94/classefd_1_1NDQOp.xhtml#ad05708f36f7c1c126e9f0fbba80a4b0f">efd::NDQOp::toString</a></div><div class="ttdeci">virtual std::string toString(bool pretty=false) const override</div><div class="ttdoc">Returns a std::string representation of this Node and its childrem. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00925">Nodes.cpp:925</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a23d45e3b6c65d5fa14b199da8b0617c7"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a23d45e3b6c65d5fa14b199da8b0617c7">efd::QModule::stmt_end</a></div><div class="ttdeci">Iterator stmt_end()</div><div class="ttdoc">Iterator to the end of the statement node vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00226">QModule.cpp:226</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml">efd::QModule</a></div><div class="ttdoc">Qasm module representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00013">QModule.h:13</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">efd::XbitToNumber</a></div><div class="ttdoc">Maps every quantum and classic bit (not register) to a number inside a vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d94/XbitToNumberPass_8h_source.xhtml#l00023">XbitToNumberPass.h:23</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="classefd_1_1NDQOp_xhtml_a38dbbb3a5ca8faaeb9973512f04c6f64"><div class="ttname"><a href="../../dd/d94/classefd_1_1NDQOp.xhtml#a38dbbb3a5ca8faaeb9973512f04c6f64">efd::NDQOp::getArgs</a></div><div class="ttdeci">NDList::Ref getArgs() const</div><div class="ttdoc">Gets the arguments. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00901">Nodes.cpp:901</a></div></div>
<div class="ttc" id="RTTI_8h_xhtml"><div class="ttname"><a href="../../d5/dfc/RTTI_8h.xhtml">RTTI.h</a></div></div>
<div class="ttc" id="SemanticVerifierPass_8h_xhtml"><div class="ttname"><a href="../../d7/d69/SemanticVerifierPass_8h.xhtml">SemanticVerifierPass.h</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a96ca13a5c2b971b68619ce4a34be0f66"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">efd::Node::toString</a></div><div class="ttdeci">virtual std::string toString(bool pretty=false) const =0</div><div class="ttdoc">Returns a std::string representation of this Node and its childrem. </div></div>
<div class="ttc" id="classefd_1_1NDQOpU_xhtml"><div class="ttname"><a href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">efd::NDQOpU</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00716">Nodes.h:716</a></div></div>
<div class="ttc" id="classefd_1_1NDList_xhtml_a7d1b691a45689241a8138539a2be8596"><div class="ttname"><a href="../../da/ddd/classefd_1_1NDList.xhtml#a7d1b691a45689241a8138539a2be8596">efd::NDList::getChildNumber</a></div><div class="ttdeci">uint32_t getChildNumber() const override</div><div class="ttdoc">Returns the number of childrem of this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00410">Nodes.cpp:410</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a85ca5b04a1d4d196b30004c3e1acaf7e"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a85ca5b04a1d4d196b30004c3e1acaf7e">efd::QModule::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; QModule &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00016">QModule.h:16</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_ab9c1264648ba0395505dc5b54358c0a9"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#ab9c1264648ba0395505dc5b54358c0a9">efd::IsCNOTGateCall</a></div><div class="ttdeci">bool IsCNOTGateCall(Node::Ref ref)</div><div class="ttdoc">Returns whether ref is a CNOT gate. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d0c/Utils_8cpp_source.xhtml#l00101">Utils.cpp:101</a></div></div>
<div class="ttc" id="classefd_1_1SemanticVerifierPass_xhtml_a9405f056dece69c89fd116d2870e5808"><div class="ttname"><a href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a9405f056dece69c89fd116d2870e5808">efd::SemanticVerifierPass::SemanticVerifierPass</a></div><div class="ttdeci">SemanticVerifierPass(QModule::uRef src, Mapping initial)</div><div class="ttdoc">Constructs a verifier from a clone of the original semantics (the src QModule). </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d49/SemanticVerifierPass_8cpp_source.xhtml#l00349">SemanticVerifierPass.cpp:349</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpGen_xhtml_a287cbca5c6c5fbf565ac32f435030eaca06d08c07a567eac8a58914ef691dc9f8"><div class="ttname"><a href="../../d2/dff/classefd_1_1NDQOpGen.xhtml#a287cbca5c6c5fbf565ac32f435030eaca06d08c07a567eac8a58914ef691dc9f8">efd::NDQOpGen::K_INTRINSIC_SWAP</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00936">Nodes.h:936</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="../../d8/dcc/namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d62/EnumString_8h_source.xhtml#l00051">EnumString.h:51</a></div></div>
<div class="ttc" id="classefd_1_1NDQOp_xhtml"><div class="ttname"><a href="../../dd/d94/classefd_1_1NDQOp.xhtml">efd::NDQOp</a></div><div class="ttdoc">Generic node for quantum operations. This is also the base node for the other quantum gates...</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00577">Nodes.h:577</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpBarrier_xhtml"><div class="ttname"><a href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">efd::NDQOpBarrier</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00658">Nodes.h:658</a></div></div>
<div class="ttc" id="Utils_8h_xhtml"><div class="ttname"><a href="../../d9/ded/Utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="NodeVisitor_8h_xhtml"><div class="ttname"><a href="../../d0/d8d/NodeVisitor_8h.xhtml">NodeVisitor.h</a></div></div>
<div class="ttc" id="classefd_1_1NDValue_xhtml_a53ee724a8db3429bf30bb1936ad548b2"><div class="ttname"><a href="../../df/d1b/classefd_1_1NDValue.xhtml#a53ee724a8db3429bf30bb1936ad548b2">efd::NDValue::getVal</a></div><div class="ttdeci">T getVal() const</div><div class="ttdoc">Returns a copy to the setted value. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l01023">Nodes.h:1023</a></div></div>
<div class="ttc" id="classefd_1_1SemanticVerifierPass_xhtml_a508cc5a952508151456eb9796cc42e51"><div class="ttname"><a href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a508cc5a952508151456eb9796cc42e51">efd::SemanticVerifierPass::run</a></div><div class="ttdeci">bool run(QModule *dst) override</div><div class="ttdoc">Runs the pass in the given QModule and returns true if it has modified qmod. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d49/SemanticVerifierPass_8cpp_source.xhtml#l00354">SemanticVerifierPass.cpp:354</a></div></div>
<div class="ttc" id="classefd_1_1NDIfStmt_xhtml"><div class="ttname"><a href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">efd::NDIfStmt</a></div><div class="ttdoc">Node for conditional statement. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00968">Nodes.h:968</a></div></div>
<div class="ttc" id="classefd_1_1NDIfStmt_xhtml_a5ec6f243aee6d4fe8988885ea9c449de"><div class="ttname"><a href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml#a5ec6f243aee6d4fe8988885ea9c449de">efd::NDIfStmt::getCondId</a></div><div class="ttdeci">NDId::Ref getCondId() const</div><div class="ttdoc">Gets the id inside the conditional. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00527">Nodes.cpp:527</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpGen_xhtml_abbd4435ec926c38719e8af49bb89af6d"><div class="ttname"><a href="../../d2/dff/classefd_1_1NDQOpGen.xhtml#abbd4435ec926c38719e8af49bb89af6d">efd::NDQOpGen::getIntrinsicKind</a></div><div class="ttdeci">IntrinsicKind getIntrinsicKind() const</div><div class="ttdoc">Returns the intrinsic kind of this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l01148">Nodes.cpp:1148</a></div></div>
<div class="ttc" id="InlineAllPass_8h_xhtml"><div class="ttname"><a href="../../d4/d61/InlineAllPass_8h.xhtml">InlineAllPass.h</a></div></div>
<div class="ttc" id="PassCache_8h_xhtml"><div class="ttname"><a href="../../db/d82/PassCache_8h.xhtml">PassCache.h</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_aa3dc820bf243cb3f06c6e6155e853888"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#aa3dc820bf243cb3f06c6e6155e853888">efd::XbitToNumber::getRegUIds</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; getRegUIds(std::string id) const</div><div class="ttdoc">Returns a list of uids that relate to a given register. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00021">XbitToNumberPass.cpp:21</a></div></div>
<div class="ttc" id="CircuitGraphBuilderPass_8h_xhtml"><div class="ttname"><a href="../../d8/d9b/CircuitGraphBuilderPass_8h.xhtml">CircuitGraphBuilderPass.h</a></div></div>
<div class="ttc" id="classefd_1_1SemanticVerifierVisitor_xhtml_a86039a3146e835b2681b4ad34208b27b"><div class="ttname"><a href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a86039a3146e835b2681b4ad34208b27b">efd::SemanticVerifierVisitor::visit</a></div><div class="ttdeci">void visit(NDQOpMeasure::Ref ref) override</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d49/SemanticVerifierPass_8cpp_source.xhtml#l00287">SemanticVerifierPass.cpp:287</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpMeasure_xhtml_addcc5fd8d95d5790f75b643e88e76c7e"><div class="ttname"><a href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml#addcc5fd8d95d5790f75b643e88e76c7e">efd::NDQOpMeasure::getCBit</a></div><div class="ttdeci">Node::Ref getCBit() const</div><div class="ttdoc">Gets the cbit node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l01025">Nodes.cpp:1025</a></div></div>
<div class="ttc" id="classefd_1_1SemanticVerifierPass_xhtml_a9e6835f24f7765ada488f4981620baee"><div class="ttname"><a href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#a9e6835f24f7765ada488f4981620baee">efd::SemanticVerifierPass::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; SemanticVerifierPass &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d69/SemanticVerifierPass_8h_source.xhtml#l00019">SemanticVerifierPass.h:19</a></div></div>
<div class="ttc" id="classefd_1_1NDQOp_xhtml_af7ef43289355c5bb047a46419177c8ed"><div class="ttname"><a href="../../dd/d94/classefd_1_1NDQOp.xhtml#af7ef43289355c5bb047a46419177c8ed">efd::NDQOp::getQArgs</a></div><div class="ttdeci">NDList::Ref getQArgs() const</div><div class="ttdoc">Gets the quantum arguments. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00909">Nodes.cpp:909</a></div></div>
<div class="ttc" id="classefd_1_1NDIfStmt_xhtml_ae5c408d49862e644f1d299ab5b2f121d"><div class="ttname"><a href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml#ae5c408d49862e644f1d299ab5b2f121d">efd::NDIfStmt::getQOp</a></div><div class="ttdeci">NDQOp::Ref getQOp() const</div><div class="ttdoc">Gets the qop. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00543">Nodes.cpp:543</a></div></div>
<div class="ttc" id="classefd_1_1SemanticVerifierPass_xhtml_ab98adda73b3133ef1fed5952a350ca15"><div class="ttname"><a href="../../d6/dd7/classefd_1_1SemanticVerifierPass.xhtml#ab98adda73b3133ef1fed5952a350ca15">efd::SemanticVerifierPass::Create</a></div><div class="ttdeci">static uRef Create(QModule::uRef src, Mapping initial)</div><div class="ttdoc">Create a dynamic instance of this class. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d49/SemanticVerifierPass_8cpp_source.xhtml#l00389">SemanticVerifierPass.cpp:389</a></div></div>
<div class="ttc" id="classefd_1_1CircuitGraph_1_1Iterator_xhtml_a53e088602bfc10b1de2a681b93cff134"><div class="ttname"><a href="../../d7/d0b/classefd_1_1CircuitGraph_1_1Iterator.xhtml#a53e088602bfc10b1de2a681b93cff134">efd::CircuitGraph::Iterator::next</a></div><div class="ttdeci">bool next(Xbit xbit)</div><div class="ttdoc">Advances the bit xbit. </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/dce/CircuitGraph_8cpp_source.xhtml#l00127">CircuitGraph.cpp:127</a></div></div>
<div class="ttc" id="classefd_1_1PassT_xhtml_a5b6a7296f64c3ae0dd8ad9f528b11ed0"><div class="ttname"><a href="../../db/d56/classefd_1_1PassT.xhtml#a5b6a7296f64c3ae0dd8ad9f528b11ed0">efd::PassT&lt; bool &gt;::mData</a></div><div class="ttdeci">bool mData</div><div class="ttdef"><b>Definition:</b> <a href="../../df/d29/Pass_8h_source.xhtml#l00047">Pass.h:47</a></div></div>
<div class="ttc" id="classefd_1_1SemanticVerifierVisitor_xhtml_af2e365593beb3100fac2c26a4d56395c"><div class="ttname"><a href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#af2e365593beb3100fac2c26a4d56395c">efd::SemanticVerifierVisitor::SemanticVerifierVisitor</a></div><div class="ttdeci">SemanticVerifierVisitor(XbitToNumber &amp;xtonsrc, XbitToNumber &amp;xtontgt, CircuitGraph::Iterator &amp;it, Mapping initial)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d49/SemanticVerifierPass_8cpp_source.xhtml#l00075">SemanticVerifierPass.cpp:75</a></div></div>
<div class="ttc" id="classefd_1_1SemanticVerifierVisitor_xhtml_a44a6f41dd7e11f957ee8f509d33a8893"><div class="ttname"><a href="../../d2/de5/classefd_1_1SemanticVerifierVisitor.xhtml#a44a6f41dd7e11f957ee8f509d33a8893">efd::SemanticVerifierVisitor::mSuccess</a></div><div class="ttdeci">bool mSuccess</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d49/SemanticVerifierPass_8cpp_source.xhtml#l00071">SemanticVerifierPass.cpp:71</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_ac00e1eb93f94c00db1e6a661d8f95d9d"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#ac00e1eb93f94c00db1e6a661d8f95d9d">efd::QModule::stmt_begin</a></div><div class="ttdeci">Iterator stmt_begin()</div><div class="ttdoc">Iterator to the beginning of the statement node vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00218">QModule.cpp:218</a></div></div>
<div class="ttc" id="classefd_1_1InlineAllPass_xhtml_a39637a556c08bf458f9bf20812d11470"><div class="ttname"><a href="../../d5/de3/classefd_1_1InlineAllPass.xhtml#a39637a556c08bf458f9bf20812d11470">efd::InlineAllPass::Create</a></div><div class="ttdeci">static uRef Create(std::vector&lt; std::string &gt; basis=std::vector&lt; std::string &gt;())</div><div class="ttdoc">Creates an instance of this pass. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d93/InlineAllPass_8cpp_source.xhtml#l00062">InlineAllPass.cpp:62</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a1f91f26f141eb5b2dd549121451a786c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">efd::InverseMap</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; InverseMap</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00012">Defs.h:12</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a685e3afd76819bc134a3dfdd44c9e4e9ab39d20266cc0612b52ed96575e06809a">efd::ExitCode::EXIT_unreachable</a></div></div>
<div class="ttc" id="Defs_8h_xhtml"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml">Defs.h</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_ae645e4b0ccb9c25c534883843484f06a"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae645e4b0ccb9c25c534883843484f06a">efd::XbitToNumber::getQUId</a></div><div class="ttdeci">uint32_t getQUId(std::string id, NDGateDecl::Ref gate=nullptr) const</div><div class="ttdoc">Returns an uint32_t number representing the qubit in this specific gate (if any). ...</div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00030">XbitToNumberPass.cpp:30</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpMeasure_xhtml"><div class="ttname"><a href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">efd::NDQOpMeasure</a></div><div class="ttdoc">NDQOp specialized for measure operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00681">Nodes.h:681</a></div></div>
<div class="ttc" id="classefd_1_1CircuitGraph_1_1Iterator_xhtml"><div class="ttname"><a href="../../d7/d0b/classefd_1_1CircuitGraph_1_1Iterator.xhtml">efd::CircuitGraph::Iterator</a></div><div class="ttdoc">Abstracts the iteration of the CircuitGraph. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/da6/CircuitGraph_8h_source.xhtml#l00089">CircuitGraph.h:89</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpGen_xhtml_a00f1b64c13766964893ec0cdb42bafdf"><div class="ttname"><a href="../../d2/dff/classefd_1_1NDQOpGen.xhtml#a00f1b64c13766964893ec0cdb42bafdf">efd::NDQOpGen::isIntrinsic</a></div><div class="ttdeci">bool isIntrinsic() const</div><div class="ttdoc">Returns whether this node is in an intrinsic node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l01157">Nodes.cpp:1157</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a12a4775008cb8b6242cedc3621d98f9c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">efd::Mapping</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Mapping</div><div class="ttdoc">Defines the type used for mapping the qubits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00011">Defs.h:11</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpCX_xhtml"><div class="ttname"><a href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">efd::NDQOpCX</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00744">Nodes.h:744</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml_ae9f84f1119a80e918cc3b3fd916a5922"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml#ae9f84f1119a80e918cc3b3fd916a5922">efd::XbitToNumber::getCUId</a></div><div class="ttdeci">uint32_t getCUId(std::string id) const</div><div class="ttdoc">Returns an uint32_t number representing the classic bit;. </div><div class="ttdef"><b>Definition:</b> <a href="../../de/de8/XbitToNumberPass_8cpp_source.xhtml#l00041">XbitToNumberPass.cpp:41</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
