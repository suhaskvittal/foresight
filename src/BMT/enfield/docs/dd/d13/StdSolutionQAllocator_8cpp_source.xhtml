<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Transform/Allocators/StdSolutionQAllocator.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_582f290f049f08c25ab9fc887a9170ac.xhtml">Transform</a></li><li class="navelem"><a class="el" href="../../dir_06974191db7fbe66527a95ceac77ccfb.xhtml">Allocators</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">StdSolutionQAllocator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../dd/d13/StdSolutionQAllocator_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d2/dc7/StdSolutionQAllocator_8h.xhtml">enfield/Transform/Allocators/StdSolutionQAllocator.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/df0/RenameQbitsPass_8h.xhtml">enfield/Transform/RenameQbitsPass.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d4/d61/InlineAllPass_8h.xhtml">enfield/Transform/InlineAllPass.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/d82/PassCache_8h.xhtml">enfield/Transform/PassCache.h</a>&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d9/ded/Utils_8h.xhtml">enfield/Transform/Utils.h</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d0/d8d/NodeVisitor_8h.xhtml">enfield/Analysis/NodeVisitor.h</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d5/dfc/RTTI_8h.xhtml">enfield/Support/RTTI.h</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../dc/d09/uRefCast_8h.xhtml">enfield/Support/uRefCast.h</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">using namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a>;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">// ------------------ StdSolution Implementer ----------------------</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../d4/deb/namespaceefd.xhtml">efd</a> {</div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml">   14</a></span>&#160;    <span class="keyword">class </span><a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml">StdSolutionImplPass</a> : <span class="keyword">public</span> <a class="code" href="../../db/d56/classefd_1_1PassT.xhtml">PassT</a>&lt;void&gt;, <span class="keyword">public</span> <a class="code" href="../../d8/d5d/classefd_1_1NodeVisitor.xhtml">NodeVisitor</a> {</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;            <a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml">StdSolution</a>&amp; mData;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;            <a class="code" href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">XbitToNumber</a> mXbitToNumber;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;            std::vector&lt;Node::Ref&gt; mMap;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;            std::unordered_map&lt;Node::Ref, std::vector&lt;Node::uRef&gt;&gt; mReplVector;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;            uint32_t mDepIdx;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">Node::uRef</a> getMappedNode(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">Node::uRef</a> wrapWithIfNode(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">Node::uRef</a> ref, <a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ifstmt);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            <span class="keywordtype">void</span> applyOperations(<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a> ref, <a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ifstmt = <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#a131f952b9b7a30b5e05de6e466240be4">   33</a></span>&#160;            <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#a131f952b9b7a30b5e05de6e466240be4">StdSolutionImplPass</a>(<a class="code" href="../../db/d36/structefd_1_1StdSolution.xhtml">StdSolution</a>&amp; sol) : mData(sol) {}</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keywordtype">bool</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#a07f9516d50b8bb71138196415c5860d5">run</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod) <span class="keyword">override</span>;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">visit</a>(<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">NDQOpMeasure::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">visit</a>(<a class="code" href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">NDQOpReset::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">visit</a>(<a class="code" href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">NDQOpU::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">visit</a>(<a class="code" href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">NDQOpBarrier::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">visit</a>(<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">visit</a>(<a class="code" href="../../da/ddd/classefd_1_1NDList.xhtml">NDList::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">visit</a>(<a class="code" href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">NDQOpCX::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">visit</a>(<a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">NDQOpGen::Ref</a> ref) <span class="keyword">override</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    };</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">efd::Node::uRef</a> efd::StdSolutionImplPass::getMappedNode(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> ref) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    uint32_t <span class="keywordtype">id</span> = mXbitToNumber.getQUId(ref-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">toString</a>());</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> mMap[id]-&gt;clone();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">efd::Node::uRef</a> efd::StdSolutionImplPass::wrapWithIfNode</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;(<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">Node::uRef</a> ref, <a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ifstmt) {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">if</span> (ifstmt != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">auto</span> ifclone = uniqueCastForward&lt;NDIfStmt&gt;(ifstmt-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a6c85c9bd21014b73497de741cc75f706">clone</a>());</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        ifclone-&gt;setQOp(uniqueCastForward&lt;NDQOp&gt;(std::move(ref)));</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        ref = std::move(ifclone);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> ref;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keywordtype">void</span> efd::StdSolutionImplPass::applyOperations(<a class="code" href="../../dd/d94/classefd_1_1NDQOp.xhtml">NDQOp::Ref</a> qop, <a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ifstmt) {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordtype">bool</span> stillHasOpSeqs = mDepIdx &lt; mData.mOpSeqs.size();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">bool</span> isIfStmtAndHasOp = ifstmt &amp;&amp; stillHasOpSeqs &amp;&amp; ifstmt == mData.mOpSeqs[mDepIdx].first;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordtype">bool</span> isQOpAndHasOp = !ifstmt &amp;&amp; stillHasOpSeqs &amp;&amp; qop == mData.mOpSeqs[mDepIdx].first;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">if</span> (isIfStmtAndHasOp || isQOpAndHasOp) {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">auto</span>&amp; ops = mData.mOpSeqs[mDepIdx].second;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        ++mDepIdx;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml">Node::Ref</a> key = ifstmt;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">if</span> (key == <span class="keyword">nullptr</span>) { key = qop; }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        mReplVector[key] = std::vector&lt;Node::uRef&gt;();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; op : ops) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">switch</span> (op.mK) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">Operation::K_OP_CNOT</a>:</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        <span class="keyword">auto</span> clone = uniqueCastForward&lt;NDQOp&gt;(qop-&gt;clone());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                        clone-&gt;getQArgs()-&gt;apply(<span class="keyword">this</span>);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                        mReplVector[key].push_back(wrapWithIfNode(std::move(clone), ifstmt));</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">Operation::K_OP_SWAP</a>:</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    mReplVector[key].push_back(</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                            <a class="code" href="../../d4/deb/namespaceefd.xhtml#ad83c1dbaa41519964485ea8e2437bcb7">efd::CreateISwap</a>(mMap[op.mU]-&gt;clone(), mMap[op.mV]-&gt;clone()));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    std::swap(mMap[op.mU], mMap[op.mV]);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">Operation::K_OP_REV</a>:</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                        <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">Node::uRef</a> call = <a class="code" href="../../d4/deb/namespaceefd.xhtml#af8e947f977669e54d6aaf3a43815833c">efd::CreateIRevCX</a>(</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                    mMap[op.mU]-&gt;clone(),</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                    mMap[op.mV]-&gt;clone());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                        mReplVector[key].push_back(wrapWithIfNode(std::move(call), ifstmt));</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a20b669183f13598bd8a76a795be32afb">Operation::K_OP_LCNOT</a>:</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        <a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">Node::uRef</a> call = <a class="code" href="../../d4/deb/namespaceefd.xhtml#a3c72243a170ffe8a4836e7092fd1469f">efd::CreateILongCX</a>(</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                    mMap[op.mU]-&gt;clone(), </div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                    mMap[op.mW]-&gt;clone(), </div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                    mMap[op.mV]-&gt;clone());</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        mReplVector[key].push_back(wrapWithIfNode(std::move(call), ifstmt));</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">if</span> (ops.empty()) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            qop-&gt;getQArgs()-&gt;apply(<span class="keyword">this</span>);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        qop-&gt;getQArgs()-&gt;apply(<span class="keyword">this</span>);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#a07f9516d50b8bb71138196415c5860d5">  123</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#a07f9516d50b8bb71138196415c5860d5">efd::StdSolutionImplPass::run</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a> &lt;&lt; <span class="stringliteral">&quot;Initial Configuration: &quot;</span> &lt;&lt; <a class="code" href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">MappingToString</a>(mData.mInitial) &lt;&lt; std::endl;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">auto</span> xtonpass = PassCache::Get&lt;XbitToNumberWrapperPass&gt;(qmod);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    mXbitToNumber = xtonpass-&gt;getData();</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    mMap.assign(mXbitToNumber.getQSize(), <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = mXbitToNumber.getQSize(); i &lt; e; ++i) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        mMap[i] = mXbitToNumber.getQNode(mData.mInitial[i]);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    mDepIdx = 0;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#ac00e1eb93f94c00db1e6a661d8f95d9d">stmt_begin</a>(), end = qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#a23d45e3b6c65d5fa14b199da8b0617c7">stmt_end</a>(); it != end; ++it) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        (*it)-&gt;apply(<span class="keyword">this</span>);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; pair : mReplVector) {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">if</span> (!pair.second.empty())</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            qmod-&gt;<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml#abaf0b3dd099e4b098b89772b6a134d07">replaceStatement</a>(pair.first, std::move(pair.second));</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">  147</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">efd::StdSolutionImplPass::visit</a>(<a class="code" href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">NDQOpMeasure::Ref</a> ref) {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    applyOperations(ref);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#ad69136352755b4acf4a0321733ca8646">  151</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">efd::StdSolutionImplPass::visit</a>(<a class="code" href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">NDQOpReset::Ref</a> ref) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    applyOperations(ref);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#a841f19ecee69beae7eaf89f71f9b0d99">  155</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">efd::StdSolutionImplPass::visit</a>(<a class="code" href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">NDQOpU::Ref</a> ref) {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    applyOperations(ref);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#a93689ee9e882310aa36909dd115eaec4">  159</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">efd::StdSolutionImplPass::visit</a>(<a class="code" href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">NDQOpBarrier::Ref</a> ref) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    applyOperations(ref);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#a0542cf9a4daeacec9efc676babf28848">  163</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">efd::StdSolutionImplPass::visit</a>(<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">NDIfStmt::Ref</a> ref) {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    applyOperations(ref-&gt;<a class="code" href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml#ae5c408d49862e644f1d299ab5b2f121d">getQOp</a>(), ref);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#ad4069ffd0c6cbe298ed541d867444908">  167</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">efd::StdSolutionImplPass::visit</a>(<a class="code" href="../../da/ddd/classefd_1_1NDList.xhtml">NDList::Ref</a> ref) {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0, e = ref-&gt;<a class="code" href="../../da/ddd/classefd_1_1NDList.xhtml#a7d1b691a45689241a8138539a2be8596">getChildNumber</a>(); i &lt; e; ++i) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        ref-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#aad4510814ff15bd26fe2f95f9d2a2279">setChild</a>(i, getMappedNode(ref-&gt;<a class="code" href="../../d6/d6a/classefd_1_1Node.xhtml#a63e30243eca03b0c85d8c4856e91c79d">getChild</a>(i)));</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#ae065c613e44520b37343ecd5586085d1">  173</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">efd::StdSolutionImplPass::visit</a>(<a class="code" href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">NDQOpCX::Ref</a> ref) {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    applyOperations(ref);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#a73dbfdfeeabf658289b57a0d839589b4">  177</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">efd::StdSolutionImplPass::visit</a>(<a class="code" href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">NDQOpGen::Ref</a> ref) {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    applyOperations(ref);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">// ------------------ StdSolutionQAllocator ----------------------</span></div><div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml#a818f0c94e110af6922b00b837bf86de1">  182</a></span>&#160;<a class="code" href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml#a818f0c94e110af6922b00b837bf86de1">StdSolutionQAllocator::StdSolutionQAllocator</a>(<a class="code" href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">ArchGraph::sRef</a> archGraph)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    : <a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml">QbitAllocator</a>(archGraph) {}</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml#a59bdf9173361a3c23fbdb862d8e2b6f6">  185</a></span>&#160;<a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> <a class="code" href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml#a59bdf9173361a3c23fbdb862d8e2b6f6">StdSolutionQAllocator::allocate</a>(<a class="code" href="../../dd/d52/classefd_1_1QModule.xhtml">QModule::Ref</a> qmod) {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">auto</span> stdSolution = <a class="code" href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml#aa1042f6f04230141a91642fa70cd8129">buildStdSolution</a>(qmod);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml">StdSolutionImplPass</a> pass(stdSolution);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <a class="code" href="../../d1/df9/classefd_1_1PassCache.xhtml#acb82213b8e43f26fdca8266be3cc4c7c">PassCache::Run</a>(<a class="code" href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a85958f7018c9dc1b6710420712399065">mMod</a>, &amp;pass);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">return</span> stdSolution.mInitial;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div><div class="ttc" id="classefd_1_1NodeVisitor_xhtml"><div class="ttname"><a href="../../d8/d5d/classefd_1_1NodeVisitor.xhtml">efd::NodeVisitor</a></div><div class="ttdoc">Interface class to be used as a visitor. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d8d/NodeVisitor_8h_source.xhtml#l00009">NodeVisitor.h:9</a></div></div>
<div class="ttc" id="classefd_1_1PassCache_xhtml_acb82213b8e43f26fdca8266be3cc4c7c"><div class="ttname"><a href="../../d1/df9/classefd_1_1PassCache.xhtml#acb82213b8e43f26fdca8266be3cc4c7c">efd::PassCache::Run</a></div><div class="ttdeci">static void Run(QModule::Ref qmod)</div><div class="ttdoc">Runs the pass T in qmod. </div><div class="ttdef"><b>Definition:</b> <a href="../../db/d82/PassCache_8h_source.xhtml#l00047">PassCache.h:47</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adf6090959dc5eaaa4fe429aa4c4bfe06">efd::Operation::K_OP_REV</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00016">StdSolutionQAllocator.h:16</a></div></div>
<div class="ttc" id="classefd_1_1StdSolutionImplPass_xhtml"><div class="ttname"><a href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml">efd::StdSolutionImplPass</a></div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d13/StdSolutionQAllocator_8cpp_source.xhtml#l00014">StdSolutionQAllocator.cpp:14</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a6c85c9bd21014b73497de741cc75f706"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a6c85c9bd21014b73497de741cc75f706">efd::Node::clone</a></div><div class="ttdeci">Node::uRef clone() const</div><div class="ttdoc">Clones the current node (deep copy). </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00114">Nodes.cpp:114</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a63e30243eca03b0c85d8c4856e91c79d"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a63e30243eca03b0c85d8c4856e91c79d">efd::Node::getChild</a></div><div class="ttdeci">Ref getChild(uint32_t i) const</div><div class="ttdoc">Gets the i-th child. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00021">Nodes.cpp:21</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpGen_xhtml"><div class="ttname"><a href="../../d2/dff/classefd_1_1NDQOpGen.xhtml">efd::NDQOpGen</a></div><div class="ttdoc">NDQOp specialized for generic gates. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00930">Nodes.h:930</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_abaf0b3dd099e4b098b89772b6a134d07"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#abaf0b3dd099e4b098b89772b6a134d07">efd::QModule::replaceStatement</a></div><div class="ttdeci">Iterator replaceStatement(Node::Ref stmt, std::vector&lt; Node::uRef &gt; stmts)</div><div class="ttdoc">Replaces the stmt by the vector stmts. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00113">QModule.cpp:113</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpReset_xhtml"><div class="ttname"><a href="../../d0/dd2/classefd_1_1NDQOpReset.xhtml">efd::NDQOpReset</a></div><div class="ttdoc">NDQOp specialized for reset operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00630">Nodes.h:630</a></div></div>
<div class="ttc" id="RenameQbitsPass_8h_xhtml"><div class="ttname"><a href="../../d1/df0/RenameQbitsPass_8h.xhtml">RenameQbitsPass.h</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a3c72243a170ffe8a4836e7092fd1469f"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a3c72243a170ffe8a4836e7092fd1469f">efd::CreateILongCX</a></div><div class="ttdeci">NDQOp::uRef CreateILongCX(Node::uRef lhs, Node::uRef middle, Node::uRef rhs)</div><div class="ttdoc">Creates a call to the intrinsic long cnot function. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d0c/Utils_8cpp_source.xhtml#l00187">Utils.cpp:187</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_aac5a20e6db5d358cf72d4816441d0b0d"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#aac5a20e6db5d358cf72d4816441d0b0d">efd::MappingToString</a></div><div class="ttdeci">std::string MappingToString(Mapping m)</div><div class="ttdoc">Prints the mapping m to a string and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="../../d0/d91/QbitAllocator_8cpp_source.xhtml#l00077">QbitAllocator.cpp:77</a></div></div>
<div class="ttc" id="classefd_1_1StdSolutionImplPass_xhtml_a07f9516d50b8bb71138196415c5860d5"><div class="ttname"><a href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#a07f9516d50b8bb71138196415c5860d5">efd::StdSolutionImplPass::run</a></div><div class="ttdeci">bool run(QModule::Ref qmod) override</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d13/StdSolutionQAllocator_8cpp_source.xhtml#l00123">StdSolutionQAllocator.cpp:123</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_a23d45e3b6c65d5fa14b199da8b0617c7"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#a23d45e3b6c65d5fa14b199da8b0617c7">efd::QModule::stmt_end</a></div><div class="ttdeci">Iterator stmt_end()</div><div class="ttdoc">Iterator to the end of the statement node vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00226">QModule.cpp:226</a></div></div>
<div class="ttc" id="classefd_1_1StdSolutionQAllocator_xhtml_a818f0c94e110af6922b00b837bf86de1"><div class="ttname"><a href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml#a818f0c94e110af6922b00b837bf86de1">efd::StdSolutionQAllocator::StdSolutionQAllocator</a></div><div class="ttdeci">StdSolutionQAllocator(ArchGraph::sRef archGraph)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d13/StdSolutionQAllocator_8cpp_source.xhtml#l00182">StdSolutionQAllocator.cpp:182</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml">efd::QModule</a></div><div class="ttdoc">Qasm module representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d73/QModule_8h_source.xhtml#l00013">QModule.h:13</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3a20b669183f13598bd8a76a795be32afb"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a20b669183f13598bd8a76a795be32afb">efd::Operation::K_OP_LCNOT</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00017">StdSolutionQAllocator.h:17</a></div></div>
<div class="ttc" id="structefd_1_1XbitToNumber_xhtml"><div class="ttname"><a href="../../db/d0c/structefd_1_1XbitToNumber.xhtml">efd::XbitToNumber</a></div><div class="ttdoc">Maps every quantum and classic bit (not register) to a number inside a vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d6/d94/XbitToNumberPass_8h_source.xhtml#l00023">XbitToNumberPass.h:23</a></div></div>
<div class="ttc" id="classefd_1_1PassT_xhtml"><div class="ttname"><a href="../../db/d56/classefd_1_1PassT.xhtml">efd::PassT</a></div><div class="ttdoc">Should serve as base class for classes that produces some data of type T. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d29/Pass_8h_source.xhtml#l00040">Pass.h:40</a></div></div>
<div class="ttc" id="namespaceefd_xhtml"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml">efd</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d6e/Architectures_8cpp_source.xhtml#l00005">Architectures.cpp:5</a></div></div>
<div class="ttc" id="classefd_1_1StdSolutionQAllocator_xhtml_a59bdf9173361a3c23fbdb862d8e2b6f6"><div class="ttname"><a href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml#a59bdf9173361a3c23fbdb862d8e2b6f6">efd::StdSolutionQAllocator::allocate</a></div><div class="ttdeci">Mapping allocate(QModule::Ref qmod) override</div><div class="ttdoc">Executes the allocation algorithm after the preprocessing. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d13/StdSolutionQAllocator_8cpp_source.xhtml#l00185">StdSolutionQAllocator.cpp:185</a></div></div>
<div class="ttc" id="RTTI_8h_xhtml"><div class="ttname"><a href="../../d5/dfc/RTTI_8h.xhtml">RTTI.h</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a96ca13a5c2b971b68619ce4a34be0f66"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a96ca13a5c2b971b68619ce4a34be0f66">efd::Node::toString</a></div><div class="ttdeci">virtual std::string toString(bool pretty=false) const =0</div><div class="ttdoc">Returns a std::string representation of this Node and its childrem. </div></div>
<div class="ttc" id="structefd_1_1StdSolution_xhtml"><div class="ttname"><a href="../../db/d36/structefd_1_1StdSolution.xhtml">efd::StdSolution</a></div><div class="ttdoc">The solution for the allocation problem. </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00031">StdSolutionQAllocator.h:31</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpU_xhtml"><div class="ttname"><a href="../../d7/dbe/classefd_1_1NDQOpU.xhtml">efd::NDQOpU</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00716">Nodes.h:716</a></div></div>
<div class="ttc" id="classefd_1_1NDList_xhtml_a7d1b691a45689241a8138539a2be8596"><div class="ttname"><a href="../../da/ddd/classefd_1_1NDList.xhtml#a7d1b691a45689241a8138539a2be8596">efd::NDList::getChildNumber</a></div><div class="ttdeci">uint32_t getChildNumber() const override</div><div class="ttdoc">Returns the number of childrem of this node. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00410">Nodes.cpp:410</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_a494a2123de6024d1057cf773acda5f25"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#a494a2123de6024d1057cf773acda5f25">efd::Node::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; Node &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00042">Nodes.h:42</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml_a85958f7018c9dc1b6710420712399065"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml#a85958f7018c9dc1b6710420712399065">efd::QbitAllocator::mMod</a></div><div class="ttdeci">QModule::Ref mMod</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00036">QbitAllocator.h:36</a></div></div>
<div class="ttc" id="classefd_1_1ArchGraph_xhtml_a8c9131ca43a772179c24fa4dc9701bb2"><div class="ttname"><a href="../../d5/dae/classefd_1_1ArchGraph.xhtml#a8c9131ca43a772179c24fa4dc9701bb2">efd::ArchGraph::sRef</a></div><div class="ttdeci">std::shared_ptr&lt; ArchGraph &gt; sRef</div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d9d/ArchGraph_8h_source.xhtml#l00014">ArchGraph.h:14</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml">efd::Node</a></div><div class="ttdoc">Base class for AST nodes. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00039">Nodes.h:39</a></div></div>
<div class="ttc" id="classefd_1_1NDQOp_xhtml"><div class="ttname"><a href="../../dd/d94/classefd_1_1NDQOp.xhtml">efd::NDQOp</a></div><div class="ttdoc">Generic node for quantum operations. This is also the base node for the other quantum gates...</div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00577">Nodes.h:577</a></div></div>
<div class="ttc" id="classefd_1_1Node_xhtml_aad4510814ff15bd26fe2f95f9d2a2279"><div class="ttname"><a href="../../d6/d6a/classefd_1_1Node.xhtml#aad4510814ff15bd26fe2f95f9d2a2279">efd::Node::setChild</a></div><div class="ttdeci">void setChild(uint32_t i, uRef ref)</div><div class="ttdoc">Sets the i-th child. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00025">Nodes.cpp:25</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_ad83c1dbaa41519964485ea8e2437bcb7"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#ad83c1dbaa41519964485ea8e2437bcb7">efd::CreateISwap</a></div><div class="ttdeci">NDQOp::uRef CreateISwap(Node::uRef lhs, Node::uRef rhs)</div><div class="ttdoc">Creates a call to the intrinsic swap function. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d0c/Utils_8cpp_source.xhtml#l00181">Utils.cpp:181</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpBarrier_xhtml"><div class="ttname"><a href="../../d2/d2a/classefd_1_1NDQOpBarrier.xhtml">efd::NDQOpBarrier</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00658">Nodes.h:658</a></div></div>
<div class="ttc" id="Utils_8h_xhtml"><div class="ttname"><a href="../../d9/ded/Utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="NodeVisitor_8h_xhtml"><div class="ttname"><a href="../../d0/d8d/NodeVisitor_8h.xhtml">NodeVisitor.h</a></div></div>
<div class="ttc" id="classefd_1_1NDIfStmt_xhtml"><div class="ttname"><a href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml">efd::NDIfStmt</a></div><div class="ttdoc">Node for conditional statement. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00968">Nodes.h:968</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3a46bb7ba2b32ce435a8ffafb2bab56671">efd::Operation::K_OP_SWAP</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00018">StdSolutionQAllocator.h:18</a></div></div>
<div class="ttc" id="structefd_1_1Operation_xhtml_a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c"><div class="ttname"><a href="../../dc/d90/structefd_1_1Operation.xhtml#a010c1fff81b57b9b0ed92619855ce7e3adfad524e27630088f14e4334a0ed385c">efd::Operation::K_OP_CNOT</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/dc7/StdSolutionQAllocator_8h_source.xhtml#l00015">StdSolutionQAllocator.h:15</a></div></div>
<div class="ttc" id="InlineAllPass_8h_xhtml"><div class="ttname"><a href="../../d4/d61/InlineAllPass_8h.xhtml">InlineAllPass.h</a></div></div>
<div class="ttc" id="classefd_1_1StdSolutionImplPass_xhtml_af9dfa6e03f52f3d82fe618144ce9dabd"><div class="ttname"><a href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#af9dfa6e03f52f3d82fe618144ce9dabd">efd::StdSolutionImplPass::visit</a></div><div class="ttdeci">void visit(NDQOpMeasure::Ref ref) override</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d13/StdSolutionQAllocator_8cpp_source.xhtml#l00147">StdSolutionQAllocator.cpp:147</a></div></div>
<div class="ttc" id="PassCache_8h_xhtml"><div class="ttname"><a href="../../db/d82/PassCache_8h.xhtml">PassCache.h</a></div></div>
<div class="ttc" id="classefd_1_1NDIfStmt_xhtml_ae5c408d49862e644f1d299ab5b2f121d"><div class="ttname"><a href="../../dc/d9d/classefd_1_1NDIfStmt.xhtml#ae5c408d49862e644f1d299ab5b2f121d">efd::NDIfStmt::getQOp</a></div><div class="ttdeci">NDQOp::Ref getQOp() const</div><div class="ttdoc">Gets the qop. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d89/Nodes_8cpp_source.xhtml#l00543">Nodes.cpp:543</a></div></div>
<div class="ttc" id="classefd_1_1StdSolutionImplPass_xhtml_a131f952b9b7a30b5e05de6e466240be4"><div class="ttname"><a href="../../dc/dcc/classefd_1_1StdSolutionImplPass.xhtml#a131f952b9b7a30b5e05de6e466240be4">efd::StdSolutionImplPass::StdSolutionImplPass</a></div><div class="ttdeci">StdSolutionImplPass(StdSolution &amp;sol)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d13/StdSolutionQAllocator_8cpp_source.xhtml#l00033">StdSolutionQAllocator.cpp:33</a></div></div>
<div class="ttc" id="StdSolutionQAllocator_8h_xhtml"><div class="ttname"><a href="../../d2/dc7/StdSolutionQAllocator_8h.xhtml">StdSolutionQAllocator.h</a></div></div>
<div class="ttc" id="classefd_1_1NDList_xhtml"><div class="ttname"><a href="../../da/ddd/classefd_1_1NDList.xhtml">efd::NDList</a></div><div class="ttdoc">Base class for list of nodes. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00331">Nodes.h:331</a></div></div>
<div class="ttc" id="classefd_1_1QModule_xhtml_ac00e1eb93f94c00db1e6a661d8f95d9d"><div class="ttname"><a href="../../dd/d52/classefd_1_1QModule.xhtml#ac00e1eb93f94c00db1e6a661d8f95d9d">efd::QModule::stmt_begin</a></div><div class="ttdeci">Iterator stmt_begin()</div><div class="ttdoc">Iterator to the beginning of the statement node vector. </div><div class="ttdef"><b>Definition:</b> <a href="../../d9/d5d/QModule_8cpp_source.xhtml#l00218">QModule.cpp:218</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_af8e947f977669e54d6aaf3a43815833c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#af8e947f977669e54d6aaf3a43815833c">efd::CreateIRevCX</a></div><div class="ttdeci">NDQOp::uRef CreateIRevCX(Node::uRef lhs, Node::uRef rhs)</div><div class="ttdoc">Creates a call to the intrinsic reversal cnot function. </div><div class="ttdef"><b>Definition:</b> <a href="../../df/d0c/Utils_8cpp_source.xhtml#l00192">Utils.cpp:192</a></div></div>
<div class="ttc" id="classefd_1_1StdSolutionQAllocator_xhtml_aa1042f6f04230141a91642fa70cd8129"><div class="ttname"><a href="../../d6/d8e/classefd_1_1StdSolutionQAllocator.xhtml#aa1042f6f04230141a91642fa70cd8129">efd::StdSolutionQAllocator::buildStdSolution</a></div><div class="ttdeci">virtual StdSolution buildStdSolution(QModule::Ref qmod)=0</div><div class="ttdoc">Executes the allocation algorithm after the preprocessing. </div></div>
<div class="ttc" id="uRefCast_8h_xhtml"><div class="ttname"><a href="../../dc/d09/uRefCast_8h.xhtml">uRefCast.h</a></div></div>
<div class="ttc" id="Defs_8h_xhtml_a12c2040f25d8e3a7b9e1c2024c618cb6"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml#a12c2040f25d8e3a7b9e1c2024c618cb6">INF</a></div><div class="ttdeci">#define INF</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00048">Defs.h:48</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpMeasure_xhtml"><div class="ttname"><a href="../../d4/d64/classefd_1_1NDQOpMeasure.xhtml">efd::NDQOpMeasure</a></div><div class="ttdoc">NDQOp specialized for measure operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00681">Nodes.h:681</a></div></div>
<div class="ttc" id="classefd_1_1QbitAllocator_xhtml"><div class="ttname"><a href="../../de/d5a/classefd_1_1QbitAllocator.xhtml">efd::QbitAllocator</a></div><div class="ttdoc">Base abstract class that allocates the qbits used in the program to the qbits that are in the physica...</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d3b/QbitAllocator_8h_source.xhtml#l00012">QbitAllocator.h:12</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a12a4775008cb8b6242cedc3621d98f9c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">efd::Mapping</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Mapping</div><div class="ttdoc">Defines the type used for mapping the qubits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00011">Defs.h:11</a></div></div>
<div class="ttc" id="classefd_1_1NDQOpCX_xhtml"><div class="ttname"><a href="../../d3/d14/classefd_1_1NDQOpCX.xhtml">efd::NDQOpCX</a></div><div class="ttdoc">NDQOp specialized for barrier operation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/daf/Nodes_8h_source.xhtml#l00744">Nodes.h:744</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
