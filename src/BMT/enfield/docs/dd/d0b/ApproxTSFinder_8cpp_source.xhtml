<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.14"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Enfield: lib/Support/ApproxTSFinder.cpp Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Enfield
   </div>
   <div id="projectbrief">An OpenQASM source-to-source compiler for optimization.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.14 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="../../dir_f0dc79bace318df7ec0fa0bdb179ed95.xhtml">Support</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ApproxTSFinder.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../dd/d0b/ApproxTSFinder_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../db/dfc/ApproxTSFinder_8h.xhtml">enfield/Support/ApproxTSFinder.h</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d6/df7/WeightedGraph_8h.xhtml">enfield/Support/WeightedGraph.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="../../d1/d73/Defs_8h.xhtml">enfield/Support/Defs.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;stack&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// White, gray and black are the usual dfs guys.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">// Silver is for marking when it is already in the stack</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">// (for iterative versions).</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> uint32_t _white  = 0;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> uint32_t _silver = 1;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> uint32_t _gray   = 2;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> uint32_t _black  = 3;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> uint32_t max(uint32_t a, uint32_t b) { <span class="keywordflow">return</span> (a &gt; b) ? a : b; }</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> uint32_t min(uint32_t a, uint32_t b) { <span class="keywordflow">return</span> (a &lt; b) ? a : b; }</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">static</span> uint32_t getUndefVertex(uint32_t start, uint32_t end, std::vector&lt;uint32_t&gt; M) {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = start; i &lt; end; ++i)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <span class="keywordflow">if</span> (M[i] == efd::_undef) <span class="keywordflow">return</span> i;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">return</span> efd::_undef;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;}</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">static</span> std::string VecToString(std::vector&lt;T&gt; v) {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    std::string s = <span class="stringliteral">&quot;[&quot;</span>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    uint32_t sz = v.size();</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; sz; ++i) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        s += <a class="code" href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a>(v[i]);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">if</span> (i != sz - 1) s += <span class="stringliteral">&quot;; &quot;</span>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    s += <span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> s;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> fixUndefAssignments(<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">efd::Graph::Ref</a> graph, </div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">efd::InverseMap</a>&amp; from, <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">efd::InverseMap</a>&amp; to) {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    uint32_t size = graph-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">size</a>();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    std::vector&lt;uint32_t&gt; fromUndefvs;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    std::vector&lt;uint32_t&gt; toUndefvs;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    std::vector&lt;bool&gt; isnotundef(size, <span class="keyword">false</span>);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; size; ++i) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">if</span> (from[i] == efd::_undef) { fromUndefvs.push_back(i); }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">if</span> (to[i] == efd::_undef) { toUndefvs.push_back(i); }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">else</span> { isnotundef[to[i]] = <span class="keyword">true</span>; }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="comment">// If this assignment does not have an &#39;_undef&#39;, we don&#39;t have to do nothing.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">if</span> (fromUndefvs.empty()) <span class="keywordflow">return</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// Bipartite graph &#39;G = (X U Y, E)&#39; in which we want to find a matching.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// Mx: X -&gt; Y (matching of each vertex from X to Y)</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// My: Y -&gt; X (matching of each vertex from Y to X)</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// lx: from -&gt; R (&#39;label&#39; for each element of &#39;from&#39;)</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="comment">// ly: to -&gt; R (&#39;label&#39; for each element of &#39;to&#39;)</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    uint32_t xsize = fromUndefvs.size();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    uint32_t ysize = xsize;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    uint32_t bsize = xsize + ysize;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="../../d2/d54/classefd_1_1WeightedGraph.xhtml">efd::WeightedGraph&lt;uint32_t&gt;</a> bgraph(bsize);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    std::vector&lt;uint32_t&gt; M(bsize, efd::_undef);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    std::vector&lt;uint32_t&gt; l(bsize, 0);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">     * THE HUNGARY ALGORITHM</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     * 1. Initialization:</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     *     1.1. Construct &#39;bgraph&#39; (a complete bipartite graph) &#39;G = (V, E)&#39; by applying</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     *          BFS from all &#39;_undef&#39; vertices to all &#39;_undef&#39;s;</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">     *     1.2. Construct a weight function &#39;w: E -&gt; R&#39;;</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     *     1.3. Set the initial labels &#39;lx&#39;;</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; xsize; ++i) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        uint32_t src = fromUndefvs[i];</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        std::vector&lt;uint32_t&gt; d(size, efd::_undef);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        std::vector&lt;bool&gt; visited(size, <span class="keyword">false</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        std::queue&lt;uint32_t&gt; q;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        q.push(src);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        d[src] = 0;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        visited[src] = <span class="keyword">true</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">while</span> (!q.empty()) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            uint32_t u = q.front();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            q.pop();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> v : graph-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">adj</a>(u)) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">if</span> (!visited[v]) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    d[v] = d[u] + 1;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    visited[v] = <span class="keyword">true</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    q.push(v);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">for</span> (uint32_t j = 0; j &lt; ysize; ++j) {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            uint32_t tgt = toUndefvs[j];</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">if</span> (d[tgt] != efd::_undef)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="comment">// The id of &#39;tgt&#39; in the &#39;bgraph&#39; is &#39;j + xsize&#39;.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                bgraph.putEdge(i, j + xsize, d[tgt]);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     *  Inverting the weights.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">     *  This solves finds the max-weight assignment problem. As we want the minimum number</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">     *  of swaps, we have to find the minimum weight matching.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">     *  We do this by subtracting all weights by the bigger weight.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    uint32_t maxw = 0;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; xsize; ++i) {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">for</span> (uint32_t j : bgraph.succ(i)) {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            uint32_t w = bgraph.getW(i, j);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">if</span> (maxw &lt; w) maxw = w;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; xsize; ++i) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">for</span> (uint32_t j : bgraph.succ(i)) {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            uint32_t neww = maxw - bgraph.getW(i, j);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            bgraph.setW(i, j, neww);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            bgraph.setW(j, i, neww);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            l[i] = max(l[i], bgraph.getW(i, j));</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     *     1.4. Construct &#39;eqgraph&#39; (the equality graph) &#39;H = (V, El)&#39;, where an edge</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     *          &#39;(u, v)&#39; from &#39;E&#39; is in &#39;El&#39; iff &#39;w(u, v) = lx(u) + ly(v)&#39;;</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     *  (NEEDED??)</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">     * 2. Main Loop:</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     *     2.1. Pick a vertex &#39;u&#39; outside &#39;M&#39;;       &lt;&lt;-------------------------------|</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     *     2.2. Set &#39;S = {u}&#39; and &#39;T = 0&#39; (empty);                                    |</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     *     2.3. Initialize the &#39;slack&#39; structure for computing &#39;@&#39; (needed on 2.4.);  |</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    uint32_t u;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">while</span> ((u = getUndefVertex(0, xsize, M)) != efd::_undef) {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        std::vector&lt;uint32_t&gt; slack(ysize, efd::_undef), slackx(ysize, u);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        std::vector&lt;bool&gt; S(xsize, <span class="keyword">false</span>), T(ysize, <span class="keyword">false</span>), NS(ysize, <span class="keyword">false</span>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        S[u] = <span class="keyword">true</span>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">for</span> (uint32_t y : bgraph.succ(u))</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            slack[y - xsize] = l[u] + l[y] - bgraph.getW(u, y);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">/*</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">         *     2.4. If &#39;T&#39; equals the neighbors of &#39;S&#39;:  &lt;&lt;------------------------|      |</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">         *         2.4.1. Get the minimum difference &#39;@&#39; from &#39;lx(u) + ly(v)&#39; and &#39;w(u, v)&#39;,</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">         *                for all &#39;u&#39; inside &#39;S&#39; and &#39;v&#39; outside &#39;T&#39;;              |      |</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">         *         2.4.2. Sum &#39;@&#39; to all &#39;lx(u)&#39;, where &#39;u&#39; is inside &#39;S&#39;;         |      |</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">         *         2.4.3. Subtract &#39;@&#39; to all &#39;ly(v)&#39;, where &#39;v&#39; is inside &#39;T&#39;.    |      |</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">         */</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordtype">bool</span> reset = <span class="keyword">false</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">for</span> (uint32_t y : bgraph.succ(u))</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            NS[y - xsize] = l[u] + l[y] == bgraph.getW(u, y);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">if</span> (NS == T) {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                uint32_t alpha = efd::_undef;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; ysize; ++i)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    <span class="keywordflow">if</span> (!T[i]) alpha = min(alpha, slack[i]);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; xsize; ++i)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    <span class="keywordflow">if</span> (S[i]) l[i] -= alpha;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; ysize; ++i)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    <span class="keywordflow">if</span> (T[i]) l[i + xsize] += alpha;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; ysize; ++i)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    <span class="keywordflow">if</span> (!T[i]) slack[i] -= alpha;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; ysize; ++i) {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    uint32_t y = i + xsize;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    NS[i] = NS[i] || (l[slackx[i]] + l[y]) == bgraph.getW(slackx[i], y);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="comment">/*</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">             *     2.5. Else (if &#39;T&#39; does not equals the neighbors of &#39;S&#39;):            |      |</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">             *         2.5.1. Pick a vertex &#39;v&#39; that is not in &#39;T&#39; but in the neighbors of &#39;S&#39;;</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">             *         2.5.2. If &#39;v&#39; is outside &#39;M&#39;:                                   |      |</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">             *             2.5.2.1. &#39;u -&gt; v&#39; is an augmenting path, so augment &#39;M&#39;;    |      |</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">             *             2.5.2.1. Update the &#39;slack&#39; structure;                      |      |</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">             *             2.5.2.1. Goto 2.1.  ----------------------------------------|------|</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">             *         2.5.3. Else if &#39;(v,z)&#39; is in &#39;M&#39;:                               |</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">             *             2.5.3.1. Set &#39;S = S U {z}&#39;;                                 |</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">             *             2.5.3.2. Set &#39;T = T U {v}&#39;;                                 |</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">             *             2.5.3.3. Update the &#39;slack&#39; structure;                      |</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">             *             2.5.3.4. Goto 2.4.  ----------------------------------------|</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">             */</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">else</span> {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                uint32_t v = xsize;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; ysize; ++i)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    <span class="keywordflow">if</span> (!T[i] &amp;&amp; NS[i]) { v += i; <span class="keywordflow">break</span>; }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="keywordflow">if</span> (M[v] == efd::_undef) {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    <span class="comment">// Finding an alternate path from u -&gt; v.</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    <span class="comment">// 1. We create a directed graph similar to &#39;bgraph&#39;. Every unmatched edge</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    <span class="comment">// corresponds to an edge from X to Y vertices set. The oposite is true for</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    <span class="comment">// matched edges.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">efd::Graph</a> altGraph(bsize, <a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#ab6f268ad08bb51da9462e3157a3e5414a73af5541b5af71d41925a9bc55e5d09f">efd::Graph::Directed</a>);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    <span class="keywordflow">for</span> (uint32_t x = 0; x &lt; xsize; ++x)</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                        <span class="keywordflow">for</span> (uint32_t y : bgraph.succ(x))</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                            <span class="keywordflow">if</span> (l[x] + l[y] == bgraph.getW(x, y)) {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                <span class="keywordflow">if</span> (M[x] == y) { altGraph.putEdge(y, x); }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                <span class="keywordflow">else</span> { altGraph.putEdge(x, y); }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                            }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    <span class="comment">// 2. BFS through &#39;altGraph&#39; until we find &#39;v&#39;.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    std::queue&lt;uint32_t&gt; q;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    std::vector&lt;uint32_t&gt; pi(bsize, efd::_undef);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    std::vector&lt;bool&gt; visited(bsize, <span class="keyword">false</span>);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    q.push(u);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    visited[u] = <span class="keyword">true</span>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    <span class="keywordflow">while</span> (!q.empty()) {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                        uint32_t a = q.front();</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        q.pop();</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                        <span class="keywordflow">if</span> (a == v) <span class="keywordflow">break</span>;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        <span class="keywordflow">for</span> (uint32_t b : altGraph.succ(a)) {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                            <span class="keywordflow">if</span> (!visited[b]) {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                pi[b] = a;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                q.push(b);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                visited[b] = <span class="keyword">true</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                            }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    <span class="keywordflow">do</span> {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        M[v] = pi[v];</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                        M[pi[v]] = v;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        v = pi[pi[v]];</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    } <span class="keywordflow">while</span> (v != efd::_undef);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    reset = <span class="keyword">true</span>;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    uint32_t z = M[v];</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    S[z] = <span class="keyword">true</span>;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    T[v - xsize] = <span class="keyword">true</span>;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    <span class="keywordflow">for</span> (uint32_t y : bgraph.succ(z)) {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                        uint32_t i = y - xsize;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                        uint32_t newSlack = l[z] + l[y] - bgraph.getW(z, y);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                        <span class="keywordflow">if</span> (slack[i] &gt; newSlack) {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                            slack[i] = newSlack;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                            slackx[i] = z;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                        }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                    }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                }</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        } <span class="keywordflow">while</span> (!reset);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    std::vector&lt;uint32_t&gt; logicalUndefs;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; size; ++i)</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">if</span> (!isnotundef[i]) { logicalUndefs.push_back(i); }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; xsize; ++i)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        from[fromUndefvs[i]] = logicalUndefs[i];</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; ysize; ++i)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        to[toUndefvs[i]] = logicalUndefs[M[i + xsize]];</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keyword">static</span> std::vector&lt;uint32_t&gt; findCycleDFS(uint32_t src,</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                          std::vector&lt;std::vector&lt;uint32_t&gt;&gt;&amp; adj) {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    std::vector&lt;uint32_t&gt; color(adj.size(), _white);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    std::vector&lt;uint32_t&gt; pi(adj.size(), efd::_undef);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    std::stack&lt;uint32_t&gt; stack;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    stack.push(src);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    color[src] = _silver;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    uint32_t from, to;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordtype">bool</span> cyclefound = <span class="keyword">false</span>;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">// The color &quot;hierarchy&quot; goes:</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="comment">// white -&gt; silver -&gt; gray -&gt; black</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">while</span> (!cyclefound &amp;&amp; !stack.empty()) {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        uint32_t u = stack.top();</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">if</span> (color[u] == _gray) { color[u] = _black; stack.pop(); <span class="keywordflow">continue</span>; }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        color[u] = _gray;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> v : adj[u]) {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">if</span> (color[v] == _white) {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                pi[v] = u;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                color[v] = _silver;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                stack.push(v);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (color[v] == _gray) {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                from = u; to = v;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                cyclefound = <span class="keyword">true</span>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    std::vector&lt;uint32_t&gt; cycle;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">if</span> (cyclefound) {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        cycle.push_back(from);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            from = pi[from];</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            cycle.push_back(from);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        } <span class="keywordflow">while</span> (from != to);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">return</span> cycle;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;}</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="keyword">static</span> std::vector&lt;uint32_t&gt;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;findGoodVerticesBFS(<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml">efd::Graph::Ref</a> graph, uint32_t src, uint32_t tgt) {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    uint32_t size = graph-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">size</a>();</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keyword">const</span> uint32_t inf = std::numeric_limits&lt;uint32_t&gt;::max();</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="comment">// List of good vertices used to reach the &#39;i&#39;-th vertex.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="comment">// We say &#39;u&#39; is a good vertex of &#39;v&#39; iff the path &#39;src -&gt; u -&gt; v&#39; results in the</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="comment">// smallest path from &#39;src&#39; to &#39;v&#39;.</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    std::vector&lt;std::vector&lt;bool&gt;&gt; goodvlist(size, std::vector&lt;bool&gt;(size, <span class="keyword">false</span>));</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="comment">// Distance from the source.</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    std::vector&lt;uint32_t&gt; d(size, inf);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    std::queue&lt;uint32_t&gt; q;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    d[src] = 0;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    q.push(src);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordflow">while</span> (!q.empty()) {</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        uint32_t u = q.front();</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        q.pop();</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="comment">// Stop when we get to &#39;tgt&#39;, or we reach the distance of &#39;tgt&#39;.</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">if</span> (u == tgt || d[u] &gt;= d[tgt]) <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> v : graph-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">adj</a>(u)) {</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="comment">// If we find a vertex &#39;v&#39; already visited, but our distance is worse,</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <span class="comment">// then &#39;u&#39; is not a good vertex of &#39;v&#39;.</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keywordflow">if</span> (d[v] != inf &amp;&amp; d[v] &lt; d[u] + 1)</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="comment">// If it is our first time visiting &#39;v&#39; or the distance of &#39;src -&gt; u -&gt; v&#39;</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="comment">// is equal the best distance of &#39;v&#39; (&#39;d[v]&#39;), then &#39;u&#39; is a good vertex of</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            <span class="comment">// &#39;v&#39;.</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (d[v] == inf) {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                q.push(v);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                d[v] = d[u] + 1;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            <span class="comment">// Every good vertex of &#39;u&#39; is also a good vertex of &#39;v&#39;.</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            goodvlist[v] = goodvlist[u];</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            goodvlist[v][v] = <span class="keyword">true</span>;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            goodvlist[v][u] = <span class="keyword">true</span>;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        }</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    }</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    std::vector&lt;uint32_t&gt; goodv;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> v : graph-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">adj</a>(src))</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keywordflow">if</span> (goodvlist[tgt][v])</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            goodv.push_back(v);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">return</span> goodv;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno"><a class="line" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#ab0b3369e654536c52169bb172447ece8">  375</a></span>&#160;<a class="code" href="../../d4/deb/namespaceefd.xhtml#a8c6eb9e95f5fad95ab54779a502ea54f">efd::SwapSeq</a> <a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#ab0b3369e654536c52169bb172447ece8">efd::ApproxTSFinder::findImpl</a>(<span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a>&amp; from, <span class="keyword">const</span> <a class="code" href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">InverseMap</a>&amp; to) {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keyword">auto</span> fromInv = from;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keyword">auto</span> toInv = to;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    fixUndefAssignments(<a class="code" href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#a190d315089351c298f854f86a5c604ac">mG</a>, fromInv, toInv);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    uint32_t size = <a class="code" href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#a190d315089351c298f854f86a5c604ac">mG</a>-&gt;<a class="code" href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">size</a>();</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    std::vector&lt;std::vector&lt;uint32_t&gt;&gt; gprime(size, std::vector&lt;uint32_t&gt;());</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    std::vector&lt;bool&gt; inplace(size, <span class="keyword">false</span>);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a8c6eb9e95f5fad95ab54779a502ea54f">SwapSeq</a> swapseq;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="comment">// Constructing the inverse for &#39;to&#39; -----------------------</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <a class="code" href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">Mapping</a> toMap(size, 0);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; size; ++i)</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        toMap[toInv[i]] = i;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="comment">// ---------------------------------------------------------</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="comment">// Initializing data ---------------------------------------</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="comment">// 1. Checking which vertices are inplace.</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; size; ++i)</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keywordflow">if</span> (fromInv[i] == toInv[i]) inplace[i] = <span class="keyword">true</span>;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keywordflow">else</span> inplace[i] = <span class="keyword">false</span>;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="comment">// 2. Constructing the graph with the good neighbors.</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; size; ++i)</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keywordflow">if</span> (!inplace[i])</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            <span class="comment">// For each vertex &#39;i&#39; in &#39;graph&#39;, we want to find good vertices</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            <span class="comment">// from &#39;i&#39; to the vertex that should hold the label that is</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            <span class="comment">// currently in &#39;i&#39; (&#39;from[i]&#39;).</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            gprime[i] = findGoodVerticesBFS(<a class="code" href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#a190d315089351c298f854f86a5c604ac">mG</a>, i, toMap[fromInv[i]]);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            gprime[i].clear();</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="comment">// ---------------------------------------------------------</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="comment">// Main Loop -----------------------------------------------</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keywordflow">do</span> {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        std::vector&lt;uint32_t&gt; swappath;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="comment">// 1. Trying to find a &#39;happy chain&#39;</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; size; ++i)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="keywordflow">if</span> (!inplace[i]) {</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                swappath = findCycleDFS(i, gprime);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                <span class="keywordflow">if</span> (!swappath.empty()) <span class="keywordflow">break</span>;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            }</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="comment">// 2. If we failed, we want a unhappy swap</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <span class="keywordflow">if</span> (swappath.empty()) {</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            <span class="comment">// We search for an edge (u, v), such that &#39;u&#39; has a label that</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            <span class="comment">// is out of place, and &#39;v&#39; has a label in place.</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            <span class="keywordflow">for</span> (uint32_t u = 0; u &lt; size; ++u) {</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                <span class="keywordflow">if</span> (!inplace[u]) {</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                    <span class="keywordtype">bool</span> found = <span class="keyword">false</span>;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                    <span class="keywordflow">for</span> (<span class="keyword">auto</span> v : gprime[u])</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                        <span class="keywordflow">if</span> (inplace[v]) {</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                            found = <span class="keyword">true</span>;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                            swappath = { u, v };</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                        }</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                    <span class="keywordflow">if</span> (found) <span class="keywordflow">break</span>;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                }</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            }</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        }</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="comment">// 3. Swap what we found</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="keywordflow">if</span> (!swappath.empty()) {</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 1, e = swappath.size(); i &lt; e; ++i) {</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                <span class="keyword">auto</span> u = swappath[i-1], v = swappath[i];</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                swapseq.push_back({ u, v });</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                std::swap(fromInv[u], fromInv[v]);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            }</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            <span class="comment">// Updating those vertices that were swapped.</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            <span class="comment">// The others neither were magically put into place nor changed &#39;their mind&#39;</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <span class="comment">// about where to go (which are good neighbors).</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 0, e = swappath.size(); i &lt; e; ++i) {</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                <span class="comment">// Updating vertex u.</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                <span class="keyword">auto</span> u = swappath[i];</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                <span class="keywordflow">if</span> (fromInv[u] == toInv[u]) inplace[u] = <span class="keyword">true</span>;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                <span class="keywordflow">else</span> inplace[u] = <span class="keyword">false</span>;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                <span class="keywordflow">if</span> (!inplace[u]) gprime[u] = findGoodVerticesBFS(<a class="code" href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#a190d315089351c298f854f86a5c604ac">mG</a>, u, toMap[fromInv[u]]);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                <span class="keywordflow">else</span> gprime[u].clear();</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            }</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    } <span class="keywordflow">while</span> (<span class="keyword">true</span>);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="comment">// ---------------------------------------------------------</span></div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keywordflow">return</span> swapseq;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;}</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno"><a class="line" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a45c83e2cd7ef4a3565e94ec9c9b40a5d">  470</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a45c83e2cd7ef4a3565e94ec9c9b40a5d">efd::ApproxTSFinder::preprocess</a>() {}</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno"><a class="line" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a645a9978bdf26e0aeb255950b7bdadfa">  472</a></span>&#160;<a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a14b89cd3f7d8c27929cc756c12c31103">efd::ApproxTSFinder::uRef</a> <a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a645a9978bdf26e0aeb255950b7bdadfa">efd::ApproxTSFinder::Create</a>() {</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a14b89cd3f7d8c27929cc756c12c31103">uRef</a>(<span class="keyword">new</span> <a class="code" href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml">ApproxTSFinder</a>());</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div><div class="ttc" id="namespaceefd_xhtml_a8c6eb9e95f5fad95ab54779a502ea54f"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a8c6eb9e95f5fad95ab54779a502ea54f">efd::SwapSeq</a></div><div class="ttdeci">std::vector&lt; Swap &gt; SwapSeq</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00023">Defs.h:23</a></div></div>
<div class="ttc" id="WeightedGraph_8h_xhtml"><div class="ttname"><a href="../../d6/df7/WeightedGraph_8h.xhtml">WeightedGraph.h</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_aa85ea20ad74d6a7df7a52c13a9fabe2d"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#aa85ea20ad74d6a7df7a52c13a9fabe2d">efd::Graph::size</a></div><div class="ttdeci">uint32_t size() const</div><div class="ttdoc">Return the number of vertices. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00034">Graph.cpp:34</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_a3531989ad03fb1b38b43c7554d0d378e"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#a3531989ad03fb1b38b43c7554d0d378e">efd::Graph::adj</a></div><div class="ttdeci">std::set&lt; uint32_t &gt; adj(uint32_t i) const</div><div class="ttdoc">Return the set of adjacent vertices of some vertex i. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/dea/Graph_8cpp_source.xhtml#l00046">Graph.cpp:46</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml_ab6f268ad08bb51da9462e3157a3e5414a73af5541b5af71d41925a9bc55e5d09f"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml#ab6f268ad08bb51da9462e3157a3e5414a73af5541b5af71d41925a9bc55e5d09f">efd::Graph::Directed</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d16/Graph_8h_source.xhtml#l00023">Graph.h:23</a></div></div>
<div class="ttc" id="classefd_1_1ApproxTSFinder_xhtml_a645a9978bdf26e0aeb255950b7bdadfa"><div class="ttname"><a href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a645a9978bdf26e0aeb255950b7bdadfa">efd::ApproxTSFinder::Create</a></div><div class="ttdeci">static uRef Create()</div><div class="ttdoc">Creates an instance of this class. </div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d0b/ApproxTSFinder_8cpp_source.xhtml#l00472">ApproxTSFinder.cpp:472</a></div></div>
<div class="ttc" id="classefd_1_1TokenSwapFinder_xhtml_a190d315089351c298f854f86a5c604ac"><div class="ttname"><a href="../../d1/dad/classefd_1_1TokenSwapFinder.xhtml#a190d315089351c298f854f86a5c604ac">efd::TokenSwapFinder::mG</a></div><div class="ttdeci">Graph::Ref mG</div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d2d/TokenSwapFinder_8h_source.xhtml#l00015">TokenSwapFinder.h:15</a></div></div>
<div class="ttc" id="classefd_1_1WeightedGraph_xhtml"><div class="ttname"><a href="../../d2/d54/classefd_1_1WeightedGraph.xhtml">efd::WeightedGraph</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d6/df7/WeightedGraph_8h_source.xhtml#l00013">WeightedGraph.h:13</a></div></div>
<div class="ttc" id="ApproxTSFinder_8h_xhtml"><div class="ttname"><a href="../../db/dfc/ApproxTSFinder_8h.xhtml">ApproxTSFinder.h</a></div></div>
<div class="ttc" id="classefd_1_1ApproxTSFinder_xhtml_a14b89cd3f7d8c27929cc756c12c31103"><div class="ttname"><a href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a14b89cd3f7d8c27929cc756c12c31103">efd::ApproxTSFinder::uRef</a></div><div class="ttdeci">std::unique_ptr&lt; ApproxTSFinder &gt; uRef</div><div class="ttdef"><b>Definition:</b> <a href="../../db/dfc/ApproxTSFinder_8h_source.xhtml#l00014">ApproxTSFinder.h:14</a></div></div>
<div class="ttc" id="classefd_1_1ApproxTSFinder_xhtml_a45c83e2cd7ef4a3565e94ec9c9b40a5d"><div class="ttname"><a href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#a45c83e2cd7ef4a3565e94ec9c9b40a5d">efd::ApproxTSFinder::preprocess</a></div><div class="ttdeci">void preprocess() override</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d0b/ApproxTSFinder_8cpp_source.xhtml#l00470">ApproxTSFinder.cpp:470</a></div></div>
<div class="ttc" id="classefd_1_1ApproxTSFinder_xhtml_ab0b3369e654536c52169bb172447ece8"><div class="ttname"><a href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml#ab0b3369e654536c52169bb172447ece8">efd::ApproxTSFinder::findImpl</a></div><div class="ttdeci">SwapSeq findImpl(const InverseMap &amp;from, const InverseMap &amp;to) override</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d0b/ApproxTSFinder_8cpp_source.xhtml#l00375">ApproxTSFinder.cpp:375</a></div></div>
<div class="ttc" id="classefd_1_1Graph_xhtml"><div class="ttname"><a href="../../db/db3/classefd_1_1Graph.xhtml">efd::Graph</a></div><div class="ttdoc">Graph representation. </div><div class="ttdef"><b>Definition:</b> <a href="../../d7/d16/Graph_8h_source.xhtml#l00011">Graph.h:11</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a1f91f26f141eb5b2dd549121451a786c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a1f91f26f141eb5b2dd549121451a786c">efd::InverseMap</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; InverseMap</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00012">Defs.h:12</a></div></div>
<div class="ttc" id="classefd_1_1ApproxTSFinder_xhtml"><div class="ttname"><a href="../../d4/dfd/classefd_1_1ApproxTSFinder.xhtml">efd::ApproxTSFinder</a></div><div class="ttdoc">4-Approximative polynomial algorithm. </div><div class="ttdef"><b>Definition:</b> <a href="../../db/dfc/ApproxTSFinder_8h_source.xhtml#l00011">ApproxTSFinder.h:11</a></div></div>
<div class="ttc" id="Defs_8h_xhtml"><div class="ttname"><a href="../../d1/d73/Defs_8h.xhtml">Defs.h</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a76fb98cd4a35566d53c2f0513c5d12d1"><div class="ttname"><a href="../../d8/dcc/namespacestd.xhtml#a76fb98cd4a35566d53c2f0513c5d12d1">std::to_string</a></div><div class="ttdeci">string to_string(efd::EnumString&lt; T, first, last &gt; &amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="../../dd/d62/EnumString_8h_source.xhtml#l00053">EnumString.h:53</a></div></div>
<div class="ttc" id="namespaceefd_xhtml_a12a4775008cb8b6242cedc3621d98f9c"><div class="ttname"><a href="../../d4/deb/namespaceefd.xhtml#a12a4775008cb8b6242cedc3621d98f9c">efd::Mapping</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; Mapping</div><div class="ttdoc">Defines the type used for mapping the qubits. </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d73/Defs_8h_source.xhtml#l00011">Defs.h:11</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Aug 8 2018 16:39:35 for Enfield by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="../../doxygen.png" alt="doxygen"/>
</a> 1.8.14
</small></address>
</body>
</html>
